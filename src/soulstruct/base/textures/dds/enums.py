from __future__ import annotations

__all__ = [
    "DDSD",
    "DDSCAPS",
    "DDSCAPS2",
    "DDPF",
    "D3D10_RESOURCE_DIMENSION",
    "RESOURCE_MISC",
    "ALPHA_MODE",
    "DXGI_FORMAT",
    "DXGI_FORMAT_BPP",
]

from enum import IntEnum


class DDSD(IntEnum):
    CAPS = 0x1  # always required
    HEIGHT = 0x2  # always required
    WIDTH = 0x4  # always required
    PITCH = 0x8  # required when pitch is provided for an uncompressed texture
    PIXELFORMAT = 0x1000  # always required
    MIPMAPCOUNT = 0x20000  # required in a mipmapped texture
    LINEARSIZE = 0x80000  # required when pitch is provided for a compressed texture
    DEPTH = 0x800000  # required in a depth texture

    @classmethod
    def get_required_flags(cls) -> int:
        """Starting value for all flags."""
        return DDSD.CAPS | DDSD.HEIGHT | DDSD.WIDTH | DDSD.PIXELFORMAT


class DDSCAPS(IntEnum):
    COMPLEX = 0x8
    TEXTURE = 0x1000
    MIPMAP = 0x400000


class DDSCAPS2(IntEnum):
    CUBEMAP = 0x200
    CUBEMAP_POSITIVEX = 0x400
    CUBEMAP_NEGATIVEX = 0x800
    CUBEMAP_POSITIVEY = 0x1000
    CUBEMAP_NEGATIVEY = 0x2000
    CUBEMAP_POSITIVEZ = 0x4000
    CUBEMAP_NEGATIVEZ = 0x8000
    VOLUME = 0x200000

    @classmethod
    def get_cubemap_all_faces(cls) -> int:
        return (
            cls.CUBEMAP | cls.CUBEMAP_POSITIVEX | cls.CUBEMAP_NEGATIVEX | cls.CUBEMAP_POSITIVEY |
            cls.CUBEMAP_NEGATIVEY | cls.CUBEMAP_POSITIVEZ | cls.CUBEMAP_NEGATIVEZ
        )


class DDPF(IntEnum):
    ALPHAPIXELS = 0x1
    ALPHA = 0x2
    FOURCC = 0x4
    RGB = 0x40
    YUV = 0x200
    LUMINANCE = 0x20000


class D3D10_RESOURCE_DIMENSION(IntEnum):
    TEXTURE1D = 2
    TEXTURE2D = 3
    TEXTURE3D = 4


class RESOURCE_MISC(IntEnum):
    TEXTURECUBE = 0x4


class ALPHA_MODE(IntEnum):
    """Fills a formerly-reserved `miscFlags2` field in `DX10Header`."""
    UNKNOWN = 0
    STRAIGHT = 1
    PREMULTIPLIED = 2
    OPAQUE = 3
    CUSTOM = 4


class DXGI_FORMAT(IntEnum):
    """Extra format enum in `DX10` headers or `TPFTexture` console headers.

    https://learn.microsoft.com/en-us/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format
    """
    UNKNOWN = 0
    R32G32B32A32_TYPELESS = 1
    R32G32B32A32_FLOAT = 2
    R32G32B32A32_UINT = 3
    R32G32B32A32_SINT = 4
    R32G32B32_TYPELESS = 5
    R32G32B32_FLOAT = 6
    R32G32B32_UINT = 7
    R32G32B32_SINT = 8
    R16G16B16A16_TYPELESS = 9
    R16G16B16A16_FLOAT = 10
    R16G16B16A16_UNORM = 11
    R16G16B16A16_UINT = 12
    R16G16B16A16_SNORM = 13
    R16G16B16A16_SINT = 14
    R32G32_TYPELESS = 15
    R32G32_FLOAT = 16
    R32G32_UINT = 17
    R32G32_SINT = 18
    R32G8X24_TYPELESS = 19
    D32_FLOAT_S8X24_UINT = 20
    R32_FLOAT_X8X24_TYPELESS = 21
    X32_TYPELESS_G8X24_UINT = 22
    R10G10B10A2_TYPELESS = 23
    R10G10B10A2_UNORM = 24
    R10G10B10A2_UINT = 25
    R11G11B10_FLOAT = 26
    R8G8B8A8_TYPELESS = 27
    R8G8B8A8_UNORM = 28
    R8G8B8A8_UNORM_SRGB = 29
    R8G8B8A8_UINT = 30
    R8G8B8A8_SNORM = 31
    R8G8B8A8_SINT = 32
    R16G16_TYPELESS = 33
    R16G16_FLOAT = 34
    R16G16_UNORM = 35
    R16G16_UINT = 36
    R16G16_SNORM = 37
    R16G16_SINT = 38
    R32_TYPELESS = 39
    D32_FLOAT = 40
    R32_FLOAT = 41
    R32_UINT = 42
    R32_SINT = 43
    R24G8_TYPELESS = 44
    D24_UNORM_S8_UINT = 45
    R24_UNORM_X8_TYPELESS = 46
    X24_TYPELESS_G8_UINT = 47
    R8G8_TYPELESS = 48
    R8G8_UNORM = 49
    R8G8_UINT = 50
    R8G8_SNORM = 51
    R8G8_SINT = 52
    R16_TYPELESS = 53
    R16_FLOAT = 54
    D16_UNORM = 55
    R16_UNORM = 56
    R16_UINT = 57
    R16_SNORM = 58
    R16_SINT = 59
    R8_TYPELESS = 60
    R8_UNORM = 61
    R8_UINT = 62
    R8_SNORM = 63
    R8_SINT = 64
    A8_UNORM = 65
    R1_UNORM = 66
    R9G9B9E5_SHAREDEXP = 67
    R8G8_B8G8_UNORM = 68
    G8R8_G8B8_UNORM = 69
    BC1_TYPELESS = 70
    BC1_UNORM = 71
    BC1_UNORM_SRGB = 72
    BC2_TYPELESS = 73
    BC2_UNORM = 74
    BC2_UNORM_SRGB = 75
    BC3_TYPELESS = 76
    BC3_UNORM = 77
    BC3_UNORM_SRGB = 78
    BC4_TYPELESS = 79
    BC4_UNORM = 80
    BC4_SNORM = 81
    BC5_TYPELESS = 82
    BC5_UNORM = 83
    BC5_SNORM = 84
    B5G6R5_UNORM = 85
    B5G5R5A1_UNORM = 86
    B8G8R8A8_UNORM = 87
    B8G8R8X8_UNORM = 88
    R10G10B10_XR_BIAS_A2_UNORM = 89
    B8G8R8A8_TYPELESS = 90
    B8G8R8A8_UNORM_SRGB = 91
    B8G8R8X8_TYPELESS = 92
    B8G8R8X8_UNORM_SRGB = 93
    BC6H_TYPELESS = 94
    BC6H_UF16 = 95
    BC6H_SF16 = 96
    BC7_TYPELESS = 97
    BC7_UNORM = 98
    BC7_UNORM_SRGB = 99
    AYUV = 100
    Y410 = 101
    Y416 = 102
    NV12 = 103
    P010 = 104
    P016 = 105
    OPAQUE_420 = 106  # DGXI_FORMAT_420_OPAQUE
    YUY2 = 107
    Y210 = 108
    Y216 = 109
    NV11 = 110
    AI44 = 111
    IA44 = 112
    P8 = 113
    A8P8 = 114
    B4G4R4A4_UNORM = 115

    # Weirder:
    P208 = 130
    V208 = 131
    V408 = 132
    FORCE_UINT = 0xffffffff

    def get_format_info(self) -> tuple[int, int, int]:
        """Return bits per pixel, pixel block size, and number of bytes corresponding to one pixel set."""
        bits_per_pixel = DXGI_FORMAT_BPP[self]
        pixel_block_size = 4 if (70 <= self <= 84 or 94 <= self <= 99) else 1
        dds_bytes_per_pixel_set = bits_per_pixel // 8 if pixel_block_size == 1 else pixel_block_size * 2
        return bits_per_pixel, pixel_block_size, dds_bytes_per_pixel_set


# Bits per pixel for the 116 standard DXGI formats.
DXGI_FORMAT_BPP = {
    DXGI_FORMAT.UNKNOWN: 0,
    DXGI_FORMAT.R32G32B32A32_TYPELESS: 128,
    DXGI_FORMAT.R32G32B32A32_FLOAT: 128,
    DXGI_FORMAT.R32G32B32A32_UINT: 128,
    DXGI_FORMAT.R32G32B32A32_SINT: 128,
    DXGI_FORMAT.R32G32B32_TYPELESS: 96,
    DXGI_FORMAT.R32G32B32_FLOAT: 96,
    DXGI_FORMAT.R32G32B32_UINT: 96,
    DXGI_FORMAT.R32G32B32_SINT: 96,
    DXGI_FORMAT.R16G16B16A16_TYPELESS: 64,
    DXGI_FORMAT.R16G16B16A16_FLOAT: 64,
    DXGI_FORMAT.R16G16B16A16_UNORM: 64,
    DXGI_FORMAT.R16G16B16A16_UINT: 64,
    DXGI_FORMAT.R16G16B16A16_SNORM: 64,
    DXGI_FORMAT.R16G16B16A16_SINT: 64,
    DXGI_FORMAT.R32G32_TYPELESS: 64,
    DXGI_FORMAT.R32G32_FLOAT: 64,
    DXGI_FORMAT.R32G32_UINT: 64,
    DXGI_FORMAT.R32G32_SINT: 64,
    DXGI_FORMAT.R32G8X24_TYPELESS: 64,
    DXGI_FORMAT.D32_FLOAT_S8X24_UINT: 64,
    DXGI_FORMAT.R32_FLOAT_X8X24_TYPELESS: 64,
    DXGI_FORMAT.X32_TYPELESS_G8X24_UINT: 64,
    DXGI_FORMAT.R10G10B10A2_TYPELESS: 32,
    DXGI_FORMAT.R10G10B10A2_UNORM: 32,
    DXGI_FORMAT.R10G10B10A2_UINT: 32,
    DXGI_FORMAT.R11G11B10_FLOAT: 32,
    DXGI_FORMAT.R8G8B8A8_TYPELESS: 32,
    DXGI_FORMAT.R8G8B8A8_UNORM: 32,
    DXGI_FORMAT.R8G8B8A8_UNORM_SRGB: 32,
    DXGI_FORMAT.R8G8B8A8_UINT: 32,
    DXGI_FORMAT.R8G8B8A8_SNORM: 32,
    DXGI_FORMAT.R8G8B8A8_SINT: 32,
    DXGI_FORMAT.R16G16_TYPELESS: 32,
    DXGI_FORMAT.R16G16_FLOAT: 32,
    DXGI_FORMAT.R16G16_UNORM: 32,
    DXGI_FORMAT.R16G16_UINT: 32,
    DXGI_FORMAT.R16G16_SNORM: 32,
    DXGI_FORMAT.R16G16_SINT: 32,
    DXGI_FORMAT.R32_TYPELESS: 32,
    DXGI_FORMAT.D32_FLOAT: 32,
    DXGI_FORMAT.R32_FLOAT: 32,
    DXGI_FORMAT.R32_UINT: 32,
    DXGI_FORMAT.R32_SINT: 32,
    DXGI_FORMAT.R24G8_TYPELESS: 32,
    DXGI_FORMAT.D24_UNORM_S8_UINT: 32,
    DXGI_FORMAT.R24_UNORM_X8_TYPELESS: 32,
    DXGI_FORMAT.X24_TYPELESS_G8_UINT: 32,
    DXGI_FORMAT.R8G8_TYPELESS: 16,
    DXGI_FORMAT.R8G8_UNORM: 16,
    DXGI_FORMAT.R8G8_UINT: 16,
    DXGI_FORMAT.R8G8_SNORM: 16,
    DXGI_FORMAT.R8G8_SINT: 16,
    DXGI_FORMAT.R16_TYPELESS: 16,
    DXGI_FORMAT.R16_FLOAT: 16,
    DXGI_FORMAT.D16_UNORM: 16,
    DXGI_FORMAT.R16_UNORM: 16,
    DXGI_FORMAT.R16_UINT: 16,
    DXGI_FORMAT.R16_SNORM: 16,
    DXGI_FORMAT.R16_SINT: 16,
    DXGI_FORMAT.R8_TYPELESS: 8,
    DXGI_FORMAT.R8_UNORM: 8,
    DXGI_FORMAT.R8_UINT: 8,
    DXGI_FORMAT.R8_SNORM: 8,
    DXGI_FORMAT.R8_SINT: 8,
    DXGI_FORMAT.A8_UNORM: 8,
    DXGI_FORMAT.R1_UNORM: 1,
    DXGI_FORMAT.R9G9B9E5_SHAREDEXP: 32,
    DXGI_FORMAT.R8G8_B8G8_UNORM: 32,
    DXGI_FORMAT.G8R8_G8B8_UNORM: 32,
    DXGI_FORMAT.BC1_TYPELESS: 4,
    DXGI_FORMAT.BC1_UNORM: 4,
    DXGI_FORMAT.BC1_UNORM_SRGB: 4,
    DXGI_FORMAT.BC2_TYPELESS: 8,
    DXGI_FORMAT.BC2_UNORM: 8,
    DXGI_FORMAT.BC2_UNORM_SRGB: 8,
    DXGI_FORMAT.BC3_TYPELESS: 8,
    DXGI_FORMAT.BC3_UNORM: 8,
    DXGI_FORMAT.BC3_UNORM_SRGB: 8,
    DXGI_FORMAT.BC4_TYPELESS: 4,
    DXGI_FORMAT.BC4_UNORM: 4,
    DXGI_FORMAT.BC4_SNORM: 4,
    DXGI_FORMAT.BC5_TYPELESS: 8,
    DXGI_FORMAT.BC5_UNORM: 8,
    DXGI_FORMAT.BC5_SNORM: 8,
    DXGI_FORMAT.B5G6R5_UNORM: 16,
    DXGI_FORMAT.B5G5R5A1_UNORM: 16,
    DXGI_FORMAT.B8G8R8A8_UNORM: 32,
    DXGI_FORMAT.B8G8R8X8_UNORM: 32,
    DXGI_FORMAT.R10G10B10_XR_BIAS_A2_UNORM: 32,
    DXGI_FORMAT.B8G8R8A8_TYPELESS: 32,
    DXGI_FORMAT.B8G8R8A8_UNORM_SRGB: 32,
    DXGI_FORMAT.B8G8R8X8_TYPELESS: 32,
    DXGI_FORMAT.B8G8R8X8_UNORM_SRGB: 32,
    DXGI_FORMAT.BC6H_TYPELESS: 8,
    DXGI_FORMAT.BC6H_UF16: 8,
    DXGI_FORMAT.BC6H_SF16: 8,
    DXGI_FORMAT.BC7_TYPELESS: 8,
    DXGI_FORMAT.BC7_UNORM: 8,
    DXGI_FORMAT.BC7_UNORM_SRGB: 8,
    DXGI_FORMAT.AYUV: 0,
    DXGI_FORMAT.Y410: 0,
    DXGI_FORMAT.Y416: 0,
    DXGI_FORMAT.NV12: 0,
    DXGI_FORMAT.P010: 0,
    DXGI_FORMAT.P016: 0,
    DXGI_FORMAT.OPAQUE_420: 0,
    DXGI_FORMAT.YUY2: 0,
    DXGI_FORMAT.Y210: 0,
    DXGI_FORMAT.Y216: 0,
    DXGI_FORMAT.NV11: 0,
    DXGI_FORMAT.AI44: 0,
    DXGI_FORMAT.IA44: 0,
    DXGI_FORMAT.P8: 0,
    DXGI_FORMAT.A8P8: 0,
    DXGI_FORMAT.B4G4R4A4_UNORM: 16,
}
