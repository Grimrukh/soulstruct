{
    "ATK_PARAM_ST": {
        "hit0_Radius": {
            "nickname": "Hitbox0Radius",
            "tooltip": "Radius of sphere/capsule hitbox (slot 0)."
        },
        "hit1_Radius": {
            "nickname": "Hitbox1Radius",
            "tooltip": "Radius of sphere/capsule hitbox (slot 1)."
        },
        "hit2_Radius": {
            "nickname": "Hitbox2Radius",
            "tooltip": "Radius of sphere/capsule hitbox (slot 2)."
        },
        "hit3_Radius": {
            "nickname": "Hitbox3Radius",
            "tooltip": "Radius of sphere/capsule hitbox (slot 3)."
        },
        "knockbackDist": {
            "nickname": "KnockbackDistance",
            "tooltip": "Knockback distance of attack."
        },
        "hitStopTime": {
            "nickname": "HitStopTime",
            "tooltip": "Unclear. This isn't hitbox duration, which is determined by the duration of the triggering TAE event. It may be the duration of the 'hit' flag on the target. Always set to 0, 0.08. or 0.11."
        },
        "spEffectId0": {
            "nickname": "SpecialEffectOnHit0",
            "tooltip": "Special effect applied to target on hit (slot 0).",
            "default": 0,
            "game_type": "SpecialEffectParam"
        },
        "spEffectId1": {
            "nickname": "SpecialEffectOnHit1",
            "tooltip": "Special effect applied to target on hit (slot 1).",
            "default": 0,
            "game_type": "SpecialEffectParam"
        },
        "spEffectId2": {
            "nickname": "SpecialEffectOnHit2",
            "tooltip": "Special effect applied to target on hit (slot 2).",
            "default": 0,
            "game_type": "SpecialEffectParam"
        },
        "spEffectId3": {
            "nickname": "SpecialEffectOnHit3",
            "tooltip": "Special effect applied to target on hit (slot 3).",
            "default": 0,
            "game_type": "SpecialEffectParam"
        },
        "spEffectId4": {
            "nickname": "SpecialEffectOnHit4",
            "tooltip": "Special effect applied to target on hit (slot 4).",
            "default": 0,
            "game_type": "SpecialEffectParam"
        },
        "hit0_DmyPoly1": {
            "nickname": "Hitbox0StartModelPoint",
            "tooltip": "Model point at origin of hitbox (slot 0). If Hitbox0EndModelPoint is not -1, the hitbox will be a capsule with hemispherical caps positioned at these origins (with a joining cylinder)."
        },
        "hit1_DmyPoly1": {
            "nickname": "Hitbox1StartModelPoint",
            "tooltip": "Model point at origin of hitbox (slot 1). If Hitbox1EndModelPoint is not -1, the hitbox will be a capsule with hemispherical caps positioned at these origins (with a joining cylinder)."
        },
        "hit2_DmyPoly1": {
            "nickname": "Hitbox2StartModelPoint",
            "tooltip": "Model point at origin of hitbox (slot 2). If Hitbox2EndModelPoint is not -1, the hitbox will be a capsule with hemispherical caps positioned at these origins (with a joining cylinder)."
        },
        "hit3_DmyPoly1": {
            "nickname": "Hitbox3StartModelPoint",
            "tooltip": "Model point at origin of hitbox (slot 3). If Hitbox3EndModelPoint is not -1, the hitbox will be a capsule with hemispherical caps positioned at these origins (with a joining cylinder)."
        },
        "hit0_DmyPoly2": {
            "nickname": "Hitbox0EndModelPoint",
            "tooltip": "Model point at end of capsule hitbox (slot 0). If this is -1, the hitbox will be a sphere placed at Hitbox0StartModelPoint."
        },
        "hit1_DmyPoly2": {
            "nickname": "Hitbox1EndModelPoint",
            "tooltip": "Model point at end of capsule hitbox (slot 1). If this is -1, the hitbox will be a sphere placed at Hitbox1StartModelPoint."
        },
        "hit2_DmyPoly2": {
            "nickname": "Hitbox2EndModelPoint",
            "tooltip": "Model point at end of capsule hitbox (slot 2). If this is -1, the hitbox will be a sphere placed at Hitbox2StartModelPoint."
        },
        "hit3_DmyPoly2": {
            "nickname": "Hitbox3EndModelPoint",
            "tooltip": "Model point at end of capsule hitbox (slot 3). If this is -1, the hitbox will be a sphere placed at Hitbox3StartModelPoint."
        },
        "blowingCorrection": {
            "nickname": "BlowOffCorrection",
            "tooltip": "Unknown. Never used."
        },
        "atkPhysCorrection": {
            "nickname": "PhysicalAttackPowerPercentage",
            "tooltip": "Multiplier (as percentage from 0 upwards) applied to character attack power to calculate physical attack damage.",
            "default": 100
        },
        "atkMagCorrection": {
            "nickname": "MagicAttackPowerPercentage",
            "tooltip": "Multiplier (as percentage from 0 upwards) applied to character attack power to calculate magic attack damage.",
            "default": 100
        },
        "atkFireCorrection": {
            "nickname": "FireAttackPowerPercentage",
            "tooltip": "Multiplier (as percentage from 0 upwards) applied to character attack power to calculate fire attack damage.",
            "default": 100
        },
        "atkThunCorrection": {
            "nickname": "LightningAttackPowerPercentage",
            "tooltip": "Multiplier (as percentage from 0 upwards) applied to character attack power to calculate lightning attack damage.",
            "default": 100
        },
        "atkStamCorrection": {
            "nickname": "StaminaAttackPowerPercentage",
            "tooltip": "Multiplier (as percentage from 0 upwards) applied to character attack power to calculate stamina damage.",
            "default": 100
        },
        "guardAtkRateCorrection": {
            "nickname": "GuardAttackPercentage",
            "tooltip": "Multiplier (as percentage from 0 upwards) applied to character guard attack power. Throw attacks have a value of 9900, which must essentially ignore blocking completely."
        },
        "guardBreakCorrection": {
            "nickname": "GuardBreakPercentage",
            "tooltip": "Multiplier (as percentage from 0 upwards) applied to character guard breaking power. Not sure what that is, exactly, but this is set to 0 for parries and 100 for all other attacks."
        },
        "atkThrowEscapeCorrection": {
            "nickname": "AttackDuringThrowPercentage",
            "tooltip": "Multiplier (as percentage from 0 upwards) applied to weapon attacks during throws. Generally set to 100, except for throw attacks themselves."
        },
        "atkSuperArmorCorrection": {
            "nickname": "PoiseAttackPercentage",
            "tooltip": "Multiplier (as percentage from 0 upwards) applied to damage to target poise. Generally set to 100, except for throw attacks themselves."
        },
        "atkPhys": {
            "nickname": "PhysicalAttackPower",
            "tooltip": "Absolute physical attack power of attack."
        },
        "atkMag": {
            "nickname": "MagicAttackPower",
            "tooltip": "Absolute magic attack power of attack."
        },
        "atkFire": {
            "nickname": "FireAttackPower",
            "tooltip": "Absolute fire attack power of attack."
        },
        "atkThun": {
            "nickname": "LightningAttackPower",
            "tooltip": "Absolute lightning attack power of attack."
        },
        "atkStam": {
            "nickname": "StaminaAttackPower",
            "tooltip": "Absolute stamina attack power of attack."
        },
        "guardAtkRate": {
            "nickname": "GuardAttackPower",
            "tooltip": "Absolute guard attack power of attack.",
            "default": 100
        },
        "guardBreakRate": {
            "nickname": "GuardBreakPower",
            "tooltip": "Absolute guard breaking power of attack."
        },
        "atkSuperArmor": {
            "nickname": "PoiseAttackPower",
            "tooltip": "Absolute poise attack power of attack."
        },
        "atkThrowEscape": {
            "nickname": "AttackPowerDuringThrows",
            "tooltip": "Absolute attack power of attack. Never used."
        },
        "atkObj": {
            "nickname": "ObjectDamage",
            "tooltip": "Amount of damage dealt to objects by this attack."
        },
        "guardStaminaCutRate": {
            "nickname": "GuardStaminaPercentage",
            "tooltip": "Correction applied to the stamina required to block this attack (I presume). Never used."
        },
        "guardRate": {
            "nickname": "GuardPercentage",
            "tooltip": "Percentage correction made to the guarding ability of the attack, as set in weapon parameters or NPC parameters. Only used to halve the guarding ability of parries (-50)."
        },
        "throwTypeId": {
            "nickname": "ThrowID",
            "tooltip": "Throw to trigger when attack hits. For some reason, throws are triggered using this ID, which is a field within each Throw table entry rather than the ID of the Throw table entry itself."
        },
        "hit0_hitType": {
            "nickname": "Hitbox0HitType",
            "tooltip": "Type of hit applied by hitbox (slot 0). Always zero, except for some whip attacks."
        },
        "hit1_hitType": {
            "nickname": "Hitbox1HitType",
            "tooltip": "Type of hit applied by hitbox (slot 1). Always zero, except for some whip attacks."
        },
        "hit2_hitType": {
            "nickname": "Hitbox2HitType",
            "tooltip": "Type of hit applied by hitbox (slot 2). Always zero, except for some whip attacks."
        },
        "hit3_hitType": {
            "nickname": "Hitbox3HitType",
            "tooltip": "Type of hit applied by hitbox (slot 3). Always zero, except for some whip attacks."
        },
        "hti0_Priority": {
            "nickname": "Hitbox0Priority",
            "tooltip": "Priority of hitbox (slot 0). If two hits occur simultaneously, only the highest priority hit occurs. Never used."
        },
        "hti1_Priority": {
            "nickname": "Hitbox1Priority",
            "tooltip": "Priority of hitbox (slot 1). If two hits occur simultaneously, only the highest priority hit occurs. Never used."
        },
        "hti2_Priority": {
            "nickname": "Hitbox2Priority",
            "tooltip": "Priority of hitbox (slot 2). If two hits occur simultaneously, only the highest priority hit occurs. Never used."
        },
        "hti3_Priority": {
            "nickname": "Hitbox3Priority",
            "tooltip": "Priority of hitbox (slot 3). If two hits occur simultaneously, only the highest priority hit occurs. Never used."
        },
        "dmgLevel": {
            "nickname": "ImpactLevel",
            "tooltip": "Impact level of attack, which determines how the target reacts to it (e.g. knocked backward, launched into the air, etc.). Certain special effects on the target (e.g. Iron Flesh) may re-map this impact level to a different one."
        },
        "mapHitType": {
            "nickname": "MapHitType",
            "tooltip": "Determines how this attack interacts with the map."
        },
        "guardCutCancelRate": {
            "nickname": "IgnoreGuardPercentage",
            "tooltip": "Percentage (from -100 to 100) of target's current guard rate to ignore. A value of 100 will ignore guarding completely, and a value of -100 will double their guarding effectiveness. Never used, in favor of the simple 'IgnoreGuard' boolean field."
        },
        "atkAttribute": {
            "nickname": "AttackAttribute",
            "tooltip": "Type of physical damage done by attack."
        },
        "spAttribute": {
            "nickname": "ElementAttribute",
            "tooltip": "Type of elemental damage done by attack. (Attacks can apply any combination of damage types, but this value will determine what visual effects the attack generates, etc.)"
        },
        "atkType": {
            "nickname": "VisualSoundEffectsOnAttack",
            "tooltip": "Determines the sounds and visual effects generated by the attack itself (before hit)."
        },
        "atkMaterial": {
            "nickname": "VisualSoundEffectsOnHit",
            "tooltip": "Determines the sounds and visual effects generated when the attack hits. A value of 255 uses the weapon default."
        },
        "atkSize": {
            "nickname": "AttackSize",
            "tooltip": "Internal description says this determines the size of sounds and visual effects, but it is never used."
        },
        "defMaterial": {
            "nickname": "SoundEffectsWhileBlocking",
            "tooltip": "Determines the sound effects used when guarding. Usually 255 for Player Attacks and 0 (if not a block) or 50 (if blocking) for Non-Player Attacks."
        },
        "defSfxMaterial": {
            "nickname": "VisualEffectsWhileBlocking",
            "tooltip": "Determines the visual effects used when guarding. Usually 255 for Player Attacks and 0 (if not a block) or 50 (if blocking) for Non-Player Attacks."
        },
        "hitSourceType": {
            "nickname": "ModelPointSource",
            "tooltip": "Internal description says 'specify where you get the model point for attack'. Set to 1 for parries, ripostes, and basic body attacks (falling, rolling, etc.), and zero otherwise. Use that pattern."
        },
        "throwFlag": {
            "nickname": "ThrowFlag",
            "tooltip": "Determines how this attack relates to throws: not at all, a throw trigger, or a throw damage parameter."
        },
        "disableGuard:1": {
            "nickname": "IgnoreGuard",
            "tooltip": "If True, this attack cannot be blocked (e.g. throws)."
        },
        "disableStaminaAttack:1": {
            "nickname": "NoStaminaDamage",
            "tooltip": "If True, this attack will deal no stamina damage, regardless of its stamina attack power."
        },
        "disableHitSpEffect:1": {
            "nickname": "NoSpecialEffects",
            "tooltip": "If True, this attack will trigger no special effects on the target. Internal description mentions this is an 'SCE bug countermeasure' (referring to the original Dark Souls demo)."
        },
        "IgnoreNotifyMissSwingForAI:1": {
            "nickname": "NoMissNotificationForAI",
            "tooltip": "If True, the character's AI will not be informed when this attack misses. Enabled for basic body attacks (falling, rolling, ladder punches, etc.) that are generally not considered to be serious attacks."
        },
        "repeatHitSfx:1": {
            "nickname": "RepeatHitSoundEffects",
            "tooltip": "If True, sound effects will supposedly be repeated as long as the attack continuously hits a wall. Never enabled, which is probably a good thing."
        },
        "isArrowAtk:1": {
            "nickname": "IsPhysicalProjectile",
            "tooltip": "Flags if this is the attack damage parameter of a physical projectile (arrow, bolt, or throwing knife)."
        },
        "isGhostAtk:1": {
            "nickname": "IsAttackByGhost",
            "tooltip": "Flags if this is an attack of a ghost, which presumably disables wall collision, etc."
        },
        "isDisableNoDamage:1": {
            "nickname": "IgnoreInvincibilityFrames",
            "tooltip": "If True, this attack will ignore invincibility frames from rolling or backstepping (but not other sources of invincibility such as TAE or events)."
        },
        "pad[1]": {
            "nickname": "_Pad0",
            "tooltip": "Null padding (1 bytes)."
        }
    },
    "BEHAVIOR_PARAM_ST": {
        "variationId": {
            "nickname": "VariationID",
            "tooltip": "TODO"
        },
        "behaviorJudgeId": {
            "nickname": "BehaviorJudgeID",
            "tooltip": "This is the ID specified by TAE events that trigger behaviors."
        },
        "ezStateBehaviorType_old": {
            "nickname": "EzstateBehaviorType",
            "tooltip": "Unused remnant from Demon's Souls."
        },
        "refType": {
            "nickname": "ReferenceType",
            "tooltip": "Is the reference ID below an Attack or Bullet ID?"
        },
        "pad0[2]": {
            "nickname": "_Pad0",
            "tooltip": "Null padding (2 bytes)."
        },
        "refId": {
            "nickname": "ReferenceID",
            "tooltip": "TODO",
            "dynamic_callback": "BehaviorReference()"
        },
        "sfxVariationId": {
            "nickname": "VFXVariationID",
            "tooltip": "Visual effect ID.",
            "default": -1
        },
        "stamina": {
            "nickname": "StaminaCost",
            "tooltip": "Stamina cost of behavior."
        },
        "mp": {
            "nickname": "DurabilityCost",
            "tooltip": "Weapon/shield durability cost of behavior."
        },
        "category": {
            "nickname": "Category",
            "tooltip": "Determines compatibility with special effects that affect certain types of attacks. Set to 'Basic' for thrown goods and 'No Category' otherwise."
        },
        "heroPoint": {
            "nickname": "HumanityCost",
            "tooltip": "Humanity cost of behavior. Never used."
        },
        "pad1[2]": {
            "nickname": "_Pad1",
            "tooltip": "Null padding (2 bytes)."
        }
    },
    "BULLET_PARAM_ST": {
        "atkId_Bullet": {
            "nickname": "BulletAttack",
            "tooltip": "Attack parameters for bullet impact. Only certain fields in the attack parameter are used. Could be directed to either PlayerAttacks table or NonPlayerAttacks table, depending on the bullet's owner. Set to 0 if bullet has no attack data (no damage).",
            "default": 0,
            "game_type": "AttackParam"
        },
        "sfxId_Bullet": {
            "nickname": "ProjectileVFX",
            "tooltip": "Visual effect ID for bullet projectile.",
            "game_type": "VisualEffect"
        },
        "sfxId_Hit": {
            "nickname": "ImpactVFX",
            "tooltip": "Visual effect ID for bullet impact.",
            "game_type": "VisualEffect"
        },
        "sfxId_Flick": {
            "nickname": "FlickVFX",
            "tooltip": "Visual effect ID for when bullet is blocked (I think). Used predominantly for arrows and throwing knives.",
            "game_type": "VisualEffect"
        },
        "life": {
            "nickname": "LifeTime",
            "tooltip": "Maximum time before bullet will disappear on its own. -1 means it will last indefinitely."
        },
        "dist": {
            "nickname": "AttenuationDistance",
            "tooltip": "Distance at which attenuation of the projectile begins."
        },
        "shootInterval": {
            "nickname": "LaunchInterval",
            "tooltip": "Time between emitted bullets. Does nothing for bullets that only shoot once and is generally left at zero for those bullets."
        },
        "gravityInRange": {
            "nickname": "GravityBeforeAttenuation",
            "tooltip": "Downward acceleration of bullet. Rarely used."
        },
        "gravityOutRange": {
            "nickname": "GravityAfterAttenuation",
            "tooltip": "Downward acceleration of bullet after it passes the attenuation distance."
        },
        "hormingStopRange": {
            "nickname": "ClosestHomingDistance",
            "tooltip": "Bullet will stop homing if it is within this distance of its homing target. Use this to prevent homing bullets from being too oppressive."
        },
        "initVellocity": {
            "nickname": "InitialSpeed",
            "tooltip": "Initial speed of bullet."
        },
        "accelInRange": {
            "nickname": "AccelerationBeforeAttenuation",
            "tooltip": "Forward acceleration acting on bullet before it reaches the attenuation distance. Negative values will slow the bullet down."
        },
        "accelOutRange": {
            "nickname": "AccelerationAfterAttenuation",
            "tooltip": "Forward acceleration acting on bullet after it passes the attenuation distance. Negative values will slow the bullet down."
        },
        "maxVellocity": {
            "nickname": "MaxSpeed",
            "tooltip": "Maximum speed of bullet, regardless of acceleration."
        },
        "minVellocity": {
            "nickname": "MinSpeed",
            "tooltip": "Minimum speed of bullet, regardless of acceleration."
        },
        "accelTime": {
            "nickname": "AccelerationTime",
            "tooltip": "Time that acceleration is active after bullet creation."
        },
        "homingBeginDist": {
            "nickname": "HomingStartDistance",
            "tooltip": "Distance from owner at which the bullet starts homing in on targets."
        },
        "hitRadius": {
            "nickname": "InitialHitRadius",
            "tooltip": "Initial hit radius of bullet projectile."
        },
        "hitRadiusMax": {
            "nickname": "FinalHitRadius",
            "tooltip": "Final hit radius of bullet projectile. Set to -1 if radius does not change, which is always coupled with a value of 0 for RadiusIncreaseDuration."
        },
        "spreadTime": {
            "nickname": "RadiusIncreaseTime",
            "tooltip": "Time taken by bullet to transition from initial to final hit radius. Value of 0 are always coupled with values of -1 for RadiusIncreaseDuration. I'm not sure if this can actually decrease the hit radius if the final value is less than the initial value."
        },
        "expDelay": {
            "nickname": "ExpDelay",
            "tooltip": "Delay between impact and 'explosion' (not sure if that refers to the visual effect and/or hitbox). Never used (always zero)."
        },
        "hormingOffsetRange": {
            "nickname": "HomingOffsetRange",
            "tooltip": "Internal description: 'When shooting, aim to shift each component of XYZ by this amount.' Nonzero only for Hydra blasts and Vagrant attacks."
        },
        "dmgHitRecordLifeTime": {
            "nickname": "HitboxLifeTime",
            "tooltip": "Duration of bullet impact hitbox. A value of zero means it is disabled immediately after first impact."
        },
        "externalForce": {
            "nickname": "ExternalForce",
            "tooltip": "Unknown. Used only for Gargoyle fire breath and Undead Dragon poison breath."
        },
        "spEffectIDForShooter": {
            "nickname": "OwnerSpecialEffect",
            "tooltip": "Special effect applied to owner when bullet is created. (Unclear if it is applied repeatedly by repeating bullets.)",
            "default": 0,
            "game_type": "SpecialEffectParam"
        },
        "autoSearchNPCThinkID": {
            "nickname": "BulletAI",
            "tooltip": "AI parameter ID for triggered floating bullets. Only used by Homing [Crystal] Soulmass (10000) and Pursuers (10001) in the vanilla game.",
            "game_type": "AIParam"
        },
        "HitBulletID": {
            "nickname": "BulletOnHit",
            "tooltip": "Bullet emitted on impact of this bullet. Used often for 'throw'/'landing' or 'parent'/'child' combinations, like a thrown Firebomb (bullet 110) triggering a fiery explosion (bullet 111). These can be chained together indefinitely (see White Dragon Breath, bullet 11500).",
            "game_type": "BulletParam"
        },
        "spEffectId0": {
            "nickname": "HitSpecialEffect0",
            "tooltip": "Special effect applied to target hit by bullet. (Slot 0)",
            "default": 0,
            "game_type": "SpecialEffectParam"
        },
        "spEffectId1": {
            "nickname": "HitSpecialEffect1",
            "tooltip": "Special effect applied to target hit by bullet. (Slot 1)",
            "default": 0,
            "game_type": "SpecialEffectParam"
        },
        "spEffectId2": {
            "nickname": "HitSpecialEffect2",
            "tooltip": "Special effect applied to target hit by bullet. (Slot 2)",
            "default": 0,
            "game_type": "SpecialEffectParam"
        },
        "spEffectId3": {
            "nickname": "HitSpecialEffect3",
            "tooltip": "Special effect applied to target hit by bullet. (Slot 3)",
            "default": 0,
            "game_type": "SpecialEffectParam"
        },
        "spEffectId4": {
            "nickname": "HitSpecialEffect4",
            "tooltip": "Special effect applied to target hit by bullet. (Slot 4)",
            "default": 0,
            "game_type": "SpecialEffectParam"
        },
        "numShoot": {
            "nickname": "BulletCount",
            "tooltip": "Number of bullets emitted at once.",
            "default": 1
        },
        "homingAngle": {
            "nickname": "HomingAnglePerSecond",
            "tooltip": "Turning angle of homing bullet per second. Higher values are better for homing."
        },
        "shootAngle": {
            "nickname": "AzimuthAngleStart",
            "tooltip": "Angle of first bullet in degrees around the vertical axis, relative to the forward direction."
        },
        "shootAngleInterval": {
            "nickname": "AzimuthAngleInterval",
            "tooltip": "Angle from one bullet to the next around the vertical axis, beginning at the azimuth angle start."
        },
        "shootAngleXInterval": {
            "nickname": "ElevationAngleInterval",
            "tooltip": "Angle between bullets in elevation."
        },
        "damageDamp": {
            "nickname": "PhysicalDamageDamp",
            "tooltip": "Percentage reduction in physical damage per second."
        },
        "spelDamageDamp": {
            "nickname": "MagicDamageDamp",
            "tooltip": "Percentage reduction in magic damage per second."
        },
        "fireDamageDamp": {
            "nickname": "FireDamageDamp",
            "tooltip": "Percentage reduction in fire damage per second."
        },
        "thunderDamageDamp": {
            "nickname": "LightningDamageDamp",
            "tooltip": "Percentage reduction in lightning damage per second."
        },
        "staminaDamp": {
            "nickname": "StaminaDamp",
            "tooltip": "Percentage reduction in stamina damage per second."
        },
        "knockbackDamp": {
            "nickname": "KnockbackDamp",
            "tooltip": "Percentage reduction in knockback power per second."
        },
        "shootAngleXZ": {
            "nickname": "FirstBulletElevationAngle",
            "tooltip": "Angle of elevation of first bullet. Positive values will angle the bullets up (e.g. Quelaag's fireballs) and negative values will angle the bullets down (e.g. most breath attacks)."
        },
        "lockShootLimitAng": {
            "nickname": "LockShootLimitAngle",
            "tooltip": "Unknown, but likely important. Set to 30 for most basic projectile magic."
        },
        "isPenetrate": {
            "nickname": "PiercesTargets",
            "tooltip": "Bullet will go through objects, players, and NPCs."
        },
        "prevVelocityDirRate": {
            "nickname": "PreviousDirectionRatio",
            "tooltip": "Internal description: 'Ratio of adding the previous moving direction to the current direction when a sliding bullet hits the wall.' Like ExternalForce, this is used only for Gargoyle and Undead Dragon breath (100) and is zero for everything else."
        },
        "atkAttribute": {
            "nickname": "AttackAttribute",
            "tooltip": "Attack type. Almost always 4 ('other'), but sometimes 3 (knives/arrows/bolts)."
        },
        "spAttribute": {
            "nickname": "ElementAttribute",
            "tooltip": "Element attached to bullet hit."
        },
        "Material_AttackType": {
            "nickname": "MaterialAttackType",
            "tooltip": "Determines visual effects of bullet hit."
        },
        "Material_AttackMaterial": {
            "nickname": "EffectsOnHit",
            "tooltip": "Sound and visual effects on hit."
        },
        "Material_Size": {
            "nickname": "MaterialSize",
            "tooltip": "'Size' of attack. Never used.'"
        },
        "launchConditionType": {
            "nickname": "LaunchConditionType",
            "tooltip": "Condition for determing if a new bullet will be generated when this bullet lands or expires."
        },
        "FollowType:3": {
            "nickname": "FollowType",
            "tooltip": "Follow type."
        },
        "EmittePosType:3": {
            "nickname": "OriginType",
            "tooltip": "Origin type of bullet. Usually comes from model points ('damipoly')."
        },
        "isAttackSFX:1": {
            "nickname": "RemainAttachedToTarget",
            "tooltip": "Set whether bullets (e.g. arrows) stay stuck upon impact."
        },
        "isEndlessHit:1": {
            "nickname": "IsEndlessHit",
            "tooltip": "Bullet hitbox is continuous (I think). Only used for corrosion cloud in vanilla."
        },
        "isPenetrateMap:1": {
            "nickname": "IsMapPiercing",
            "tooltip": "Bullet will pierce the map (e.g. Stray Demon blast)."
        },
        "isHitBothTeam:1": {
            "nickname": "HitsBothTeams",
            "tooltip": "Bullet can hit any character."
        },
        "isUseSharedHitList:1": {
            "nickname": "SharedHitCheck",
            "tooltip": "Repeating bullets share the amount of times they have hit a target (usually so the target is only hit once by any of those repeating bullets)."
        },
        "isUseMultiDmyPolyIfPlace:1": {
            "nickname": "UsesMultipleModelPoints",
            "tooltip": "Set to True if the same model point ('damipoly') is used multiple times when spawning the bullet."
        },
        "attachEffectType:2": {
            "nickname": "AttachEffectType",
            "tooltip": "Mostly 0, but sometimes 1 (Dragon Head breath, Grant AoE, Force miracles)."
        },
        "isHitForceMagic:1": {
            "nickname": "CanBeDeflectedByMagic",
            "tooltip": "If True, this bullet will impact appropriate Force-type magic (e.g. arrows, bolts, knives)."
        },
        "isIgnoreSfxIfHitWater:1": {
            "nickname": "IgnoreVFXOnWaterHit",
            "tooltip": "If True, hit VFX are not produced if the bullet impacts water."
        },
        "isIgnoreMoveStateIfHitWater:1": {
            "nickname": "IgnoreStateTransitionOnWaterHit",
            "tooltip": "Unclear effect, but True for knives/arrows/bolts and False otherwise."
        },
        "isHitDarkForceMagic:1": {
            "nickname": "CanBeDeflectedBySilverPendant",
            "tooltip": "If True, this bullet will impact the Silver Pendant shield effect. True only for dark sorceries."
        },
        "pad[3]": {
            "nickname": "_Pad0",
            "tooltip": "Null padding (3 bytes)."
        }
    },
    "CACL_CORRECT_GRAPH_ST": {
        "stageMaxVal0": {
            "nickname": "StageMaxIntercept0",
            "tooltip": "Y-intercept in equation of 'stage max' line 0."
        },
        "stageMaxVal1": {
            "nickname": "StageMaxIntercept1",
            "tooltip": "Y-intercept in equation of 'stage max' line 1."
        },
        "stageMaxVal2": {
            "nickname": "StageMaxIntercept2",
            "tooltip": "Y-intercept in equation of 'stage max' line 2."
        },
        "stageMaxVal3": {
            "nickname": "StageMaxIntercept3",
            "tooltip": "Y-intercept in equation of 'stage max' line 3."
        },
        "stageMaxVal4": {
            "nickname": "StageMaxIntercept4",
            "tooltip": "Y-intercept in equation of 'stage max' line 4."
        },
        "stageMaxGrowVal0": {
            "nickname": "StageMaxSlope0",
            "tooltip": "Slope in equation of 'stage max' line 0."
        },
        "stageMaxGrowVal1": {
            "nickname": "StageMaxSlope1",
            "tooltip": "Slope in equation of 'stage max' line 1."
        },
        "stageMaxGrowVal2": {
            "nickname": "StageMaxSlope2",
            "tooltip": "Slope in equation of 'stage max' line 2."
        },
        "stageMaxGrowVal3": {
            "nickname": "StageMaxSlope3",
            "tooltip": "Slope in equation of 'stage max' line 3."
        },
        "stageMaxGrowVal4": {
            "nickname": "StageMaxSlope4",
            "tooltip": "Slope in equation of 'stage max' line 4."
        },
        "adjPt_maxGrowVal0": {
            "nickname": "AdjustmentMaxSlope0",
            "tooltip": "Adjustment factor for slope in equation of 'stage max' line 0."
        },
        "adjPt_maxGrowVal1": {
            "nickname": "AdjustmentMaxSlope1",
            "tooltip": "Adjustment factor for slope in equation of 'stage max' line 1."
        },
        "adjPt_maxGrowVal2": {
            "nickname": "AdjustmentMaxSlope2",
            "tooltip": "Adjustment factor for slope in equation of 'stage max' line 2."
        },
        "adjPt_maxGrowVal3": {
            "nickname": "AdjustmentMaxSlope3",
            "tooltip": "Adjustment factor for slope in equation of 'stage max' line 3."
        },
        "adjPt_maxGrowVal4": {
            "nickname": "AdjustmentMaxSlope4",
            "tooltip": "Adjustment factor for slope in equation of 'stage max' line 4."
        },
        "init_inclination_soul": {
            "nickname": "InitialLevellingCostSlope",
            "tooltip": "Initial slope of equation determining levelling costs (alpha 1)."
        },
        "adjustment_value": {
            "nickname": "LevellingCostEarlyAdjustment",
            "tooltip": "'Early' adjustment value of equation determining levelling costs (alpha 2)."
        },
        "boundry_inclination_soul": {
            "nickname": "LateLevellingCostSlope",
            "tooltip": "Slope of equation determining required levelling souls after 'LateLevellingCostThreshold' value (alpha 3)."
        },
        "boundry_value": {
            "nickname": "LateLevellingCostThreshold",
            "tooltip": "Threshold at which 'LateLevellingCostSlope' takes over for levelling (t)."
        },
        "pad[4]": {
            "nickname": "_Pad0",
            "tooltip": "Null padding (4 bytes)."
        }
    },
    "CHARACTER_INIT_PARAM": {
        "baseRec_mp": {
            "nickname": "BaseRecMP",
            "tooltip": "Unknown."
        },
        "baseRec_sp": {
            "nickname": "BaseRecSP",
            "tooltip": "Unknown."
        },
        "red_Falldam": {
            "nickname": "RedFallDamage",
            "tooltip": "Unknown."
        },
        "soul": {
            "nickname": "SoulCount",
            "tooltip": "Starting soul count of character."
        },
        "equip_Wep_Right": {
            "nickname": "RightHandWeapon1",
            "tooltip": "First (default) weapon/shield equipped in right hand.",
            "game_type": "WeaponParam"
        },
        "equip_Subwep_Right": {
            "nickname": "RightHandWeapon2",
            "tooltip": "Second weapon/shield equipped in right hand.",
            "game_type": "WeaponParam"
        },
        "equip_Wep_Left": {
            "nickname": "LeftHandWeapon1",
            "tooltip": "First (default) weapon/shield equipped in left hand.",
            "game_type": "WeaponParam"
        },
        "equip_Subwep_Left": {
            "nickname": "LeftHandWeapon2",
            "tooltip": "Second weapon/shield equipped in left hand.",
            "game_type": "WeaponParam"
        },
        "equip_Helm": {
            "nickname": "HeadArmor",
            "tooltip": "Armor equipped to head.",
            "game_type": "ArmorParam"
        },
        "equip_Armer": {
            "nickname": "BodyArmor",
            "tooltip": "Armor equipped to body.",
            "game_type": "ArmorParam"
        },
        "equip_Gaunt": {
            "nickname": "HandsArmor",
            "tooltip": "Armor equipped to hands.",
            "game_type": "ArmorParam"
        },
        "equip_Leg": {
            "nickname": "LegsArmor",
            "tooltip": "Armor equipped to legs.",
            "game_type": "ArmorParam"
        },
        "equip_Arrow": {
            "nickname": "ArrowSlot1",
            "tooltip": "Arrows equipped in slot 1.",
            "game_type": "WeaponParam"
        },
        "equip_Bolt": {
            "nickname": "BoltSlot1",
            "tooltip": "Bolts equipped in slot 1.",
            "game_type": "WeaponParam"
        },
        "equip_SubArrow": {
            "nickname": "ArrowSlot2",
            "tooltip": "Arrows equipped in slot 2.",
            "game_type": "WeaponParam"
        },
        "equip_SubBolt": {
            "nickname": "BoltSlot2",
            "tooltip": "Bolts equipped in slot 2.",
            "game_type": "WeaponParam"
        },
        "equip_Accessory01": {
            "nickname": "RingSlot1",
            "tooltip": "First ring equipped. Note that up to five rings can be equipped to human NPCs.",
            "game_type": "AccessoryParam"
        },
        "equip_Accessory02": {
            "nickname": "RingSlot2",
            "tooltip": "Second ring equipped. Note that up to five rings can be equipped to human NPCs.",
            "game_type": "AccessoryParam"
        },
        "equip_Accessory03": {
            "nickname": "RingSlot3",
            "tooltip": "Third ring equipped. Note that up to five rings can be equipped to human NPCs.",
            "game_type": "AccessoryParam"
        },
        "equip_Accessory04": {
            "nickname": "RingSlot4",
            "tooltip": "Fourth ring equipped. Note that up to five rings can be equipped to human NPCs.",
            "game_type": "AccessoryParam"
        },
        "equip_Accessory05": {
            "nickname": "RingSlot5",
            "tooltip": "Fifth ring equipped. Note that up to five rings can be equipped to human NPCs.",
            "game_type": "AccessoryParam"
        },
        "equip_Skill_01": {
            "nickname": "SkillSlot1",
            "tooltip": "TODO"
        },
        "equip_Skill_02": {
            "nickname": "SkillSlot2",
            "tooltip": "TODO"
        },
        "equip_Skill_03": {
            "nickname": "SkillSlot3",
            "tooltip": "TODO"
        },
        "equip_Spell_01": {
            "nickname": "SpellSlot1",
            "tooltip": "First spell equipped.",
            "game_type": "SpellParam"
        },
        "equip_Spell_02": {
            "nickname": "SpellSlot2",
            "tooltip": "Second spell equipped.",
            "game_type": "SpellParam"
        },
        "equip_Spell_03": {
            "nickname": "SpellSlot3",
            "tooltip": "Third spell equipped.",
            "game_type": "SpellParam"
        },
        "equip_Spell_04": {
            "nickname": "SpellSlot4",
            "tooltip": "Fourth spell equipped.",
            "game_type": "SpellParam"
        },
        "equip_Spell_05": {
            "nickname": "SpellSlot5",
            "tooltip": "Fifth spell equipped.",
            "game_type": "SpellParam"
        },
        "equip_Spell_06": {
            "nickname": "SpellSlot6",
            "tooltip": "Sixth spell equipped.",
            "game_type": "SpellParam"
        },
        "equip_Spell_07": {
            "nickname": "SpellSlot7",
            "tooltip": "Seventh spell equipped.",
            "game_type": "SpellParam"
        },
        "item_01": {
            "nickname": "GoodSlot1",
            "tooltip": "Good (item) equipped in slot 1.",
            "game_type": "GoodParam"
        },
        "item_02": {
            "nickname": "GoodSlot2",
            "tooltip": "Good (item) equipped in slot 2.",
            "game_type": "GoodParam"
        },
        "item_03": {
            "nickname": "GoodSlot3",
            "tooltip": "Good (item) equipped in slot 3.",
            "game_type": "GoodParam"
        },
        "item_04": {
            "nickname": "GoodSlot4",
            "tooltip": "Good (item) equipped in slot 4.",
            "game_type": "GoodParam"
        },
        "item_05": {
            "nickname": "GoodSlot5",
            "tooltip": "Good (item) equipped in slot 5.",
            "game_type": "GoodParam"
        },
        "item_06": {
            "nickname": "GoodSlot6",
            "tooltip": "Good (item) equipped in slot 6.",
            "game_type": "GoodParam"
        },
        "item_07": {
            "nickname": "GoodSlot7",
            "tooltip": "Good (item) equipped in slot 7.",
            "game_type": "GoodParam"
        },
        "item_08": {
            "nickname": "GoodSlot8",
            "tooltip": "Good (item) equipped in slot 8.",
            "game_type": "GoodParam"
        },
        "item_09": {
            "nickname": "GoodSlot9",
            "tooltip": "Good (item) equipped in slot 9.",
            "game_type": "GoodParam"
        },
        "item_10": {
            "nickname": "GoodSlot10",
            "tooltip": "Good (item) equipped in slot 10.",
            "game_type": "GoodParam"
        },
        "npcPlayerFaceGenId": {
            "nickname": "FaceID",
            "tooltip": "Face parameter ID (NPCs only).",
            "game_type": "FaceGenParam"
        },
        "npcPlayerThinkId": {
            "nickname": "DefaultAI",
            "tooltip": "Default AI (NPCs only).",
            "game_type": "AIParam"
        },
        "baseHp": {
            "nickname": "BaseMaxHP",
            "tooltip": "Base amount of maximum HP (excluding effects of vitality)."
        },
        "baseMp": {
            "nickname": "BaseMaxMP",
            "tooltip": "Base amount of maximum MP (unused in Dark Souls)."
        },
        "baseSp": {
            "nickname": "BaseMaxStamina",
            "tooltip": "Base maximum stamina (excluding effects of endurance)."
        },
        "arrowNum": {
            "nickname": "ArrowSlot1Count",
            "tooltip": "Count of arrows equipped in slot 1."
        },
        "boltNum": {
            "nickname": "BoltSlot1Count",
            "tooltip": "Count of arrows equipped in slot 2."
        },
        "subArrowNum": {
            "nickname": "ArrowSlot2Count",
            "tooltip": "Count of bolts equipped in slot 1."
        },
        "subBoltNum": {
            "nickname": "BoltSlot2Count",
            "tooltip": "Count of bolts equipped in slot 2."
        },
        "QWC_sb": {
            "nickname": "QWC_SB",
            "tooltip": "Unknown. Likely to be unused world tendency effect."
        },
        "QWC_mw": {
            "nickname": "QWC_MW",
            "tooltip": "Unknown. Likely to be unused world tendency effect."
        },
        "QWC_cd": {
            "nickname": "QWC_CD",
            "tooltip": "Unknown. Likely to be unused world tendency effect."
        },
        "soulLv": {
            "nickname": "Level",
            "tooltip": "Soul level, independent of actual stats. Determines amount of souls rewarded by human NPCs."
        },
        "baseVit": {
            "nickname": "Vitality",
            "tooltip": "Base vitality level. Determines maximum health."
        },
        "baseWil": {
            "nickname": "Attunement",
            "tooltip": "Base attunement level. Determines spell slots and casting speed."
        },
        "baseEnd": {
            "nickname": "Endurance",
            "tooltip": "Base endurance level. Determines maximum stamina and equip load."
        },
        "baseStr": {
            "nickname": "Strength",
            "tooltip": "Base strength level. Affects strength-based weapons and damage."
        },
        "baseDex": {
            "nickname": "Dexterity",
            "tooltip": "Base dexterity level. Affects skill-based weapons and damage."
        },
        "baseMag": {
            "nickname": "Intelligence",
            "tooltip": "Base intelligence level. Affects magic usability and effectiveness."
        },
        "baseFai": {
            "nickname": "Faith",
            "tooltip": "Base faith level. Affects miracle usability and effectiveness."
        },
        "baseLuc": {
            "nickname": "Luck",
            "tooltip": "Base luck level. Improves chances of rare item drops."
        },
        "baseHeroPoint": {
            "nickname": "Humanity",
            "tooltip": "Base 'soft' humanity."
        },
        "baseDurability": {
            "nickname": "Resistance",
            "tooltip": "Base resistance level. Improves resistances to status ailments."
        },
        "itemNum_01": {
            "nickname": "GoodSlot1Count",
            "tooltip": "Count of good equipped in slot 1."
        },
        "itemNum_02": {
            "nickname": "GoodSlot2Count",
            "tooltip": "Count of good equipped in slot 2."
        },
        "itemNum_03": {
            "nickname": "GoodSlot3Count",
            "tooltip": "Count of good equipped in slot 3."
        },
        "itemNum_04": {
            "nickname": "GoodSlot4Count",
            "tooltip": "Count of good equipped in slot 4."
        },
        "itemNum_05": {
            "nickname": "GoodSlot5Count",
            "tooltip": "Count of good equipped in slot 5."
        },
        "itemNum_06": {
            "nickname": "GoodSlot6Count",
            "tooltip": "Count of good equipped in slot 6."
        },
        "itemNum_07": {
            "nickname": "GoodSlot7Count",
            "tooltip": "Count of good equipped in slot 7."
        },
        "itemNum_08": {
            "nickname": "GoodSlot8Count",
            "tooltip": "Count of good equipped in slot 8."
        },
        "itemNum_09": {
            "nickname": "GoodSlot9Count",
            "tooltip": "Count of good equipped in slot 9."
        },
        "itemNum_10": {
            "nickname": "GoodSlot10Count",
            "tooltip": "Count of good equipped in slot 10."
        },
        "bodyScaleHead": {
            "nickname": "HeadScale",
            "tooltip": "Multiplier applied to head size."
        },
        "bodyScaleBreast": {
            "nickname": "ChestScale",
            "tooltip": "Multiplier applied to chest size."
        },
        "bodyScaleAbdomen": {
            "nickname": "AbdomenScale",
            "tooltip": "Multiplier applied to abdomen size."
        },
        "bodyScaleArm": {
            "nickname": "ArmScale",
            "tooltip": "Multiplier applied to arm size."
        },
        "bodyScaleLeg": {
            "nickname": "LegScale",
            "tooltip": "Multiplier applied to leg size."
        },
        "gestureId0": {
            "nickname": "Gesture1",
            "tooltip": "First equipped gesture."
        },
        "gestureId1": {
            "nickname": "Gesture2",
            "tooltip": "Second equipped gesture."
        },
        "gestureId2": {
            "nickname": "Gesture3",
            "tooltip": "Third equipped gesture."
        },
        "gestureId3": {
            "nickname": "Gesture4",
            "tooltip": "Fourth equipped gesture."
        },
        "gestureId4": {
            "nickname": "Gesture5",
            "tooltip": "Fifth equipped gesture."
        },
        "gestureId5": {
            "nickname": "Gesture6",
            "tooltip": "Sixth equipped gesture."
        },
        "gestureId6": {
            "nickname": "Gesture7",
            "tooltip": "Seventh equipped gesture."
        },
        "npcPlayerType": {
            "nickname": "CharacterType",
            "tooltip": "Type of human NPC."
        },
        "npcPlayerDrawType": {
            "nickname": "DrawType",
            "tooltip": "Draw type of human NPC."
        },
        "npcPlayerSex": {
            "nickname": "Gender",
            "tooltip": "Character gender."
        },
        "vowType:4": {
            "nickname": "Covenant",
            "tooltip": "Character covenant."
        },
        "pad:4": {
            "nickname": "_BitPad0",
            "tooltip": "Null padding (4 bits)."
        },
        "pad0[10]": {
            "nickname": "_Pad0",
            "tooltip": "Null padding (10 bytes)."
        }
    },
    "DOF_BANK": {
        "farDofBegin": {
            "nickname": "FarBlurStartDistance",
            "tooltip": "Distance (m) at which far depth of field blur begins."
        },
        "farDofEnd": {
            "nickname": "FarBlurEndDistance",
            "tooltip": "Distance (m) at which far depth of field blur ends (reaches maximum)."
        },
        "farDofMul": {
            "nickname": "FarBlurMagnitude",
            "tooltip": "Amount of far depth of field blur applied between the start and end distances."
        },
        "pad_0[3]": {
            "nickname": "_Pad0",
            "tooltip": "Null padding (3 bytes)."
        },
        "nearDofBegin": {
            "nickname": "NearBlurStartDistance",
            "tooltip": "Distance (m) at which near depth of field blur begins (further away than end distance)."
        },
        "nearDofEnd": {
            "nickname": "NearBlurEndDistance",
            "tooltip": "Distance (m) at which near depth of field blur ends (reaches maximum) (closer than start distance)."
        },
        "nearDofMul": {
            "nickname": "NearBlurMagnitude",
            "tooltip": "Amount of near depth of field blur applied between start and end distances."
        },
        "pad_1[3]": {
            "nickname": "_Pad1",
            "tooltip": "Null padding (3 bytes)."
        },
        "dispersionSq": {
            "nickname": "BlurSquaredDispersion",
            "tooltip": "Squared dispersion of depth of field blur (greater value means more blur)."
        }
    },
    "ENV_LIGHT_TEX_BANK": {
        "isUse": {
            "nickname": "isUse",
            "tooltip": "TOOLTIP-TODO"
        },
        "autoUpdate": {
            "nickname": "autoUpdate",
            "tooltip": "TOOLTIP-TODO"
        },
        "pad_0[12]": {
            "nickname": "_Pad0",
            "tooltip": "Null padding (12 bytes)."
        },
        "invMulCol": {
            "nickname": "invMulCol",
            "tooltip": "TOOLTIP-TODO"
        },
        "resNameId_Dif0": {
            "nickname": "resNameId_Dif0",
            "tooltip": "TOOLTIP-TODO"
        },
        "invMulCol_Dif0": {
            "nickname": "invMulCol_Dif0",
            "tooltip": "TOOLTIP-TODO"
        },
        "sepcPow_Dif0": {
            "nickname": "sepcPow_Dif0",
            "tooltip": "TOOLTIP-TODO"
        },
        "pad_Dif0[8]": {
            "nickname": "_Pad1",
            "tooltip": "Null padding (8 bytes)."
        },
        "resNameId_Spc0": {
            "nickname": "resNameId_Spc0",
            "tooltip": "TOOLTIP-TODO"
        },
        "invMulCol_Spc0": {
            "nickname": "invMulCol_Spc0",
            "tooltip": "TOOLTIP-TODO"
        },
        "sepcPow_Spc0": {
            "nickname": "sepcPow_Spc0",
            "tooltip": "TOOLTIP-TODO"
        },
        "pad_Spc0[8]": {
            "nickname": "_Pad2",
            "tooltip": "Null padding (8 bytes)."
        },
        "resNameId_Spc1": {
            "nickname": "resNameId_Spc1",
            "tooltip": "TOOLTIP-TODO"
        },
        "invMulCol_Spc1": {
            "nickname": "invMulCol_Spc1",
            "tooltip": "TOOLTIP-TODO"
        },
        "sepcPow_Spc1": {
            "nickname": "sepcPow_Spc1",
            "tooltip": "TOOLTIP-TODO"
        },
        "pad_Spc1[8]": {
            "nickname": "_Pad3",
            "tooltip": "Null padding (8 bytes)."
        },
        "resNameId_Spc2": {
            "nickname": "resNameId_Spc2",
            "tooltip": "TOOLTIP-TODO"
        },
        "invMulCol_Spc2": {
            "nickname": "invMulCol_Spc2",
            "tooltip": "TOOLTIP-TODO"
        },
        "sepcPow_Spc2": {
            "nickname": "sepcPow_Spc2",
            "tooltip": "TOOLTIP-TODO"
        },
        "pad_Spc2[8]": {
            "nickname": "_Pad4",
            "tooltip": "Null padding (8 bytes)."
        },
        "resNameId_Spc3": {
            "nickname": "resNameId_Spc3",
            "tooltip": "TOOLTIP-TODO"
        },
        "invMulCol_Spc3": {
            "nickname": "invMulCol_Spc3",
            "tooltip": "TOOLTIP-TODO"
        },
        "sepcPow_Spc3": {
            "nickname": "sepcPow_Spc3",
            "tooltip": "TOOLTIP-TODO"
        },
        "pad_Spc3[8]": {
            "nickname": "_Pad5",
            "tooltip": "Null padding (8 bytes)."
        },
        "degRotX_00": {
            "nickname": "degRotX_00",
            "tooltip": "TOOLTIP-TODO"
        },
        "degRotY_00": {
            "nickname": "degRotY_00",
            "tooltip": "TOOLTIP-TODO"
        },
        "colR_00": {
            "nickname": "colR_00",
            "tooltip": "TOOLTIP-TODO"
        },
        "colG_00": {
            "nickname": "colG_00",
            "tooltip": "TOOLTIP-TODO"
        },
        "colB_00": {
            "nickname": "colB_00",
            "tooltip": "TOOLTIP-TODO"
        },
        "colA_00": {
            "nickname": "colA_00",
            "tooltip": "TOOLTIP-TODO"
        },
        "pad_00[4]": {
            "nickname": "_Pad6",
            "tooltip": "Null padding (4 bytes)."
        },
        "degRotX_01": {
            "nickname": "degRotX_01",
            "tooltip": "TOOLTIP-TODO"
        },
        "degRotY_01": {
            "nickname": "degRotY_01",
            "tooltip": "TOOLTIP-TODO"
        },
        "colR_01": {
            "nickname": "colR_01",
            "tooltip": "TOOLTIP-TODO"
        },
        "colG_01": {
            "nickname": "colG_01",
            "tooltip": "TOOLTIP-TODO"
        },
        "colB_01": {
            "nickname": "colB_01",
            "tooltip": "TOOLTIP-TODO"
        },
        "colA_01": {
            "nickname": "colA_01",
            "tooltip": "TOOLTIP-TODO"
        },
        "pad_01[4]": {
            "nickname": "_Pad7",
            "tooltip": "Null padding (4 bytes)."
        },
        "degRotX_02": {
            "nickname": "degRotX_02",
            "tooltip": "TOOLTIP-TODO"
        },
        "degRotY_02": {
            "nickname": "degRotY_02",
            "tooltip": "TOOLTIP-TODO"
        },
        "colR_02": {
            "nickname": "colR_02",
            "tooltip": "TOOLTIP-TODO"
        },
        "colG_02": {
            "nickname": "colG_02",
            "tooltip": "TOOLTIP-TODO"
        },
        "colB_02": {
            "nickname": "colB_02",
            "tooltip": "TOOLTIP-TODO"
        },
        "colA_02": {
            "nickname": "colA_02",
            "tooltip": "TOOLTIP-TODO"
        },
        "pad_02[4]": {
            "nickname": "_Pad8",
            "tooltip": "Null padding (4 bytes)."
        },
        "degRotX_03": {
            "nickname": "degRotX_03",
            "tooltip": "TOOLTIP-TODO"
        },
        "degRotY_03": {
            "nickname": "degRotY_03",
            "tooltip": "TOOLTIP-TODO"
        },
        "colR_03": {
            "nickname": "colR_03",
            "tooltip": "TOOLTIP-TODO"
        },
        "colG_03": {
            "nickname": "colG_03",
            "tooltip": "TOOLTIP-TODO"
        },
        "colB_03": {
            "nickname": "colB_03",
            "tooltip": "TOOLTIP-TODO"
        },
        "colA_03": {
            "nickname": "colA_03",
            "tooltip": "TOOLTIP-TODO"
        },
        "pad_03[4]": {
            "nickname": "_Pad9",
            "tooltip": "Null padding (4 bytes)."
        },
        "degRotX_04": {
            "nickname": "degRotX_04",
            "tooltip": "TOOLTIP-TODO"
        },
        "degRotY_04": {
            "nickname": "degRotY_04",
            "tooltip": "TOOLTIP-TODO"
        },
        "colR_04": {
            "nickname": "colR_04",
            "tooltip": "TOOLTIP-TODO"
        },
        "colG_04": {
            "nickname": "colG_04",
            "tooltip": "TOOLTIP-TODO"
        },
        "colB_04": {
            "nickname": "colB_04",
            "tooltip": "TOOLTIP-TODO"
        },
        "colA_04": {
            "nickname": "colA_04",
            "tooltip": "TOOLTIP-TODO"
        },
        "pad_04[4]": {
            "nickname": "_Pad10",
            "tooltip": "Null padding (4 bytes)."
        },
        "degRotX_05": {
            "nickname": "degRotX_05",
            "tooltip": "TOOLTIP-TODO"
        },
        "degRotY_05": {
            "nickname": "degRotY_05",
            "tooltip": "TOOLTIP-TODO"
        },
        "colR_05": {
            "nickname": "colR_05",
            "tooltip": "TOOLTIP-TODO"
        },
        "colG_05": {
            "nickname": "colG_05",
            "tooltip": "TOOLTIP-TODO"
        },
        "colB_05": {
            "nickname": "colB_05",
            "tooltip": "TOOLTIP-TODO"
        },
        "colA_05": {
            "nickname": "colA_05",
            "tooltip": "TOOLTIP-TODO"
        },
        "pad_05[4]": {
            "nickname": "_Pad11",
            "tooltip": "Null padding (4 bytes)."
        },
        "degRotX_06": {
            "nickname": "degRotX_06",
            "tooltip": "TOOLTIP-TODO"
        },
        "degRotY_06": {
            "nickname": "degRotY_06",
            "tooltip": "TOOLTIP-TODO"
        },
        "colR_06": {
            "nickname": "colR_06",
            "tooltip": "TOOLTIP-TODO"
        },
        "colG_06": {
            "nickname": "colG_06",
            "tooltip": "TOOLTIP-TODO"
        },
        "colB_06": {
            "nickname": "colB_06",
            "tooltip": "TOOLTIP-TODO"
        },
        "colA_06": {
            "nickname": "colA_06",
            "tooltip": "TOOLTIP-TODO"
        },
        "pad_06[4]": {
            "nickname": "_Pad12",
            "tooltip": "Null padding (4 bytes)."
        },
        "degRotX_07": {
            "nickname": "degRotX_07",
            "tooltip": "TOOLTIP-TODO"
        },
        "degRotY_07": {
            "nickname": "degRotY_07",
            "tooltip": "TOOLTIP-TODO"
        },
        "colR_07": {
            "nickname": "colR_07",
            "tooltip": "TOOLTIP-TODO"
        },
        "colG_07": {
            "nickname": "colG_07",
            "tooltip": "TOOLTIP-TODO"
        },
        "colB_07": {
            "nickname": "colB_07",
            "tooltip": "TOOLTIP-TODO"
        },
        "colA_07": {
            "nickname": "colA_07",
            "tooltip": "TOOLTIP-TODO"
        },
        "pad_07[4]": {
            "nickname": "_Pad13",
            "tooltip": "Null padding (4 bytes)."
        },
        "degRotX_08": {
            "nickname": "degRotX_08",
            "tooltip": "TOOLTIP-TODO"
        },
        "degRotY_08": {
            "nickname": "degRotY_08",
            "tooltip": "TOOLTIP-TODO"
        },
        "colR_08": {
            "nickname": "colR_08",
            "tooltip": "TOOLTIP-TODO"
        },
        "colG_08": {
            "nickname": "colG_08",
            "tooltip": "TOOLTIP-TODO"
        },
        "colB_08": {
            "nickname": "colB_08",
            "tooltip": "TOOLTIP-TODO"
        },
        "colA_08": {
            "nickname": "colA_08",
            "tooltip": "TOOLTIP-TODO"
        },
        "pad_08[4]": {
            "nickname": "_Pad14",
            "tooltip": "Null padding (4 bytes)."
        },
        "degRotX_09": {
            "nickname": "degRotX_09",
            "tooltip": "TOOLTIP-TODO"
        },
        "degRotY_09": {
            "nickname": "degRotY_09",
            "tooltip": "TOOLTIP-TODO"
        },
        "colR_09": {
            "nickname": "colR_09",
            "tooltip": "TOOLTIP-TODO"
        },
        "colG_09": {
            "nickname": "colG_09",
            "tooltip": "TOOLTIP-TODO"
        },
        "colB_09": {
            "nickname": "colB_09",
            "tooltip": "TOOLTIP-TODO"
        },
        "colA_09": {
            "nickname": "colA_09",
            "tooltip": "TOOLTIP-TODO"
        },
        "pad_09[4]": {
            "nickname": "_Pad15",
            "tooltip": "Null padding (4 bytes)."
        }
    },
    "EQUIP_MTRL_SET_PARAM_ST": {
        "materialId01": {
            "nickname": "UpgradeGood",
            "tooltip": "Good required to upgrade weapon.",
            "game_type": "GoodParam"
        },
        "materialId02": {
            "nickname": "UpgradeGood2",
            "tooltip": "Second good required to upgrade weapon. Never used, and the upgrade menu can't display it (though it may still work as a requirement).",
            "game_type": "GoodParam"
        },
        "materialId03": {
            "nickname": "UpgradeGood3",
            "tooltip": "Second good required to upgrade weapon. Never used, and the upgrade menu can't display it (though it may still work as a requirement).",
            "game_type": "GoodParam"
        },
        "materialId04": {
            "nickname": "UpgradeGood4",
            "tooltip": "Second good required to upgrade weapon. Never used, and the upgrade menu can't display it (though it may still work as a requirement).",
            "game_type": "GoodParam"
        },
        "materialId05": {
            "nickname": "UpgradeGood5",
            "tooltip": "Second good required to upgrade weapon. Never used, and the upgrade menu can't display it (though it may still work as a requirement).",
            "game_type": "GoodParam"
        },
        "itemNum01": {
            "nickname": "UpgradeQuantity",
            "tooltip": "Amount of Upgrade Good required for reinforcement."
        },
        "itemNum02": {
            "nickname": "UpgradeQuantity2",
            "tooltip": "Amount of Upgrade Good 2 required for upgrade. Never used, and the upgrade menu can't display it (though it may still work as a requirement)."
        },
        "itemNum03": {
            "nickname": "UpgradeQuantity3",
            "tooltip": "Amount of Upgrade Good 3 required for upgrade. Never used, and the upgrade menu can't display it (though it may still work as a requirement)."
        },
        "itemNum04": {
            "nickname": "UpgradeQuantity4",
            "tooltip": "Amount of Upgrade Good 4 required for upgrade. Never used, and the upgrade menu can't display it (though it may still work as a requirement)."
        },
        "itemNum05": {
            "nickname": "UpgradeQuantity5",
            "tooltip": "Amount of Upgrade Good 5 required for upgrade. Never used, and the upgrade menu can't display it (though it may still work as a requirement)."
        },
        "isDisableDispNum01:1": {
            "nickname": "DisableQuantityIndicator",
            "tooltip": "If True, the upgrade quantity will not be shown. Often used when only one of the upgrade good is needed."
        },
        "isDisableDispNum02:1": {
            "nickname": "DisableQuantityIndicator2",
            "tooltip": "If True, the upgrade quantity for Upgrade Good 2 will not be shown. Often used when only one of the upgrade good is needed (though again, this slot is never used)."
        },
        "isDisableDispNum03:1": {
            "nickname": "DisableQuantityIndicator3",
            "tooltip": "If True, the upgrade quantity for Upgrade Good 3 will not be shown. Often used when only one of the upgrade good is needed (though again, this slot is never used)."
        },
        "isDisableDispNum04:1": {
            "nickname": "DisableQuantityIndicator4",
            "tooltip": "If True, the upgrade quantity for Upgrade Good 4 will not be shown. Often used when only one of the upgrade good is needed (though again, this slot is never used)."
        },
        "isDisableDispNum05:1": {
            "nickname": "DisableQuantityIndicator5",
            "tooltip": "If True, the upgrade quantity for Upgrade Good 5 will not be shown. Often used when only one of the upgrade good is needed (though again, this slot is never used)."
        },
        "pad[6]": {
            "nickname": "_Pad0",
            "tooltip": "Null padding (6 bytes)."
        }
    },
    "EQUIP_PARAM_ACCESSORY_ST": {
        "refId": {
            "nickname": "SpecialEffect",
            "tooltip": "Special effect applied when accessory is equipped.",
            "game_type": "SpecialEffectParam"
        },
        "sfxVariationId": {
            "nickname": "SFXVariation",
            "tooltip": "SFX variation ID combined with the value specified in TAE animation data. Always -1; likely works with unused Behavior parameter below."
        },
        "weight": {
            "nickname": "Weight",
            "tooltip": "Weight of accessory. Always set to zero in vanilla Dark Souls, but likely works just like other equipment.",
            "default": 0.0
        },
        "behaviorId": {
            "nickname": "Behavior",
            "tooltip": "Behavior of accessory 'skill'. Always zero in the vanilla game.",
            "game_type": "BehaviorParam"
        },
        "basicPrice": {
            "nickname": "BasicCost",
            "tooltip": "Unknown purpose, and unused."
        },
        "sellValue": {
            "nickname": "FramptSellValue",
            "tooltip": "Amount of souls received when fed to Frampt. (Set to -1 to prevent it from being sold."
        },
        "sortId": {
            "nickname": "SortIndex",
            "tooltip": "Index for automatic inventory sorting."
        },
        "qwcId": {
            "nickname": "QWCID",
            "tooltip": "Unused world tendency remnant.",
            "default": 0
        },
        "equipModelId": {
            "nickname": "EquipmentModel",
            "tooltip": "Always zero. (Rings have no model, presumably.)",
            "game_type": "EquipmentModel"
        },
        "iconId": {
            "nickname": "MenuIcon",
            "tooltip": "Icon ID of ring in menu.",
            "game_type": "Icon"
        },
        "shopLv": {
            "nickname": "ShopLevel",
            "tooltip": "Internal description: 'Level that can be solved in the shop.' Unknown and unused (rings have no level).",
            "default": -1
        },
        "trophySGradeId": {
            "nickname": "AchievementContributionID",
            "tooltip": "Index of ring as it contributes to certain multi-item achievements (none for rings)."
        },
        "trophySeqId": {
            "nickname": "AchievementUnlockID",
            "tooltip": "Achievement unlocked when ring is acquired (Covenant of Artorias)."
        },
        "equipModelCategory": {
            "nickname": "EquipmentModelCategory",
            "tooltip": "Always zero."
        },
        "equipModelGender": {
            "nickname": "EquipmentModelGender",
            "tooltip": "Always zero."
        },
        "accessoryCategory": {
            "nickname": "AccessoryCategory",
            "tooltip": "Always zero."
        },
        "refCategory": {
            "nickname": "ReferenceType",
            "tooltip": "Always set to Special Effects. No idea what happens if you set it to Attacks for a ring...",
            "default": 2
        },
        "spEffectCategory": {
            "nickname": "SpecialEffectCategory",
            "tooltip": "Determines what type of special effects affect the stats of this equipment. Unused for rings."
        },
        "pad[1]": {
            "nickname": "_Pad0",
            "tooltip": "Null padding (1 bytes)."
        },
        "vagrantItemLotId": {
            "nickname": "VagrantItemLot",
            "tooltip": "TODO",
            "game_type": "ItemLotParam"
        },
        "vagrantBonusEneDropItemLotId": {
            "nickname": "VagrantBonusEnemyDropItemLot",
            "tooltip": "TODO",
            "game_type": "ItemLotParam"
        },
        "vagrantItemEneDropItemLotId": {
            "nickname": "VagrantItemEnemyDropItemLot",
            "tooltip": "TODO",
            "game_type": "ItemLotParam"
        },
        "isDeposit:1": {
            "nickname": "CanBeStored",
            "tooltip": "If True, this ring can be stored in the Bottomless Box. Always True for rings."
        },
        "isEquipOutBrake:1": {
            "nickname": "BreaksWhenUnequipped",
            "tooltip": "If True, this ring will break when it is unequipped (e.g. Ring of Favor and Protection)."
        },
        "disableMultiDropShare:1": {
            "nickname": "DisableMultiplayerShare",
            "tooltip": "If True, this ring cannot be given to other players by dropping it. Always False in vanilla."
        },
        "pad1[3]": {
            "nickname": "_Pad1",
            "tooltip": "Null padding (3 bytes)."
        }
    },
    "EQUIP_PARAM_GOODS_ST": {
        "refId": {
            "nickname": "ReferenceID",
            "tooltip": "TODO",
            "dynamic_callback": "GoodReference()"
        },
        "sfxVariationId": {
            "nickname": "AnimationVariationID",
            "tooltip": "Animation variation ID to combine with the base usage animation."
        },
        "weight": {
            "nickname": "Weight",
            "tooltip": "Weight of good. Never used in vanilla Dark Souls.",
            "default": 0.0
        },
        "basicPrice": {
            "nickname": "BasicCost",
            "tooltip": "Unsure. Does not appear to be used."
        },
        "sellValue": {
            "nickname": "FramptSellValue",
            "tooltip": "Amount of souls received when fed to Frampt. (Set to -1 to prevent it from being sold."
        },
        "behaviorId": {
            "nickname": "Behavior",
            "tooltip": "Behavior triggered by good use. Never used.",
            "game_type": "BehaviorParam"
        },
        "replaceItemId": {
            "nickname": "GoodToReplace",
            "tooltip": "Good to replace when this item is obtained. Used only for full/empty Estus Flask exchange."
        },
        "sortId": {
            "nickname": "SortIndex",
            "tooltip": "Index for automatic inventory sorting."
        },
        "qwcId": {
            "nickname": "QWCID",
            "tooltip": "Unused world tendency remnant."
        },
        "yesNoDialogMessageId": {
            "nickname": "ConfirmationMessage",
            "tooltip": "Message displayed in yes/no dialog box to confirm use of good."
        },
        "magicId": {
            "nickname": "Spell",
            "tooltip": "Spell unlocked in attunement menu by possession of this good. (Usually matches the good ID.)",
            "game_type": "SpellParam"
        },
        "iconId": {
            "nickname": "GoodIcon",
            "tooltip": "Good icon texture ID.",
            "game_type": "Icon"
        },
        "modelId": {
            "nickname": "ModelID",
            "tooltip": "Model of good. Never used.",
            "game_type": "EquipmentModel"
        },
        "shopLv": {
            "nickname": "ShopLevel",
            "tooltip": "Level of good that can be sold in 'the shop'. Always -1 or 0. Probably unused.",
            "default": -1
        },
        "compTrophySedId": {
            "nickname": "CollectionAchievementID",
            "tooltip": "Collection achievement (e.g. all spells) to which obtaining this good contributes."
        },
        "trophySeqId": {
            "nickname": "AchievementID",
            "tooltip": "Achievement unlocked when this good is first obtained (e.g. Estus Flask)."
        },
        "maxNum": {
            "nickname": "MaxHoldQuantity",
            "tooltip": "Maximum number of good that can be held at once."
        },
        "consumeHeroPoint": {
            "nickname": "HumanityCost",
            "tooltip": "Humanity cost of using good. Always zero."
        },
        "overDexterity": {
            "nickname": "OverDexterity",
            "tooltip": "'Skill over start value'. Unknown effect; set to 0 for spells and 50 otherwise."
        },
        "goodsType": {
            "nickname": "GoodType",
            "tooltip": "Determines if this is a basic good, upgrade material, key item, or spell."
        },
        "refCategory": {
            "nickname": "ReferenceType",
            "tooltip": "Indicates if this good triggers a Bullet or Special Effect. (Attacks are possible, but unused.)"
        },
        "spEffectCategory": {
            "nickname": "SpecialEffectCategory",
            "tooltip": "Determines compatibility with special effects that affect certain types of attacks. Set to 'Basic' for thrown goods and 'No Category' otherwise."
        },
        "goodsCategory": {
            "nickname": "GoodCategory",
            "tooltip": "Never used. Only one value (0) used."
        },
        "goodsUseAnim": {
            "nickname": "UseAnimation",
            "tooltip": "Points to basic animation used when good is used. Visual/sound effects are set by the variation ID."
        },
        "opmeMenuType": {
            "nickname": "MenuActivated",
            "tooltip": "Menu activated (if any) when good is used. Generally only 'No Menu' or 'Yes or No Menu' will be useful."
        },
        "useLimitCategory": {
            "nickname": "LimitCategory",
            "tooltip": "Only one good-triggered special effect with this category can be active at once. Additional attempts to use goods in this category will be prevented. (Unclear how Dragon Stones work, though.)"
        },
        "replaceCategory": {
            "nickname": "ReplaceCategory",
            "tooltip": "The special effect triggered by this good will replace any special effects in the same category as this one. Used only by Dragon Stones."
        },
        "vowType0:1": {
            "nickname": "UseableByNoCovenant",
            "tooltip": "Determines if this good can be used by characters with no covenant.",
            "default": true
        },
        "vowType1:1": {
            "nickname": "UseableByWayOfWhite",
            "tooltip": "Determines if this good can be used by characters in the Way of White.",
            "default": true
        },
        "vowType2:1": {
            "nickname": "UseableByPrincessGuard",
            "tooltip": "Determines if this good can be used by characters in the Princess's Guard.",
            "default": true
        },
        "vowType3:1": {
            "nickname": "UseableByWarriorsOfSunlight",
            "tooltip": "Determines if this good can be used by characters in the Warriors of Sunlight.",
            "default": true
        },
        "vowType4:1": {
            "nickname": "UseableByDarkwraith",
            "tooltip": "Determines if this good can be used by characters in the Darkwraith covenant.",
            "default": true
        },
        "vowType5:1": {
            "nickname": "UseableByPathOfTheDragon",
            "tooltip": "Determines if this good can be used by characters in the Path of the Dragon.",
            "default": true
        },
        "vowType6:1": {
            "nickname": "UseableByGravelordServant",
            "tooltip": "Determines if this good can be used by characters in the Gravelord Servants.",
            "default": true
        },
        "vowType7:1": {
            "nickname": "UseableByForestHunter",
            "tooltip": "Determines if this good can be used by characters in the Forest Hunters.",
            "default": true
        },
        "vowType8:1": {
            "nickname": "UseableByDarkmoonBlade",
            "tooltip": "Determines if this good can be used by characters in the Blades of the Darkmoon.",
            "default": true
        },
        "vowType9:1": {
            "nickname": "UseableByChaosServant",
            "tooltip": "Determines if this good can be used by characters in the Chaos Servant covenant.",
            "default": true
        },
        "vowType10:1": {
            "nickname": "UseableByCovenant10",
            "tooltip": "Determines if this good can be used by characters in unused covenant 10.",
            "default": true
        },
        "vowType11:1": {
            "nickname": "UseableByCovenant11",
            "tooltip": "Determines if this good can be used by characters in unused covenant 11.",
            "default": true
        },
        "vowType12:1": {
            "nickname": "UseableByCovenant12",
            "tooltip": "Determines if this good can be used by characters in unused covenant 12.",
            "default": true
        },
        "vowType13:1": {
            "nickname": "UseableByCovenant13",
            "tooltip": "Determines if this good can be used by characters in unused covenant 13.",
            "default": true
        },
        "vowType14:1": {
            "nickname": "UseableByCovenant14",
            "tooltip": "Determines if this good can be used by characters in unused covenant 14.",
            "default": true
        },
        "vowType15:1": {
            "nickname": "UseableByCovenant15",
            "tooltip": "Determines if this good can be used by characters in unused covenant 15.",
            "default": true
        },
        "enable_live:1": {
            "nickname": "UseableByHumans",
            "tooltip": "Determines if this good can be used by characters who have revived to Human status.",
            "default": true
        },
        "enable_gray:1": {
            "nickname": "UseableByHollows",
            "tooltip": "Determines if this good can be used by characters who are Hollow.",
            "default": true
        },
        "enable_white:1": {
            "nickname": "UseableByWhitePhantoms",
            "tooltip": "Determines if this good can be used by White Phantoms (summons)."
        },
        "enable_black:1": {
            "nickname": "UseableByBlackPhantoms",
            "tooltip": "Determines if this good can be used by Black Phantoms (invaders)."
        },
        "enable_multi:1": {
            "nickname": "UseableInMultiplayer",
            "tooltip": "Determines if this good can be used while multiple players are together."
        },
        "disable_offline:1": {
            "nickname": "DisabledOffline",
            "tooltip": "Determines if this good can be used while the game is disconnected from the network."
        },
        "isEquip:1": {
            "nickname": "CanBeEquipped",
            "tooltip": "Determines if this good can be equipped in a quick item slot."
        },
        "isConsume:1": {
            "nickname": "ConsumedOnUse",
            "tooltip": "Determines if this good is consumed (count decreases) when used."
        },
        "isAutoEquip:1": {
            "nickname": "AutomaticallyEquipped",
            "tooltip": "Determines if this good will be equipped in an available quick slot when obtained."
        },
        "isEstablishment:1": {
            "nickname": "IsStationary",
            "tooltip": "Unknown; need to look at usage."
        },
        "isOnlyOne:1": {
            "nickname": "IsUnique",
            "tooltip": "Determines if only one of this good exists in the game."
        },
        "isDrop:1": {
            "nickname": "CanBeDropped",
            "tooltip": "Determines if this item can be dropped."
        },
        "isDeposit:1": {
            "nickname": "CanBeStored",
            "tooltip": "Determines if good can be stored in Bottomless Box."
        },
        "isDisableHand:1": {
            "nickname": "IsDisableHand",
            "tooltip": "Not sure. Could disable model hand when good is used?"
        },
        "IsTravelItem:1": {
            "nickname": "IsTravelItem",
            "tooltip": "Not sure. Could flag items that warp the player."
        },
        "isSuppleItem:1": {
            "nickname": "IsEmptyEstusFlask",
            "tooltip": "Not sure. Only enabled for empty Estus Flask."
        },
        "isFullSuppleItem:1": {
            "nickname": "IsNonEmptyEstusFlask",
            "tooltip": "Not sure. Only enabled for non-empty Estus Flask."
        },
        "isEnhance:1": {
            "nickname": "IsUpgradeMaterial",
            "tooltip": "Determines if this is an upgrade material."
        },
        "isFixItem:1": {
            "nickname": "IsFixItem",
            "tooltip": "Probably True for Repair Powder, etc."
        },
        "disableMultiDropShare:1": {
            "nickname": "DisableMultiplayerShare",
            "tooltip": "If True, this good cannot be given to other players by dropping it."
        },
        "disableUseAtColiseum:1": {
            "nickname": "DisabledInArena",
            "tooltip": "If True, this good cannot be used in the PvP Arena in Oolacile."
        },
        "disableUseAtOutOfColiseum:1": {
            "nickname": "DisabledOutsideArena",
            "tooltip": "If True, this good cannot be used outside the PvP Arena in Oolacile."
        },
        "pad[9]": {
            "nickname": "_Pad0",
            "tooltip": "Null padding (9 bytes)."
        },
        "vagrantItemLotId": {
            "nickname": "VagrantItemLot",
            "tooltip": "TODO",
            "default": -1,
            "game_type": "ItemLotParam"
        },
        "vagrantBonusEneDropItemLotId": {
            "nickname": "VagrantBonusEnemyDropItemLot",
            "tooltip": "TODO",
            "default": -1,
            "game_type": "ItemLotParam"
        },
        "vagrantItemEneDropItemLotId": {
            "nickname": "VagrantItemEnemyDropItemLot",
            "tooltip": "TODO",
            "default": -1,
            "game_type": "ItemLotParam"
        }
    },
    "EQUIP_PARAM_PROTECTOR_ST": {
        "sortId": {
            "nickname": "SortIndex",
            "tooltip": "Index for automatic inventory sorting."
        },
        "wanderingEquipId": {
            "nickname": "GhostArmorReplacement",
            "tooltip": "Replacement equipment for network ghosts."
        },
        "vagrantItemLotId": {
            "nickname": "VagrantItemLot",
            "tooltip": "TODO",
            "game_type": "ItemLotParam"
        },
        "vagrantBonusEneDropItemLotId": {
            "nickname": "VagrantBonusEnemyDropItemLot",
            "tooltip": "TODO",
            "game_type": "ItemLotParam"
        },
        "vagrantItemEneDropItemLotId": {
            "nickname": "VagrantItemEnemyDropItemLot",
            "tooltip": "TODO",
            "game_type": "ItemLotParam"
        },
        "fixPrice": {
            "nickname": "RepairCost",
            "tooltip": "Amount of souls required to repair armor fully. Actual repair cost is this multiplied by current durability over max durability."
        },
        "basicPrice": {
            "nickname": "BasicCost",
            "tooltip": "Unsure when this is used. Possibly sets the default if the cost is not specified in Shop parameters. Always set to 200."
        },
        "sellValue": {
            "nickname": "FramptSellValue",
            "tooltip": "Amount of souls received when fed to Frampt. (Set to -1 to prevent it from being sold."
        },
        "weight": {
            "nickname": "Weight",
            "tooltip": "Weight of armor."
        },
        "residentSpEffectId": {
            "nickname": "WearerSpecialEffect1",
            "tooltip": "Special effect granted to wearer (first of three).",
            "game_type": "SpecialEffectParam"
        },
        "residentSpEffectId2": {
            "nickname": "WearerSpecialEffect2",
            "tooltip": "Special effect granted to wearer (second of three).",
            "game_type": "SpecialEffectParam"
        },
        "residentSpEffectId3": {
            "nickname": "WearerSpecialEffect3",
            "tooltip": "Special effect granted to wearer (third of three).",
            "game_type": "SpecialEffectParam"
        },
        "materialSetId": {
            "nickname": "UpgradeMaterialID",
            "tooltip": "Upgrade material set for reinforcement.",
            "game_type": "UpgradeMaterialParam"
        },
        "partsDamageRate": {
            "nickname": "SiteDamageMultiplier",
            "tooltip": "Multiplier for damage taken to this part of the body. Used to specify weakness, not strength, so is never less than 1. Usually 1.5 for weak head pieces, 1.3 for strong head pieces, 1.1 for gauntlets and leggings, and 1 for torso armor."
        },
        "corectSARecover": {
            "nickname": "PoiseRecoveryTimeModifier",
            "tooltip": "Value added to poise recovery time (so negative values are better). -0.1 for heavy armor and 0 otherwise."
        },
        "originEquipPro": {
            "nickname": "UpgradeOrigin0",
            "tooltip": "Origin armor for level 0 of this armor (i.e. what you receive when a blacksmith removes upgrades). If -1, the armor cannot be reverted. Otherwise, it will appear in each blacksmith's reversion menu."
        },
        "originEquipPro1": {
            "nickname": "UpgradeOrigin1",
            "tooltip": "Origin armor for level 1 of this armor (i.e. what you receive when a blacksmith removes upgrades). If -1, the armor cannot be reverted. Otherwise, it will appear in each blacksmith's reversion menu."
        },
        "originEquipPro2": {
            "nickname": "UpgradeOrigin2",
            "tooltip": "Origin armor for level 2 of this armor (i.e. what you receive when a blacksmith removes upgrades). If -1, the armor cannot be reverted. Otherwise, it will appear in each blacksmith's reversion menu."
        },
        "originEquipPro3": {
            "nickname": "UpgradeOrigin3",
            "tooltip": "Origin armor for level 3 of this armor (i.e. what you receive when a blacksmith removes upgrades). If -1, the armor cannot be reverted. Otherwise, it will appear in each blacksmith's reversion menu."
        },
        "originEquipPro4": {
            "nickname": "UpgradeOrigin4",
            "tooltip": "Origin armor for level 4 of this armor (i.e. what you receive when a blacksmith removes upgrades). If -1, the armor cannot be reverted. Otherwise, it will appear in each blacksmith's reversion menu."
        },
        "originEquipPro5": {
            "nickname": "UpgradeOrigin5",
            "tooltip": "Origin armor for level 5 of this armor (i.e. what you receive when a blacksmith removes upgrades). If -1, the armor cannot be reverted. Otherwise, it will appear in each blacksmith's reversion menu."
        },
        "originEquipPro6": {
            "nickname": "UpgradeOrigin6",
            "tooltip": "Origin armor for level 6 of this armor (i.e. what you receive when a blacksmith removes upgrades). If -1, the armor cannot be reverted. Otherwise, it will appear in each blacksmith's reversion menu."
        },
        "originEquipPro7": {
            "nickname": "UpgradeOrigin7",
            "tooltip": "Origin armor for level 7 of this armor (i.e. what you receive when a blacksmith removes upgrades). If -1, the armor cannot be reverted. Otherwise, it will appear in each blacksmith's reversion menu."
        },
        "originEquipPro8": {
            "nickname": "UpgradeOrigin8",
            "tooltip": "Origin armor for level 8 of this armor (i.e. what you receive when a blacksmith removes upgrades). If -1, the armor cannot be reverted. Otherwise, it will appear in each blacksmith's reversion menu."
        },
        "originEquipPro9": {
            "nickname": "UpgradeOrigin9",
            "tooltip": "Origin armor for level 9 of this armor (i.e. what you receive when a blacksmith removes upgrades). If -1, the armor cannot be reverted. Otherwise, it will appear in each blacksmith's reversion menu."
        },
        "originEquipPro10": {
            "nickname": "UpgradeOrigin10",
            "tooltip": "Origin armor for level 10 of this armor (i.e. what you receive when a blacksmith removes upgrades). If -1, the armor cannot be reverted. Otherwise, it will appear in each blacksmith's reversion menu."
        },
        "originEquipPro11": {
            "nickname": "UpgradeOrigin11",
            "tooltip": "Origin armor for level 11 of this armor (i.e. what you receive when a blacksmith removes upgrades). If -1, the armor cannot be reverted. Otherwise, it will appear in each blacksmith's reversion menu."
        },
        "originEquipPro12": {
            "nickname": "UpgradeOrigin12",
            "tooltip": "Origin armor for level 12 of this armor (i.e. what you receive when a blacksmith removes upgrades). If -1, the armor cannot be reverted. Otherwise, it will appear in each blacksmith's reversion menu."
        },
        "originEquipPro13": {
            "nickname": "UpgradeOrigin13",
            "tooltip": "Origin armor for level 13 of this armor (i.e. what you receive when a blacksmith removes upgrades). If -1, the armor cannot be reverted. Otherwise, it will appear in each blacksmith's reversion menu."
        },
        "originEquipPro14": {
            "nickname": "UpgradeOrigin14",
            "tooltip": "Origin armor for level 14 of this armor (i.e. what you receive when a blacksmith removes upgrades). If -1, the armor cannot be reverted. Otherwise, it will appear in each blacksmith's reversion menu."
        },
        "originEquipPro15": {
            "nickname": "UpgradeOrigin15",
            "tooltip": "Origin armor for level 15 of this armor (i.e. what you receive when a blacksmith removes upgrades). If -1, the armor cannot be reverted. Otherwise, it will appear in each blacksmith's reversion menu."
        },
        "faceScaleM_ScaleX": {
            "nickname": "MaleFaceScaleX",
            "tooltip": "Scale factor applied to X dimension of male faces when worn."
        },
        "faceScaleM_ScaleZ": {
            "nickname": "MaleFaceScaleZ",
            "tooltip": "Scale factor applied to Z dimension of male faces when worn."
        },
        "faceScaleM_MaxX": {
            "nickname": "MaleFaceMaxScaleX",
            "tooltip": "Maximum scale permitted for X dimension of male faces when worn."
        },
        "faceScaleM_MaxZ": {
            "nickname": "MaleFaceMaxScaleZ",
            "tooltip": "Maximum scale permitted for Z dimension of male faces when worn."
        },
        "faceScaleF_ScaleX": {
            "nickname": "FemaleFaceScaleX",
            "tooltip": "Scale factor applied to X dimension of female faces when worn."
        },
        "faceScaleF_ScaleZ": {
            "nickname": "FemaleFaceScaleZ",
            "tooltip": "Scale factor applied to Z dimension of female faces when worn."
        },
        "faceScaleF_MaxX": {
            "nickname": "FemaleFaceMaxScaleX",
            "tooltip": "Maximum scale permitted for X dimension of female faces when worn."
        },
        "faceScaleF_MaxZ": {
            "nickname": "FemaleFaceMaxScaleZ",
            "tooltip": "Maximum scale permitted for Z dimension of female faces when worn."
        },
        "qwcId": {
            "nickname": "QWCID",
            "tooltip": "Unused world tendency remnant."
        },
        "equipModelId": {
            "nickname": "EquipmentModel",
            "tooltip": "Model ID of armor.",
            "game_type": "EquipmentModel"
        },
        "iconIdM": {
            "nickname": "MaleIcon",
            "tooltip": "Icon of male variant of armor in inventory.",
            "game_type": "Icon"
        },
        "iconIdF": {
            "nickname": "FemaleIcon",
            "tooltip": "Icon of female variant of armor in inventory.",
            "game_type": "Icon"
        },
        "knockBack": {
            "nickname": "KnockbackPercentageReduction",
            "tooltip": "Never used. Probably the percentage of knockback reduced (from 0 to 100) when wearing armor."
        },
        "knockbackBounceRate": {
            "nickname": "KnockbackBouncePercentage",
            "tooltip": "Never used. Possibly affects knockback of incoming attacks."
        },
        "durability": {
            "nickname": "InitialDurability",
            "tooltip": "Durability of armor when it is obtained. Always equal to max durability in vanilla game."
        },
        "durabilityMax": {
            "nickname": "MaxDurability",
            "tooltip": "Maximum durability of armor."
        },
        "saDurability": {
            "nickname": "Poise",
            "tooltip": "Amount of poise added when wearing armor."
        },
        "defFlickPower": {
            "nickname": "RepelDefense",
            "tooltip": "Determines when incoming attacks will bounce off."
        },
        "defensePhysics": {
            "nickname": "PhysicalDefense",
            "tooltip": "Added defense against physical attack damage.",
            "default": 0
        },
        "defenseMagic": {
            "nickname": "MagicDefense",
            "tooltip": "Added defense against magic attack damage.",
            "default": 0
        },
        "defenseFire": {
            "nickname": "FireDefense",
            "tooltip": "Added defense against fire attack damage.",
            "default": 0
        },
        "defenseThunder": {
            "nickname": "LightningDefense",
            "tooltip": "Added defense against lightning attack damage.",
            "default": 0
        },
        "defenseSlash": {
            "nickname": "SlashDefense",
            "tooltip": "Added defense against physical slash attack damage."
        },
        "defenseBlow": {
            "nickname": "StrikeDefense",
            "tooltip": "Added defense against physical strike attack damage."
        },
        "defenseThrust": {
            "nickname": "ThrustDefense",
            "tooltip": "Added defense against physical thrust attack damage."
        },
        "resistPoison": {
            "nickname": "PoisonResistance",
            "tooltip": "Poison resistance added by armor.",
            "default": 0
        },
        "resistDisease": {
            "nickname": "ToxicResistance",
            "tooltip": "Toxic resistance added by armor.",
            "default": 0
        },
        "resistBlood": {
            "nickname": "BleedResistance",
            "tooltip": "Bleed resistance added by armor.",
            "default": 0
        },
        "resistCurse": {
            "nickname": "CurseResistance",
            "tooltip": "Curse resistance added by armor.",
            "default": 0
        },
        "reinforceTypeId": {
            "nickname": "ArmorUpgradeID",
            "tooltip": "Effects applied at consecutive upgrade reinforcement levels.",
            "game_type": "ArmorUpgradeParam"
        },
        "trophySGradeId": {
            "nickname": "AchievementContributionID",
            "tooltip": "Index of armor as it contributes to certain multi-item achievements."
        },
        "shopLv": {
            "nickname": "ShopLevel",
            "tooltip": "Level of armor that can be sold in 'the shop'. Always -1 or 0. Probably unused.",
            "default": -1
        },
        "knockbackParamId": {
            "nickname": "KnockbackID",
            "tooltip": "Knockback entry. Always 1.",
            "default": 1,
            "game_type": "KnockbackParam"
        },
        "flickDamageCutRate": {
            "nickname": "RepelDamagePercentageReduction",
            "tooltip": "Determines some aspect of attack deflection. Always set to 0 (for light armor) or 255 (for heavy armor)."
        },
        "equipModelCategory": {
            "nickname": "EquipmentModelCategory",
            "tooltip": "Body part covered by armor model."
        },
        "equipModelGender": {
            "nickname": "EquipmentModelGender",
            "tooltip": "Gender variant of armor."
        },
        "protectorCategory": {
            "nickname": "ArmorType",
            "tooltip": "Type of armor (equip slot)."
        },
        "defenseMaterial": {
            "nickname": "SoundEffectOnHit",
            "tooltip": "Type of sound effect generated when this armor is hit."
        },
        "defenseMaterialSfx": {
            "nickname": "VisualEffectOnHit",
            "tooltip": "Type of visual effect generated when this armor is hit."
        },
        "partsDmgType": {
            "nickname": "PartsDamageType",
            "tooltip": "Always zero."
        },
        "defenseMaterial_Weak": {
            "nickname": "SoundEffectOnWeakSpotHit",
            "tooltip": "Sound effect for when damage is taken to weak spot (used for head armor)."
        },
        "defenseMaterialSfx_Weak": {
            "nickname": "VisualEffectOnWeakSpotHit",
            "tooltip": "Visual effect for when damage is taken to weak spot (used for head armor)."
        },
        "isDeposit:1": {
            "nickname": "CanBeStored",
            "tooltip": "If True, this armor can be stored in the Bottomless Box."
        },
        "headEquip:1": {
            "nickname": "EquippedToHead",
            "tooltip": "This armor is equipped to the head.",
            "default": false
        },
        "bodyEquip:1": {
            "nickname": "EquippedToBody",
            "tooltip": "This armor is equipped to the body."
        },
        "armEquip:1": {
            "nickname": "EquippedToHands",
            "tooltip": "This armor is equipped to the hands."
        },
        "legEquip:1": {
            "nickname": "EquippedToLegs",
            "tooltip": "This armor is equipped to the legs."
        },
        "useFaceScale:1": {
            "nickname": "UseFaceScale",
            "tooltip": "If True, the face-scaling parameters of this armor will be applied."
        },
        "invisibleFlag00:1": {
            "nickname": "HideFlag0",
            "tooltip": "Hide part of the character model: (unknown)"
        },
        "invisibleFlag01:1": {
            "nickname": "HideFlag1HairFringe",
            "tooltip": "Hide part of the character model: (hair fringe)"
        },
        "invisibleFlag02:1": {
            "nickname": "HideFlag2Sideburns",
            "tooltip": "Hide part of the character model: (sideburns)"
        },
        "invisibleFlag03:1": {
            "nickname": "HideFlag3TopOfHead",
            "tooltip": "Hide part of the character model: (top of head)"
        },
        "invisibleFlag04:1": {
            "nickname": "HideFlag4TopOfHead",
            "tooltip": "Hide part of the character model: (top of head)"
        },
        "invisibleFlag05:1": {
            "nickname": "HideFlag5BackHair",
            "tooltip": "Hide part of the character model: (back hair)"
        },
        "invisibleFlag06:1": {
            "nickname": "HideFlag6BackHairTip",
            "tooltip": "Hide part of the character model: (back hair tip)"
        },
        "invisibleFlag07:1": {
            "nickname": "HideFlag7",
            "tooltip": "Hide part of the character model: (unknown)"
        },
        "invisibleFlag08:1": {
            "nickname": "HideFlag8",
            "tooltip": "Hide part of the character model: (unknown)"
        },
        "invisibleFlag09:1": {
            "nickname": "HideFlag9",
            "tooltip": "Hide part of the character model: (unknown)"
        },
        "invisibleFlag10:1": {
            "nickname": "HideFlag10Collar",
            "tooltip": "Hide part of the character model: (collar)"
        },
        "invisibleFlag11:1": {
            "nickname": "HideFlag11AroundCollar",
            "tooltip": "Hide part of the character model: (around collar)"
        },
        "invisibleFlag12:1": {
            "nickname": "HideFlag12",
            "tooltip": "Hide part of the character model: (unknown)"
        },
        "invisibleFlag13:1": {
            "nickname": "HideFlag13",
            "tooltip": "Hide part of the character model: (unknown)"
        },
        "invisibleFlag14:1": {
            "nickname": "HideFlag14",
            "tooltip": "Hide part of the character model: (unknown)"
        },
        "invisibleFlag15:1": {
            "nickname": "HideFlag15HoodHem",
            "tooltip": "Hide part of the character model: (hood hem)"
        },
        "invisibleFlag16:1": {
            "nickname": "HideFlag16",
            "tooltip": "Hide part of the character model: (unknown)"
        },
        "invisibleFlag17:1": {
            "nickname": "HideFlag17",
            "tooltip": "Hide part of the character model: (unknown)"
        },
        "invisibleFlag18:1": {
            "nickname": "HideFlag18",
            "tooltip": "Hide part of the character model: (unknown)"
        },
        "invisibleFlag19:1": {
            "nickname": "HideFlag19",
            "tooltip": "Hide part of the character model: (unknown)"
        },
        "invisibleFlag20:1": {
            "nickname": "HideFlag20SleeveA",
            "tooltip": "Hide part of the character model: (sleeve A)"
        },
        "invisibleFlag21:1": {
            "nickname": "HideFlag21SleeveB",
            "tooltip": "Hide part of the character model: (sleeve B)"
        },
        "invisibleFlag22:1": {
            "nickname": "HideFlag22",
            "tooltip": "Hide part of the character model: (unknown)"
        },
        "invisibleFlag23:1": {
            "nickname": "HideFlag23",
            "tooltip": "Hide part of the character model: (unknown)"
        },
        "invisibleFlag24:1": {
            "nickname": "HideFlag24",
            "tooltip": "Hide part of the character model: (unknown)"
        },
        "invisibleFlag25:1": {
            "nickname": "HideFlag25Arm",
            "tooltip": "Hide part of the character model: (arm)"
        },
        "invisibleFlag26:1": {
            "nickname": "HideFlag26",
            "tooltip": "Hide part of the character model: (unknown)"
        },
        "invisibleFlag27:1": {
            "nickname": "HideFlag27",
            "tooltip": "Hide part of the character model: (unknown)"
        },
        "invisibleFlag28:1": {
            "nickname": "HideFlag28",
            "tooltip": "Hide part of the character model: (unknown)"
        },
        "invisibleFlag29:1": {
            "nickname": "HideFlag29",
            "tooltip": "Hide part of the character model: (unknown)"
        },
        "invisibleFlag30:1": {
            "nickname": "HideFlag30Belt",
            "tooltip": "Hide part of the character model: (belt)"
        },
        "invisibleFlag31:1": {
            "nickname": "HideFlag31",
            "tooltip": "Hide part of the character model: (unknown)"
        },
        "invisibleFlag32:1": {
            "nickname": "HideFlag32",
            "tooltip": "Hide part of the character model: (unknown)"
        },
        "invisibleFlag33:1": {
            "nickname": "HideFlag33",
            "tooltip": "Hide part of the character model: (unknown)"
        },
        "invisibleFlag34:1": {
            "nickname": "HideFlag34",
            "tooltip": "Hide part of the character model: (unknown)"
        },
        "invisibleFlag35:1": {
            "nickname": "HideFlag35",
            "tooltip": "Hide part of the character model: (unknown)"
        },
        "invisibleFlag36:1": {
            "nickname": "HideFlag36",
            "tooltip": "Hide part of the character model: (unknown)"
        },
        "invisibleFlag37:1": {
            "nickname": "HideFlag37",
            "tooltip": "Hide part of the character model: (unknown)"
        },
        "invisibleFlag38:1": {
            "nickname": "HideFlag38",
            "tooltip": "Hide part of the character model: (unknown)"
        },
        "invisibleFlag39:1": {
            "nickname": "HideFlag39",
            "tooltip": "Hide part of the character model: (unknown)"
        },
        "invisibleFlag40:1": {
            "nickname": "HideFlag40",
            "tooltip": "Hide part of the character model: (unknown)"
        },
        "invisibleFlag41:1": {
            "nickname": "HideFlag41",
            "tooltip": "Hide part of the character model: (unknown)"
        },
        "invisibleFlag42:1": {
            "nickname": "HideFlag42",
            "tooltip": "Hide part of the character model: (unknown)"
        },
        "invisibleFlag43:1": {
            "nickname": "HideFlag43",
            "tooltip": "Hide part of the character model: (unknown)"
        },
        "invisibleFlag44:1": {
            "nickname": "HideFlag44",
            "tooltip": "Hide part of the character model: (unknown)"
        },
        "invisibleFlag45:1": {
            "nickname": "HideFlag45",
            "tooltip": "Hide part of the character model: (unknown)"
        },
        "invisibleFlag46:1": {
            "nickname": "HideFlag46",
            "tooltip": "Hide part of the character model: (unknown)"
        },
        "invisibleFlag47:1": {
            "nickname": "HideFlag47",
            "tooltip": "Hide part of the character model: (unknown)"
        },
        "disableMultiDropShare:1": {
            "nickname": "DisableMultiplayerShare",
            "tooltip": "If True, this armor cannot be given to other players by dropping it. Always False in vanilla."
        },
        "simpleModelForDlc:1": {
            "nickname": "SimpleDLCModelExists",
            "tooltip": "Unknown; always set to False."
        },
        "pad_0[1]": {
            "nickname": "_Pad0",
            "tooltip": "Null padding (1 bytes)."
        },
        "oldSortId": {
            "nickname": "OldSortIndex",
            "tooltip": "Sorting index for an obsolete build of the game. No effect."
        },
        "pad_1[6]": {
            "nickname": "_Pad1",
            "tooltip": "Null padding (6 bytes)."
        }
    },
    "EQUIP_PARAM_WEAPON_ST": {
        "behaviorVariationId": {
            "nickname": "BehaviorVariationID",
            "tooltip": "Multiplied by 1000 and added to player behavior lookups (hitboxes, bullets) triggered by TAE."
        },
        "sortId": {
            "nickname": "SortIndex",
            "tooltip": "Index for automatic inventory sorting."
        },
        "wanderingEquipId": {
            "nickname": "GhostWeaponReplacement",
            "tooltip": "Weapon replacement for ghosts."
        },
        "weight": {
            "nickname": "Weight",
            "tooltip": "Weight of weapon.",
            "default": 0.0
        },
        "weaponWeightRate": {
            "nickname": "WeightRatio",
            "tooltip": "Unknown effect. Value is about evenly split between 0 and 1 across weapons, with no obvious pattern."
        },
        "fixPrice": {
            "nickname": "RepairCost",
            "tooltip": "Amount of souls required to repair weapon fully. Actual repair cost is this multiplied by current durability over max durability."
        },
        "basicPrice": {
            "nickname": "BasicCost",
            "tooltip": "Unknown purpose, and unused."
        },
        "sellValue": {
            "nickname": "FramptSellValue",
            "tooltip": "Amount of souls received when fed to Frampt. (Set to -1 to prevent it from being sold."
        },
        "correctStrength": {
            "nickname": "StrengthScaling",
            "tooltip": "Amount of attack power gained from strength. (I believe this is the percentage of the player's strength to add to the weapon's attack power, but it also depends on ScalingFormulaType below.)"
        },
        "correctAgility": {
            "nickname": "DexterityScaling",
            "tooltip": "Amount of attack power gained from dexterity. (I believe this is the percentage of the player's dexterity to add to the weapon's attack power, but it also depends on ScalingFormulaType below.)."
        },
        "correctMagic": {
            "nickname": "IntelligenceScaling",
            "tooltip": "Amount of attack power gained from intelligence. (I believe this is the percentage of the player's intelligence to add to the weapon's attack power, but it also depends on ScalingFormulaType below.)"
        },
        "correctFaith": {
            "nickname": "FaithScaling",
            "tooltip": "Amount of attack power gained from faith. (I believe this is the percentage of the player's faith to add to the weapon's attack power, but it also depends on ScalingFormulaType below.)"
        },
        "physGuardCutRate": {
            "nickname": "PhysicalGuardPercentage",
            "tooltip": "Percentage of physical damage prevented when guarding with this weapon."
        },
        "magGuardCutRate": {
            "nickname": "MagicGuardPercentage",
            "tooltip": "Percentage of magic damage prevented when guarding with this weapon."
        },
        "fireGuardCutRate": {
            "nickname": "FireGuardPercentage",
            "tooltip": "Percentage of fire damage prevented when guarding with this weapon."
        },
        "thunGuardCutRate": {
            "nickname": "LightningGuardPercentage",
            "tooltip": "Percentage of lightning damage prevented when guarding with this weapon."
        },
        "spEffectBehaviorId0": {
            "nickname": "SpecialEffectOnHit0",
            "tooltip": "Special effect applied to struck target (slot 0).",
            "game_type": "SpecialEffectParam"
        },
        "spEffectBehaviorId1": {
            "nickname": "SpecialEffectOnHit1",
            "tooltip": "Special effect applied to struck target (slot 1).",
            "game_type": "SpecialEffectParam"
        },
        "spEffectBehaviorId2": {
            "nickname": "SpecialEffectOnHit2",
            "tooltip": "Special effect applied to struck target (slot 2).",
            "game_type": "SpecialEffectParam"
        },
        "residentSpEffectId": {
            "nickname": "EquippedSpecialEffect0",
            "tooltip": "Special effect granted to character with weapon equipped (slot 0).",
            "game_type": "SpecialEffectParam"
        },
        "residentSpEffectId1": {
            "nickname": "EquippedSpecialEffect1",
            "tooltip": "Special effect granted to character with weapon equipped (slot 1).",
            "game_type": "SpecialEffectParam"
        },
        "residentSpEffectId2": {
            "nickname": "EquippedSpecialEffect2",
            "tooltip": "Special effect granted to character with weapon equipped (slot 2).",
            "game_type": "SpecialEffectParam"
        },
        "materialSetId": {
            "nickname": "UpgradeMaterialID",
            "tooltip": "Upgrade Material parameter that sets costs for weapon reinforcement.",
            "game_type": "UpgradeMaterialParam"
        },
        "originEquipWep": {
            "nickname": "UpgradeOrigin0",
            "tooltip": "Origin armor for level 0 of this weapon (i.e. what you receive when a blacksmith removes upgrades). If -1, the weapon cannot be reverted. Otherwise, it will appear in each blacksmith's reversion menu."
        },
        "originEquipWep1": {
            "nickname": "UpgradeOrigin1",
            "tooltip": "Origin armor for level 1 of this weapon (i.e. what you receive when a blacksmith removes upgrades). If -1, the weapon cannot be reverted. Otherwise, it will appear in each blacksmith's reversion menu."
        },
        "originEquipWep2": {
            "nickname": "UpgradeOrigin2",
            "tooltip": "Origin armor for level 2 of this weapon (i.e. what you receive when a blacksmith removes upgrades). If -1, the weapon cannot be reverted. Otherwise, it will appear in each blacksmith's reversion menu."
        },
        "originEquipWep3": {
            "nickname": "UpgradeOrigin3",
            "tooltip": "Origin armor for level 3 of this weapon (i.e. what you receive when a blacksmith removes upgrades). If -1, the weapon cannot be reverted. Otherwise, it will appear in each blacksmith's reversion menu."
        },
        "originEquipWep4": {
            "nickname": "UpgradeOrigin4",
            "tooltip": "Origin armor for level 4 of this weapon (i.e. what you receive when a blacksmith removes upgrades). If -1, the weapon cannot be reverted. Otherwise, it will appear in each blacksmith's reversion menu."
        },
        "originEquipWep5": {
            "nickname": "UpgradeOrigin5",
            "tooltip": "Origin armor for level 5 of this weapon (i.e. what you receive when a blacksmith removes upgrades). If -1, the weapon cannot be reverted. Otherwise, it will appear in each blacksmith's reversion menu."
        },
        "originEquipWep6": {
            "nickname": "UpgradeOrigin6",
            "tooltip": "Origin armor for level 6 of this weapon (i.e. what you receive when a blacksmith removes upgrades). If -1, the weapon cannot be reverted. Otherwise, it will appear in each blacksmith's reversion menu."
        },
        "originEquipWep7": {
            "nickname": "UpgradeOrigin7",
            "tooltip": "Origin armor for level 7 of this weapon (i.e. what you receive when a blacksmith removes upgrades). If -1, the weapon cannot be reverted. Otherwise, it will appear in each blacksmith's reversion menu."
        },
        "originEquipWep8": {
            "nickname": "UpgradeOrigin8",
            "tooltip": "Origin armor for level 8 of this weapon (i.e. what you receive when a blacksmith removes upgrades). If -1, the weapon cannot be reverted. Otherwise, it will appear in each blacksmith's reversion menu."
        },
        "originEquipWep9": {
            "nickname": "UpgradeOrigin9",
            "tooltip": "Origin armor for level 9 of this weapon (i.e. what you receive when a blacksmith removes upgrades). If -1, the weapon cannot be reverted. Otherwise, it will appear in each blacksmith's reversion menu."
        },
        "originEquipWep10": {
            "nickname": "UpgradeOrigin10",
            "tooltip": "Origin armor for level 10 of this weapon (i.e. what you receive when a blacksmith removes upgrades). If -1, the weapon cannot be reverted. Otherwise, it will appear in each blacksmith's reversion menu."
        },
        "originEquipWep11": {
            "nickname": "UpgradeOrigin11",
            "tooltip": "Origin armor for level 11 of this weapon (i.e. what you receive when a blacksmith removes upgrades). If -1, the weapon cannot be reverted. Otherwise, it will appear in each blacksmith's reversion menu."
        },
        "originEquipWep12": {
            "nickname": "UpgradeOrigin12",
            "tooltip": "Origin armor for level 12 of this weapon (i.e. what you receive when a blacksmith removes upgrades). If -1, the weapon cannot be reverted. Otherwise, it will appear in each blacksmith's reversion menu."
        },
        "originEquipWep13": {
            "nickname": "UpgradeOrigin13",
            "tooltip": "Origin armor for level 13 of this weapon (i.e. what you receive when a blacksmith removes upgrades). If -1, the weapon cannot be reverted. Otherwise, it will appear in each blacksmith's reversion menu."
        },
        "originEquipWep14": {
            "nickname": "UpgradeOrigin14",
            "tooltip": "Origin armor for level 14 of this weapon (i.e. what you receive when a blacksmith removes upgrades). If -1, the weapon cannot be reverted. Otherwise, it will appear in each blacksmith's reversion menu."
        },
        "originEquipWep15": {
            "nickname": "UpgradeOrigin15",
            "tooltip": "Origin armor for level 15 of this weapon (i.e. what you receive when a blacksmith removes upgrades). If -1, the weapon cannot be reverted. Otherwise, it will appear in each blacksmith's reversion menu."
        },
        "antiDemonDamageRate": {
            "nickname": "DamageAgainstDemonsMultiplier",
            "tooltip": "Multiplier applied to damage dealt against demons with this weapon."
        },
        "antSaintDamageRate": {
            "nickname": "WeakToDivineDamageMultiplier",
            "tooltip": "Multiplier applied to damage dealt against enemies weak to divine (e.g. skeletons) with this weapon."
        },
        "antWeakA_DamageRate": {
            "nickname": "GodDamageMultiplier",
            "tooltip": "Multiplier applied to damage dealt against Gods and Goddesses with this weapon."
        },
        "antWeakB_DamageRate": {
            "nickname": "AbyssDamageMultiplier",
            "tooltip": "Multiplier applied to damage dealt against enemies from the Abyss with this weapon."
        },
        "vagrantItemLotId": {
            "nickname": "VagrantItemLot",
            "tooltip": "TODO",
            "game_type": "ItemLotParam"
        },
        "vagrantBonusEneDropItemLotId": {
            "nickname": "VagrantBonusEnemyDropItemLot",
            "tooltip": "TODO",
            "game_type": "ItemLotParam"
        },
        "vagrantItemEneDropItemLotId": {
            "nickname": "VagrantItemEnemyDropItemLot",
            "tooltip": "TODO",
            "game_type": "ItemLotParam"
        },
        "equipModelId": {
            "nickname": "WeaponModel",
            "tooltip": "Weapon model ID.",
            "game_type": "EquipmentModel"
        },
        "iconId": {
            "nickname": "WeaponIcon",
            "tooltip": "Weapon icon texture ID.",
            "game_type": "Icon"
        },
        "durability": {
            "nickname": "InitialDurability",
            "tooltip": "Durability of weapon when it is obtained. Always equal to max durability in vanilla game.",
            "default": 0
        },
        "durabilityMax": {
            "nickname": "MaxDurability",
            "tooltip": "Maximum durability of weapon.",
            "default": 0
        },
        "attackThrowEscape": {
            "nickname": "ThrowEscapePower",
            "tooltip": "Power for escaping throws. Always 1, except for a few (and only a few) of the ghost replacement weapons.",
            "default": 1
        },
        "parryDamageLife": {
            "nickname": "MaxParryWindowDuration",
            "tooltip": "Maximum parry window duration (cannot exceed TAE duration). Always set to 10.",
            "default": 10
        },
        "attackBasePhysics": {
            "nickname": "BasePhysicalDamage",
            "tooltip": "Base physical damage of weapon attacks.",
            "default": 0
        },
        "attackBaseMagic": {
            "nickname": "BaseMagicDamage",
            "tooltip": "Base magic damage of weapon attacks.",
            "default": 0
        },
        "attackBaseFire": {
            "nickname": "BaseFireDamage",
            "tooltip": "Base fire damage of weapon attacks.",
            "default": 0
        },
        "attackBaseThunder": {
            "nickname": "BaseLightningDamage",
            "tooltip": "Base lightning damage of weapon attacks.",
            "default": 0
        },
        "attackBaseStamina": {
            "nickname": "BaseStaminaDamage",
            "tooltip": "Base stamina damage of weapon attacks.",
            "default": 0
        },
        "saWeaponDamage": {
            "nickname": "BasePoiseDamage",
            "tooltip": "Base poise damage of weapon attacks."
        },
        "saDurability": {
            "nickname": "AttackPoiseBonus",
            "tooltip": "Poise gained during attack animations with this weapon. Never used (probably done in TAE)."
        },
        "guardAngle": {
            "nickname": "EffectiveGuardAngle",
            "tooltip": "Angle that can be guarded with this weapon. Never used."
        },
        "staminaGuardDef": {
            "nickname": "GuardStaminaDefense",
            "tooltip": "Defense against (i.e. value subtracted from) stamina attack damage while guarding."
        },
        "reinforceTypeId": {
            "nickname": "WeaponUpgradeID",
            "tooltip": "Weapon Upgrade parameter that specifies upgrade benefits.",
            "game_type": "WeaponUpgradeParam"
        },
        "trophySGradeId": {
            "nickname": "AllWeaponsAchievementIndex",
            "tooltip": "Index of weapon as it contributes to the Knight's Honor achievement."
        },
        "trophySeqId": {
            "nickname": "MaxUpgradeAchievementID",
            "tooltip": "Achievement unlocked when weapon is upgraded to maximum level (one per upgrade path)."
        },
        "throwAtkRate": {
            "nickname": "ThrowDamageChangePercentage",
            "tooltip": "Percentage damage increase (if positive) or decrease (if negative) during backstabs and ripostes with this weapon."
        },
        "bowDistRate": {
            "nickname": "BowRangeChangePercentage",
            "tooltip": "Percentage range increase (if positive) or decrease (if negative) with this bow.",
            "default": -1
        },
        "equipModelCategory": {
            "nickname": "WeaponModelCategory",
            "tooltip": "Model category for equipment. Only one option for weapons."
        },
        "equipModelGender": {
            "nickname": "WeaponModelGender",
            "tooltip": "Model gender variant. All weapons are genderless."
        },
        "weaponCategory": {
            "nickname": "WeaponCategory",
            "tooltip": "Basic category of weapon. Many 'weapon types' you may be familiar with are merged here (e.g. whips are straight swords)."
        },
        "wepmotionCategory": {
            "nickname": "AttackAnimationCategory",
            "tooltip": "Basic weapon attack animation type. More diverse than WeaponCategory. This number is multiplied by 10000 and used as an animation offset for all attacks, I believe."
        },
        "guardmotionCategory": {
            "nickname": "GuardAnimationCategory",
            "tooltip": "Basic weapon/shield block animation type."
        },
        "atkMaterial": {
            "nickname": "VisualSoundEffectsOnHit",
            "tooltip": "Determines the sounds and visual effects generated when this weapon hits."
        },
        "defMaterial": {
            "nickname": "VisualEffectsOnBlock",
            "tooltip": "Determines the visual effects generated when this weapon blocks an attack."
        },
        "defSfxMaterial": {
            "nickname": "SoundEffectsOnBlock",
            "tooltip": "Determines the sound effects generated when this weapon blocks an attack."
        },
        "correctType": {
            "nickname": "ScalingFormulaType",
            "tooltip": "Determines how scaling changes with attribute level."
        },
        "spAttribute": {
            "nickname": "ElementAttribute",
            "tooltip": "Element attached to hits with this weapon."
        },
        "spAtkcategory": {
            "nickname": "SpecialAttackCategory",
            "tooltip": "Overrides AttackAnimationCategory for some attacks. Ranges from 50 to 199 (or 0 for none). Often used to give weapons unique strong (R2) attacks, for example, but can override any attack animation."
        },
        "wepmotionOneHandId": {
            "nickname": "OneHandedAnimationCategory",
            "tooltip": "Animation category for one-handed non-attack animations (like walking)."
        },
        "wepmotionBothHandId": {
            "nickname": "TwoHandedAnimationCategory",
            "tooltip": "Animation category for two-handed non-attack animations (like walking)."
        },
        "properStrength": {
            "nickname": "RequiredStrength",
            "tooltip": "Required strength to wield weapon properly. (Reduced by one third if held two-handed.)"
        },
        "properAgility": {
            "nickname": "RequiredDexterity",
            "tooltip": "Required dexterity to wield weapon properly."
        },
        "properMagic": {
            "nickname": "RequiredIntelligence",
            "tooltip": "Required intelligence to wield weapon properly."
        },
        "properFaith": {
            "nickname": "RequiredFaith",
            "tooltip": "Required faith to wield weapon properly."
        },
        "overStrength": {
            "nickname": "OverStrength",
            "tooltip": "Unknown. Always set to 99, except for arrows and bolts.",
            "default": 99
        },
        "attackBaseParry": {
            "nickname": "AttackBaseParry",
            "tooltip": "Unknown. Never used."
        },
        "defenseBaseParry": {
            "nickname": "DefenseBaseParry",
            "tooltip": "Unknown. Never used."
        },
        "guardBaseRepel": {
            "nickname": "DeflectOnBlock",
            "tooltip": "Determines if an enemy will be deflected when you block them with this weapon (by comparing it to their DeflectOnAttack)."
        },
        "attackBaseRepel": {
            "nickname": "DeflectOnAttack",
            "tooltip": "Determines if this weapon will be deflected when attacking a blocking enemy (by comparing it to their DeflectOnBlock)."
        },
        "guardCutCancelRate": {
            "nickname": "IgnoreGuardPercentage",
            "tooltip": "Percentage (from -100 to 100) of target's current guard rate to ignore. A value of 100 will ignore guarding completely, and a value of -100 will double their guarding effectiveness. Never used, in favor of the simple 'IgnoreGuard' boolean field."
        },
        "guardLevel": {
            "nickname": "GuardLevel",
            "tooltip": "Internal description: 'in which guard motion is the enemy attacked when guarded?' Exact effects are unclear, but this ranges from 0 to 4 in effectiveness of blocking in a predictable way (daggers are worse than swords, which are worse than greatswords, which are worse than all shields)."
        },
        "slashGuardCutRate": {
            "nickname": "SlashDamageReductionWhenGuarding",
            "tooltip": "Always zero."
        },
        "blowGuardCutRate": {
            "nickname": "StrikeDamageReductionWhenGuarding",
            "tooltip": "Always zero."
        },
        "thrustGuardCutRate": {
            "nickname": "ThrustDamageReductionWhenGuarding",
            "tooltip": "Always zero."
        },
        "poisonGuardResist": {
            "nickname": "PoisonDamageReductionWhenGuarding",
            "tooltip": "Percentage of incoming poison damage ignored when guarding."
        },
        "diseaseGuardResist": {
            "nickname": "ToxicDamageReductionWhenGuarding",
            "tooltip": "Percentage of incoming toxic damage ignored when guarding."
        },
        "bloodGuardResist": {
            "nickname": "BleedDamageReductionWhenGuarding",
            "tooltip": "Percentage of incoming bleed damage ignored when guarding."
        },
        "curseGuardResist": {
            "nickname": "CurseDamageReductionWhenGuarding",
            "tooltip": "Percentage of incoming curse damage ignored when guarding."
        },
        "isDurabilityDivergence": {
            "nickname": "DurabilityDivergenceCategory",
            "tooltip": "Determines an alternate animation used if the player tries to use this weapon's special attack without having enough durability to use it. Exact enumeration is unknown, but existing usages are documented."
        },
        "rightHandEquipable:1": {
            "nickname": "RightHandAllowed",
            "tooltip": "If True, this weapon can be equipped in the right hand."
        },
        "leftHandEquipable:1": {
            "nickname": "LeftHandAllowed",
            "tooltip": "If True, this weapon can be equipped in the left hand."
        },
        "bothHandEquipable:1": {
            "nickname": "BothHandsAllowed",
            "tooltip": "If True, this weapon can be held in two-handed mode."
        },
        "arrowSlotEquipable:1": {
            "nickname": "UsesEquippedArrows",
            "tooltip": "If True, this weapon will use equipped arrow slot."
        },
        "boltSlotEquipable:1": {
            "nickname": "UsesEquippedBolts",
            "tooltip": "If True, this weapon will use equipped bolt slot."
        },
        "enableGuard:1": {
            "nickname": "GuardEnabled",
            "tooltip": "If True, the player can guard with this weapon by holding L1."
        },
        "enableParry:1": {
            "nickname": "ParryEnabled",
            "tooltip": "If True, the player can parry with this weapon by pressing L2."
        },
        "enableMagic:1": {
            "nickname": "CanCastSorceries",
            "tooltip": "If True, this weapon can be used to cast sorceries."
        },
        "enableSorcery:1": {
            "nickname": "CanCastPyromancy",
            "tooltip": "If True, this weapon can be used to cast pyromancy."
        },
        "enableMiracle:1": {
            "nickname": "CanCastMiracles",
            "tooltip": "If True, this weapon can be used to cast miracles."
        },
        "enableVowMagic:1": {
            "nickname": "CanCastCovenantMagic",
            "tooltip": "TODO"
        },
        "isNormalAttackType:1": {
            "nickname": "DealsNeutralDamage",
            "tooltip": "TODO"
        },
        "isBlowAttackType:1": {
            "nickname": "DealsStrikeDamage",
            "tooltip": "TODO"
        },
        "isSlashAttackType:1": {
            "nickname": "DealsSlashDamage",
            "tooltip": "TODO"
        },
        "isThrustAttackType:1": {
            "nickname": "DealsThrustDamage",
            "tooltip": "TODO"
        },
        "isEnhance:1": {
            "nickname": "IsUpgraded",
            "tooltip": "TODO"
        },
        "isLuckCorrect:1": {
            "nickname": "IsAffectedByLuck",
            "tooltip": "TODO"
        },
        "isCustom:1": {
            "nickname": "IsCustom",
            "tooltip": "TODO"
        },
        "disableBaseChangeReset:1": {
            "nickname": "DisableBaseChangeReset",
            "tooltip": "TODO"
        },
        "disableRepair:1": {
            "nickname": "DisableRepairs",
            "tooltip": "If True, this weapon cannot be repaired."
        },
        "isDarkHand:1": {
            "nickname": "IsDarkHand",
            "tooltip": "Enabled only for the Dark Hand."
        },
        "simpleModelForDlc:1": {
            "nickname": "SimpleDLCModelExists",
            "tooltip": "Unknown; always set to False."
        },
        "lanternWep:1": {
            "nickname": "IsLantern",
            "tooltip": "TODO"
        },
        "isVersusGhostWep:1": {
            "nickname": "CanHitGhosts",
            "tooltip": "If True, this weapon can hit ghosts without a Transient Curse active."
        },
        "baseChangeCategory:6": {
            "nickname": "BaseChangeCategory",
            "tooltip": "Never used. Likely Demon's Souls junk."
        },
        "isDragonSlayer:1": {
            "nickname": "IsDragonSlayer",
            "tooltip": "TODO"
        },
        "isDeposit:1": {
            "nickname": "CanBeStored",
            "tooltip": "If True, this weapon can be stored in the Bottomless Box. Always True for rings."
        },
        "disableMultiDropShare:1": {
            "nickname": "DisableMultiplayerShare",
            "tooltip": "If True, this weapon cannot be given to other players by dropping it. Always False in vanilla."
        },
        "pad_0[1]": {
            "nickname": "_Pad0",
            "tooltip": "Null padding (1 bytes)."
        },
        "oldSortId": {
            "nickname": "OldSortIndex",
            "tooltip": "Sorting index for an obsolete build of the game. No effect."
        },
        "pad_1[8]": {
            "nickname": "_Pad1",
            "tooltip": "Null padding (8 bytes)."
        }
    },
    "FACE_PARAM_ST": {
        "faceGeoData00": {
            "nickname": "GeometryData00",
            "tooltip": "Geometry data point 0."
        },
        "faceGeoData01": {
            "nickname": "GeometryData01",
            "tooltip": "Geometry data point 1."
        },
        "faceGeoData02": {
            "nickname": "GeometryData02",
            "tooltip": "Geometry data point 2."
        },
        "faceGeoData03": {
            "nickname": "GeometryData03",
            "tooltip": "Geometry data point 3."
        },
        "faceGeoData04": {
            "nickname": "GeometryData04",
            "tooltip": "Geometry data point 4."
        },
        "faceGeoData05": {
            "nickname": "GeometryData05",
            "tooltip": "Geometry data point 5."
        },
        "faceGeoData06": {
            "nickname": "GeometryData06",
            "tooltip": "Geometry data point 6."
        },
        "faceGeoData07": {
            "nickname": "GeometryData07",
            "tooltip": "Geometry data point 7."
        },
        "faceGeoData08": {
            "nickname": "GeometryData08",
            "tooltip": "Geometry data point 8."
        },
        "faceGeoData09": {
            "nickname": "GeometryData09",
            "tooltip": "Geometry data point 9."
        },
        "faceGeoData10": {
            "nickname": "GeometryData10",
            "tooltip": "Geometry data point 10."
        },
        "faceGeoData11": {
            "nickname": "GeometryData11",
            "tooltip": "Geometry data point 11."
        },
        "faceGeoData12": {
            "nickname": "GeometryData12",
            "tooltip": "Geometry data point 12."
        },
        "faceGeoData13": {
            "nickname": "GeometryData13",
            "tooltip": "Geometry data point 13."
        },
        "faceGeoData14": {
            "nickname": "GeometryData14",
            "tooltip": "Geometry data point 14."
        },
        "faceGeoData15": {
            "nickname": "GeometryData15",
            "tooltip": "Geometry data point 15."
        },
        "faceGeoData16": {
            "nickname": "GeometryData16",
            "tooltip": "Geometry data point 16."
        },
        "faceGeoData17": {
            "nickname": "GeometryData17",
            "tooltip": "Geometry data point 17."
        },
        "faceGeoData18": {
            "nickname": "GeometryData18",
            "tooltip": "Geometry data point 18."
        },
        "faceGeoData19": {
            "nickname": "GeometryData19",
            "tooltip": "Geometry data point 19."
        },
        "faceGeoData20": {
            "nickname": "GeometryData20",
            "tooltip": "Geometry data point 20."
        },
        "faceGeoData21": {
            "nickname": "GeometryData21",
            "tooltip": "Geometry data point 21."
        },
        "faceGeoData22": {
            "nickname": "GeometryData22",
            "tooltip": "Geometry data point 22."
        },
        "faceGeoData23": {
            "nickname": "GeometryData23",
            "tooltip": "Geometry data point 23."
        },
        "faceGeoData24": {
            "nickname": "GeometryData24",
            "tooltip": "Geometry data point 24."
        },
        "faceGeoData25": {
            "nickname": "GeometryData25",
            "tooltip": "Geometry data point 25."
        },
        "faceGeoData26": {
            "nickname": "GeometryData26",
            "tooltip": "Geometry data point 26."
        },
        "faceGeoData27": {
            "nickname": "GeometryData27",
            "tooltip": "Geometry data point 27."
        },
        "faceGeoData28": {
            "nickname": "GeometryData28",
            "tooltip": "Geometry data point 28."
        },
        "faceGeoData29": {
            "nickname": "GeometryData29",
            "tooltip": "Geometry data point 29."
        },
        "faceGeoData30": {
            "nickname": "GeometryData30",
            "tooltip": "Geometry data point 30."
        },
        "faceGeoData31": {
            "nickname": "GeometryData31",
            "tooltip": "Geometry data point 31."
        },
        "faceGeoData32": {
            "nickname": "GeometryData32",
            "tooltip": "Geometry data point 32."
        },
        "faceGeoData33": {
            "nickname": "GeometryData33",
            "tooltip": "Geometry data point 33."
        },
        "faceGeoData34": {
            "nickname": "GeometryData34",
            "tooltip": "Geometry data point 34."
        },
        "faceGeoData35": {
            "nickname": "GeometryData35",
            "tooltip": "Geometry data point 35."
        },
        "faceGeoData36": {
            "nickname": "GeometryData36",
            "tooltip": "Geometry data point 36."
        },
        "faceGeoData37": {
            "nickname": "GeometryData37",
            "tooltip": "Geometry data point 37."
        },
        "faceGeoData38": {
            "nickname": "GeometryData38",
            "tooltip": "Geometry data point 38."
        },
        "faceGeoData39": {
            "nickname": "GeometryData39",
            "tooltip": "Geometry data point 39."
        },
        "faceGeoData40": {
            "nickname": "GeometryData40",
            "tooltip": "Geometry data point 40."
        },
        "faceGeoData41": {
            "nickname": "GeometryData41",
            "tooltip": "Geometry data point 41."
        },
        "faceGeoData42": {
            "nickname": "GeometryData42",
            "tooltip": "Geometry data point 42."
        },
        "faceGeoData43": {
            "nickname": "GeometryData43",
            "tooltip": "Geometry data point 43."
        },
        "faceGeoData44": {
            "nickname": "GeometryData44",
            "tooltip": "Geometry data point 44."
        },
        "faceGeoData45": {
            "nickname": "GeometryData45",
            "tooltip": "Geometry data point 45."
        },
        "faceGeoData46": {
            "nickname": "GeometryData46",
            "tooltip": "Geometry data point 46."
        },
        "faceGeoData47": {
            "nickname": "GeometryData47",
            "tooltip": "Geometry data point 47."
        },
        "faceGeoData48": {
            "nickname": "GeometryData48",
            "tooltip": "Geometry data point 48."
        },
        "faceGeoData49": {
            "nickname": "GeometryData49",
            "tooltip": "Geometry data point 49."
        },
        "faceTexData00": {
            "nickname": "TextureData00",
            "tooltip": "Texture data point 0."
        },
        "faceTexData01": {
            "nickname": "TextureData01",
            "tooltip": "Texture data point 1."
        },
        "faceTexData02": {
            "nickname": "TextureData02",
            "tooltip": "Texture data point 2."
        },
        "faceTexData03": {
            "nickname": "TextureData03",
            "tooltip": "Texture data point 3."
        },
        "faceTexData04": {
            "nickname": "TextureData04",
            "tooltip": "Texture data point 4."
        },
        "faceTexData05": {
            "nickname": "TextureData05",
            "tooltip": "Texture data point 5."
        },
        "faceTexData06": {
            "nickname": "TextureData06",
            "tooltip": "Texture data point 6."
        },
        "faceTexData07": {
            "nickname": "TextureData07",
            "tooltip": "Texture data point 7."
        },
        "faceTexData08": {
            "nickname": "TextureData08",
            "tooltip": "Texture data point 8."
        },
        "faceTexData09": {
            "nickname": "TextureData09",
            "tooltip": "Texture data point 9."
        },
        "faceTexData10": {
            "nickname": "TextureData10",
            "tooltip": "Texture data point 10."
        },
        "faceTexData11": {
            "nickname": "TextureData11",
            "tooltip": "Texture data point 11."
        },
        "faceTexData12": {
            "nickname": "TextureData12",
            "tooltip": "Texture data point 12."
        },
        "faceTexData13": {
            "nickname": "TextureData13",
            "tooltip": "Texture data point 13."
        },
        "faceTexData14": {
            "nickname": "TextureData14",
            "tooltip": "Texture data point 14."
        },
        "faceTexData15": {
            "nickname": "TextureData15",
            "tooltip": "Texture data point 15."
        },
        "faceTexData16": {
            "nickname": "TextureData16",
            "tooltip": "Texture data point 16."
        },
        "faceTexData17": {
            "nickname": "TextureData17",
            "tooltip": "Texture data point 17."
        },
        "faceTexData18": {
            "nickname": "TextureData18",
            "tooltip": "Texture data point 18."
        },
        "faceTexData19": {
            "nickname": "TextureData19",
            "tooltip": "Texture data point 19."
        },
        "faceTexData20": {
            "nickname": "TextureData20",
            "tooltip": "Texture data point 20."
        },
        "faceTexData21": {
            "nickname": "TextureData21",
            "tooltip": "Texture data point 21."
        },
        "faceTexData22": {
            "nickname": "TextureData22",
            "tooltip": "Texture data point 22."
        },
        "faceTexData23": {
            "nickname": "TextureData23",
            "tooltip": "Texture data point 23."
        },
        "faceTexData24": {
            "nickname": "TextureData24",
            "tooltip": "Texture data point 24."
        },
        "faceTexData25": {
            "nickname": "TextureData25",
            "tooltip": "Texture data point 25."
        },
        "faceTexData26": {
            "nickname": "TextureData26",
            "tooltip": "Texture data point 26."
        },
        "faceTexData27": {
            "nickname": "TextureData27",
            "tooltip": "Texture data point 27."
        },
        "faceTexData28": {
            "nickname": "TextureData28",
            "tooltip": "Texture data point 28."
        },
        "faceTexData29": {
            "nickname": "TextureData29",
            "tooltip": "Texture data point 29."
        },
        "faceTexData30": {
            "nickname": "TextureData30",
            "tooltip": "Texture data point 30."
        },
        "faceTexData31": {
            "nickname": "TextureData31",
            "tooltip": "Texture data point 31."
        },
        "faceTexData32": {
            "nickname": "TextureData32",
            "tooltip": "Texture data point 32."
        },
        "faceTexData33": {
            "nickname": "TextureData33",
            "tooltip": "Texture data point 33."
        },
        "faceTexData34": {
            "nickname": "TextureData34",
            "tooltip": "Texture data point 34."
        },
        "faceTexData35": {
            "nickname": "TextureData35",
            "tooltip": "Texture data point 35."
        },
        "faceTexData36": {
            "nickname": "TextureData36",
            "tooltip": "Texture data point 36."
        },
        "faceTexData37": {
            "nickname": "TextureData37",
            "tooltip": "Texture data point 37."
        },
        "faceTexData38": {
            "nickname": "TextureData38",
            "tooltip": "Texture data point 38."
        },
        "faceTexData39": {
            "nickname": "TextureData39",
            "tooltip": "Texture data point 39."
        },
        "faceTexData40": {
            "nickname": "TextureData40",
            "tooltip": "Texture data point 40."
        },
        "faceTexData41": {
            "nickname": "TextureData41",
            "tooltip": "Texture data point 41."
        },
        "faceTexData42": {
            "nickname": "TextureData42",
            "tooltip": "Texture data point 42."
        },
        "faceTexData43": {
            "nickname": "TextureData43",
            "tooltip": "Texture data point 43."
        },
        "faceTexData44": {
            "nickname": "TextureData44",
            "tooltip": "Texture data point 44."
        },
        "faceTexData45": {
            "nickname": "TextureData45",
            "tooltip": "Texture data point 45."
        },
        "faceTexData46": {
            "nickname": "TextureData46",
            "tooltip": "Texture data point 46."
        },
        "faceTexData47": {
            "nickname": "TextureData47",
            "tooltip": "Texture data point 47."
        },
        "faceTexData48": {
            "nickname": "TextureData48",
            "tooltip": "Texture data point 48."
        },
        "faceTexData49": {
            "nickname": "TextureData49",
            "tooltip": "Texture data point 49."
        },
        "hairStyle": {
            "nickname": "HairStyle",
            "tooltip": "Hairstyle of face."
        },
        "hairColor_Base ": {
            "nickname": "BaseHairColor",
            "tooltip": "Base hair color of face."
        },
        "hairColor_R ": {
            "nickname": "HairColorRed",
            "tooltip": "Red channel of hair color (0 to 255)."
        },
        "hairColor_G ": {
            "nickname": "HairColorGreen",
            "tooltip": "Greenchannel of hair color (0 to 255)."
        },
        "hairColor_B ": {
            "nickname": "HairColorBlue",
            "tooltip": "Blue channel of hair color (0 to 255)."
        },
        "eyeColor_R": {
            "nickname": "EyeColorRed",
            "tooltip": "Red channel of eye color (0 to 255)."
        },
        "eyeColor_G": {
            "nickname": "EyeColorGreen",
            "tooltip": "Green channel of eye color (0 to 255)."
        },
        "eyeColor_B": {
            "nickname": "EyeColorBlue",
            "tooltip": "Blue channel of eye color (0 to 255)."
        },
        "pad[20]": {
            "nickname": "_Pad0",
            "tooltip": "Null padding (20 bytes)."
        }
    },
    "FOG_BANK": {
        "fogBeginZ": {
            "nickname": "FogStartDistance",
            "tooltip": "Distance (m) at which fog begins."
        },
        "fogEndZ": {
            "nickname": "FogEndDistance",
            "tooltip": "Distance (m) at which fog ends."
        },
        "degRotZ": {
            "nickname": "RotationZ",
            "tooltip": "Rotation of fog around the Z axis."
        },
        "degRotW": {
            "nickname": "RotationW",
            "tooltip": "Rotation of fog around the W axis."
        },
        "colR": {
            "nickname": "Red",
            "tooltip": "Red color channel (0-255)."
        },
        "colG": {
            "nickname": "Green",
            "tooltip": "Green color channel (0-255)."
        },
        "colB": {
            "nickname": "Blue",
            "tooltip": "Blue color channel (0-255)."
        },
        "colA": {
            "nickname": "Alpha",
            "tooltip": "Alpha channel (0-255)."
        }
    },
    "GAME_AREA_PARAM_ST": {
        "bonusSoul_single": {
            "nickname": "SingleplayerSoulReward",
            "tooltip": "Souls awarded (after delay) when boss is defeated with no summons."
        },
        "bonusSoul_multi": {
            "nickname": "MultiplayerSoulReward",
            "tooltip": "Souls awarded to each player (after delay) when boss is defeated with summons."
        },
        "humanityPointCountFlagIdTop": {
            "nickname": "FirstHumanityFlag",
            "tooltip": "First flag for recording number of humanity drops awarded in boss's area.",
            "game_type": "Flag"
        },
        "humanityDropPoint1": {
            "nickname": "HumanityDropPoint1",
            "tooltip": "Number of 'points' needed from killing enemies in the boss area for first Humanity.",
            "default": 65535
        },
        "humanityDropPoint2": {
            "nickname": "HumanityDropPoint2",
            "tooltip": "Number of 'points' needed from killing enemies in the boss area for second Humanity.",
            "default": 65535
        },
        "humanityDropPoint3": {
            "nickname": "HumanityDropPoint3",
            "tooltip": "Number of 'points' needed from killing enemies in the boss area for third Humanity.",
            "default": 65535
        },
        "humanityDropPoint4": {
            "nickname": "HumanityDropPoint4",
            "tooltip": "Number of 'points' needed from killing enemies in the boss area for fourth Humanity.",
            "default": 65535
        },
        "humanityDropPoint5": {
            "nickname": "HumanityDropPoint5",
            "tooltip": "Number of 'points' needed from killing enemies in the boss area for fifth Humanity.",
            "default": 65535
        },
        "humanityDropPoint6": {
            "nickname": "HumanityDropPoint6",
            "tooltip": "Number of 'points' needed from killing enemies in the boss area for sixth Humanity.",
            "default": 65535
        },
        "humanityDropPoint7": {
            "nickname": "HumanityDropPoint7",
            "tooltip": "Number of 'points' needed from killing enemies in the boss area for seventh Humanity.",
            "default": 65535
        },
        "humanityDropPoint8": {
            "nickname": "HumanityDropPoint8",
            "tooltip": "Number of 'points' needed from killing enemies in the boss area for eighth Humanity.",
            "default": 65535
        },
        "humanityDropPoint9": {
            "nickname": "HumanityDropPoint9",
            "tooltip": "Number of 'points' needed from killing enemies in the boss area for ninth Humanity.",
            "default": 65535
        },
        "humanityDropPoint10": {
            "nickname": "HumanityDropPoint10",
            "tooltip": "Number of 'points' needed from killing enemies in the boss area for final Humanity.",
            "default": 65535
        }
    },
    "HIT_MTRL_PARAM_ST": {
        "aiVolumeRate": {
            "nickname": "SoundRadiusMultiplier",
            "tooltip": "Multiplier for foot sound effect radius on this terrain."
        },
        "spEffectIdOnHit0": {
            "nickname": "SpecialEffect1",
            "tooltip": "Special effect applied to character walking on terrain (first of two).",
            "game_type": "SpecialEffectParam"
        },
        "spEffectIdOnHit1": {
            "nickname": "SpecialEffect2",
            "tooltip": "Special effect applied to character walking on terrain (second of two).",
            "game_type": "SpecialEffectParam"
        },
        "footEffectHeightType:2": {
            "nickname": "FootEffectHeightType",
            "tooltip": "Determines the height at which foot impact effects are generated."
        },
        "footEffectDirType:2": {
            "nickname": "FootEffectDirectionType",
            "tooltip": "Determines the direction of foot impact effects."
        },
        "floorHeightType:2": {
            "nickname": "TerrainHeightType",
            "tooltip": "Determines distance from floor collision at which effects are applied."
        },
        "pad0[3]": {
            "nickname": "_Pad0",
            "tooltip": "Null padding (3 bytes)."
        }
    },
    "ITEMLOT_PARAM_ST": {
        "lotItemId01": {
            "nickname": "Item1ID",
            "tooltip": "TODO",
            "dynamic_callback": "ItemLotReference(1)"
        },
        "lotItemId02": {
            "nickname": "Item2ID",
            "tooltip": "TODO",
            "dynamic_callback": "ItemLotReference(2)"
        },
        "lotItemId03": {
            "nickname": "Item3ID",
            "tooltip": "TODO",
            "dynamic_callback": "ItemLotReference(3)"
        },
        "lotItemId04": {
            "nickname": "Item4ID",
            "tooltip": "TODO",
            "dynamic_callback": "ItemLotReference(4)"
        },
        "lotItemId05": {
            "nickname": "Item5ID",
            "tooltip": "TODO",
            "dynamic_callback": "ItemLotReference(5)"
        },
        "lotItemId06": {
            "nickname": "Item6ID",
            "tooltip": "TODO",
            "dynamic_callback": "ItemLotReference(6)"
        },
        "lotItemId07": {
            "nickname": "Item7ID",
            "tooltip": "TODO",
            "dynamic_callback": "ItemLotReference(7)"
        },
        "lotItemId08": {
            "nickname": "Item8ID",
            "tooltip": "TODO",
            "dynamic_callback": "ItemLotReference(8)"
        },
        "lotItemCategory01": {
            "nickname": "Item1Category",
            "tooltip": "Type of item (slot 1)."
        },
        "lotItemCategory02": {
            "nickname": "Item2Category",
            "tooltip": "Type of item (slot 2)."
        },
        "lotItemCategory03": {
            "nickname": "Item3Category",
            "tooltip": "Type of item (slot 3)."
        },
        "lotItemCategory04": {
            "nickname": "Item4Category",
            "tooltip": "Type of item (slot 4)."
        },
        "lotItemCategory05": {
            "nickname": "Item5Category",
            "tooltip": "Type of item (slot 5)."
        },
        "lotItemCategory06": {
            "nickname": "Item6Category",
            "tooltip": "Type of item (slot 6)."
        },
        "lotItemCategory07": {
            "nickname": "Item7Category",
            "tooltip": "Type of item (slot 7)."
        },
        "lotItemCategory08": {
            "nickname": "Item8Category",
            "tooltip": "Type of item (slot 8)."
        },
        "lotItemBasePoint01": {
            "nickname": "Item1ChancePoints",
            "tooltip": "Relative chance (divided by total chance points across all eight slots) that this item will be dropped."
        },
        "lotItemBasePoint02": {
            "nickname": "Item2ChancePoints",
            "tooltip": "Relative chance (divided by total chance points across all eight slots) that this item will be dropped."
        },
        "lotItemBasePoint03": {
            "nickname": "Item3ChancePoints",
            "tooltip": "Relative chance (divided by total chance points across all eight slots) that this item will be dropped."
        },
        "lotItemBasePoint04": {
            "nickname": "Item4ChancePoints",
            "tooltip": "Relative chance (divided by total chance points across all eight slots) that this item will be dropped."
        },
        "lotItemBasePoint05": {
            "nickname": "Item5ChancePoints",
            "tooltip": "Relative chance (divided by total chance points across all eight slots) that this item will be dropped."
        },
        "lotItemBasePoint06": {
            "nickname": "Item6ChancePoints",
            "tooltip": "Relative chance (divided by total chance points across all eight slots) that this item will be dropped."
        },
        "lotItemBasePoint07": {
            "nickname": "Item7ChancePoints",
            "tooltip": "Relative chance (divided by total chance points across all eight slots) that this item will be dropped."
        },
        "lotItemBasePoint08": {
            "nickname": "Item8ChancePoints",
            "tooltip": "Relative chance (divided by total chance points across all eight slots) that this item will be dropped."
        },
        "cumulateLotPoint01": {
            "nickname": "Item1CumulativePoints",
            "tooltip": "Points that will be cumulatively added to this slot's chance points every time the item lot is rolled. This"
        },
        "cumulateLotPoint02": {
            "nickname": "Item2CumulativePoints",
            "tooltip": "Points that will be cumulatively added to this slot's chance points every time the item lot is rolled. This"
        },
        "cumulateLotPoint03": {
            "nickname": "Item3CumulativePoints",
            "tooltip": "Points that will be cumulatively added to this slot's chance points every time the item lot is rolled. This"
        },
        "cumulateLotPoint04": {
            "nickname": "Item4CumulativePoints",
            "tooltip": "Points that will be cumulatively added to this slot's chance points every time the item lot is rolled. This"
        },
        "cumulateLotPoint05": {
            "nickname": "Item5CumulativePoints",
            "tooltip": "Points that will be cumulatively added to this slot's chance points every time the item lot is rolled. This"
        },
        "cumulateLotPoint06": {
            "nickname": "Item6CumulativePoints",
            "tooltip": "Points that will be cumulatively added to this slot's chance points every time the item lot is rolled. This"
        },
        "cumulateLotPoint07": {
            "nickname": "Item7CumulativePoints",
            "tooltip": "Points that will be cumulatively added to this slot's chance points every time the item lot is rolled. This"
        },
        "cumulateLotPoint08": {
            "nickname": "Item8CumulativePoints",
            "tooltip": "Points that will be cumulatively added to this slot's chance points every time the item lot is rolled. This"
        },
        "getItemFlagId01": {
            "nickname": "Item1Flag",
            "tooltip": "Flag that will be enabled when this exact item slot is dropped (and presumably picked up). Never used.",
            "game_type": "Flag"
        },
        "getItemFlagId02": {
            "nickname": "Item2Flag",
            "tooltip": "Flag that will be enabled when this exact item slot is dropped (and presumably picked up). Never used.",
            "game_type": "Flag"
        },
        "getItemFlagId03": {
            "nickname": "Item3Flag",
            "tooltip": "Flag that will be enabled when this exact item slot is dropped (and presumably picked up). Never used.",
            "game_type": "Flag"
        },
        "getItemFlagId04": {
            "nickname": "Item4Flag",
            "tooltip": "Flag that will be enabled when this exact item slot is dropped (and presumably picked up). Never used.",
            "game_type": "Flag"
        },
        "getItemFlagId05": {
            "nickname": "Item5Flag",
            "tooltip": "Flag that will be enabled when this exact item slot is dropped (and presumably picked up). Never used.",
            "game_type": "Flag"
        },
        "getItemFlagId06": {
            "nickname": "Item6Flag",
            "tooltip": "Flag that will be enabled when this exact item slot is dropped (and presumably picked up). Never used.",
            "game_type": "Flag"
        },
        "getItemFlagId07": {
            "nickname": "Item7Flag",
            "tooltip": "Flag that will be enabled when this exact item slot is dropped (and presumably picked up). Never used.",
            "game_type": "Flag"
        },
        "getItemFlagId08": {
            "nickname": "Item8Flag",
            "tooltip": "Flag that will be enabled when this exact item slot is dropped (and presumably picked up). Never used.",
            "game_type": "Flag"
        },
        "getItemFlagId": {
            "nickname": "ItemFlag",
            "tooltip": "Flag enabled when any item from this item lot is picked up.",
            "game_type": "Flag"
        },
        "cumulateNumFlagId": {
            "nickname": "FirstCumulativeFlag",
            "tooltip": "First of eight consecutive flags used to store the cumulative points for this item lot.",
            "game_type": "Flag"
        },
        "cumulateNumMax": {
            "nickname": "MaxCumulativeAdditions",
            "tooltip": "Maximum number of times that cumulative points will be added to the total. I suspect that the cumulative slot may be awarded automatically after this; if not, I don't know how the Symbol of Avarice always drops after all seven Mimics are killed."
        },
        "lotItem_Rarity": {
            "nickname": "ItemLotRarity",
            "tooltip": "Overall rarity of item lot, from 0 to 3. Used fairly consistently, but seems to have no effect. Set to 2 for all character drops except Crystal Lizards, who have 3."
        },
        "lotItemNum01": {
            "nickname": "Item1Count",
            "tooltip": "Count of item (slot 1)."
        },
        "lotItemNum02": {
            "nickname": "Item2Count",
            "tooltip": "Count of item (slot 2)."
        },
        "lotItemNum03": {
            "nickname": "Item3Count",
            "tooltip": "Count of item (slot 3)."
        },
        "lotItemNum04": {
            "nickname": "Item4Count",
            "tooltip": "Count of item (slot 4)."
        },
        "lotItemNum05": {
            "nickname": "Item5Count",
            "tooltip": "Count of item (slot 5)."
        },
        "lotItemNum06": {
            "nickname": "Item6Count",
            "tooltip": "Count of item (slot 6)."
        },
        "lotItemNum07": {
            "nickname": "Item7Count",
            "tooltip": "Count of item (slot 7)."
        },
        "lotItemNum08": {
            "nickname": "Item8Count",
            "tooltip": "Count of item (slot 8)."
        },
        "enableLuck01:1": {
            "nickname": "Item1LuckEnabled",
            "tooltip": "If True, increased player luck will *reduce* the chance points of this slot. Usually used on the empty item slot so that rarer items have a relatively better chance of dropping."
        },
        "enableLuck02:1": {
            "nickname": "Item2LuckEnabled",
            "tooltip": "If True, increased player luck will *reduce* the chance points of this slot. Usually used on the empty item slot so that rarer items have a relatively better chance of dropping."
        },
        "enableLuck03:1": {
            "nickname": "Item3LuckEnabled",
            "tooltip": "If True, increased player luck will *reduce* the chance points of this slot. Usually used on the empty item slot so that rarer items have a relatively better chance of dropping."
        },
        "enableLuck04:1": {
            "nickname": "Item4LuckEnabled",
            "tooltip": "If True, increased player luck will *reduce* the chance points of this slot. Usually used on the empty item slot so that rarer items have a relatively better chance of dropping."
        },
        "enableLuck05:1": {
            "nickname": "Item5LuckEnabled",
            "tooltip": "If True, increased player luck will *reduce* the chance points of this slot. Usually used on the empty item slot so that rarer items have a relatively better chance of dropping."
        },
        "enableLuck06:1": {
            "nickname": "Item6LuckEnabled",
            "tooltip": "If True, increased player luck will *reduce* the chance points of this slot. Usually used on the empty item slot so that rarer items have a relatively better chance of dropping."
        },
        "enableLuck07:1": {
            "nickname": "Item7LuckEnabled",
            "tooltip": "If True, increased player luck will *reduce* the chance points of this slot. Usually used on the empty item slot so that rarer items have a relatively better chance of dropping."
        },
        "enableLuck08:1": {
            "nickname": "Item8LuckEnabled",
            "tooltip": "If True, increased player luck will *reduce* the chance points of this slot. Usually used on the empty item slot so that rarer items have a relatively better chance of dropping."
        },
        "cumulateReset01:1": {
            "nickname": "Item1ResetCumulativePointsOnDrop",
            "tooltip": "If True, all cumulative points in this slot will be reset when the slot is actually dropped."
        },
        "cumulateReset02:1": {
            "nickname": "Item2ResetCumulativePointsOnDrop",
            "tooltip": "If True, all cumulative points in this slot will be reset when the slot is actually dropped."
        },
        "cumulateReset03:1": {
            "nickname": "Item3ResetCumulativePointsOnDrop",
            "tooltip": "If True, all cumulative points in this slot will be reset when the slot is actually dropped."
        },
        "cumulateReset04:1": {
            "nickname": "Item4ResetCumulativePointsOnDrop",
            "tooltip": "If True, all cumulative points in this slot will be reset when the slot is actually dropped."
        },
        "cumulateReset05:1": {
            "nickname": "Item5ResetCumulativePointsOnDrop",
            "tooltip": "If True, all cumulative points in this slot will be reset when the slot is actually dropped."
        },
        "cumulateReset06:1": {
            "nickname": "Item6ResetCumulativePointsOnDrop",
            "tooltip": "If True, all cumulative points in this slot will be reset when the slot is actually dropped."
        },
        "cumulateReset07:1": {
            "nickname": "Item7ResetCumulativePointsOnDrop",
            "tooltip": "If True, all cumulative points in this slot will be reset when the slot is actually dropped."
        },
        "cumulateReset08:1": {
            "nickname": "Item8ResetCumulativePointsOnDrop",
            "tooltip": "If True, all cumulative points in this slot will be reset when the slot is actually dropped."
        }
    },
    "LENS_FLARE_BANK": {
        "texId": {
            "nickname": "LensFlareTextureID",
            "tooltip": "Texture ID of lens flare (texture name format is 'lensflare_XX'). -1 means disabled."
        },
        "isFlare": {
            "nickname": "IsLensFlare",
            "tooltip": "Flare if enabled, or 'ghost' if disabled."
        },
        "enableRoll": {
            "nickname": "EnableRotation",
            "tooltip": "Allows lens flare texture to rotate with camera."
        },
        "enableScale": {
            "nickname": "EnableScaling",
            "tooltip": "Allows lens flare texture to change scale with camera."
        },
        "locateDistRate": {
            "nickname": "PositionRatio",
            "tooltip": "Relative position of lens flare between light source (0.0) and center of screen (1.0)."
        },
        "texScale": {
            "nickname": "TextureScale",
            "tooltip": "Base scaling of lens flare texture."
        },
        "colR": {
            "nickname": "TextureRed",
            "tooltip": "Red channel (0-255) of lens flare texture."
        },
        "colG": {
            "nickname": "TextureGreen",
            "tooltip": "Green channel (0-255) of lens flare texture."
        },
        "colB": {
            "nickname": "TextureBlue",
            "tooltip": "Blue channel (0-255) of lens flare texture."
        },
        "colA": {
            "nickname": "TextureAlpha",
            "tooltip": "Alpha channel (0-255) of lens flare texture."
        }
    },
    "LENS_FLARE_EX_BANK": {
        "lightDegRotX": {
            "nickname": "LensFlareSourceRotationX",
            "tooltip": "Rotation (X-axis) of visible light source (e.g. sun) that causes lens flares."
        },
        "lightDegRotY": {
            "nickname": "LensFlareSourceRotationY",
            "tooltip": "Rotation (Y-axis) of visible light source (e.g. sun) that causes lens flares."
        },
        "colR": {
            "nickname": "LensFlareSourceRed",
            "tooltip": "Red channel (0-255) of visible light source (e.g. sun)."
        },
        "colG": {
            "nickname": "LensFlareSourceGreen",
            "tooltip": "Green channel (0-255) of visible light source (e.g. sun)."
        },
        "colB": {
            "nickname": "LensFlareSourceBlue",
            "tooltip": "Blue channel (0-255) of visible light source (e.g. sun)."
        },
        "colA": {
            "nickname": "LensFlareSourceAlpha",
            "tooltip": "Alpha channel (0-255) of visible light source (e.g. sun)."
        },
        "lightDist": {
            "nickname": "LensFlareSourceDistance",
            "tooltip": "Distance of visible light source (e.g. sun). Not sure about the units."
        }
    },
    "LIGHT_BANK": {
        "degRotX_0": {
            "nickname": "BakedLight0RotationX",
            "tooltip": "Rotation (X-axis) of ambient (parallel) light source 0."
        },
        "degRotY_0": {
            "nickname": "BakedLight0RotationY",
            "tooltip": "Rotation (Y-axis) of ambient (parallel) light source 0."
        },
        "colR_0": {
            "nickname": "BakedLight0Red",
            "tooltip": "Red channel (0-255) of ambient (parallel) light source 0."
        },
        "colG_0": {
            "nickname": "BakedLight0Green",
            "tooltip": "Green channel (0-255) of ambient (parallel) light source 0."
        },
        "colB_0": {
            "nickname": "BakedLight0Blue",
            "tooltip": "Blue channel (0-255) of ambient (parallel) light source 0."
        },
        "colA_0": {
            "nickname": "BakedLight0Alpha",
            "tooltip": "Alpha channel (0-255) of ambient (parallel) light source 0."
        },
        "degRotX_1": {
            "nickname": "BakedLight1RotationX",
            "tooltip": "Rotation (X-axis) of ambient (parallel) light source 1."
        },
        "degRotY_1": {
            "nickname": "BakedLight1RotationY",
            "tooltip": "Rotation (Y-axis) of ambient (parallel) light source 1."
        },
        "colR_1": {
            "nickname": "BakedLight1Red",
            "tooltip": "Red channel (0-255) of ambient (parallel) light source 1."
        },
        "colG_1": {
            "nickname": "BakedLight1Green",
            "tooltip": "Green channel (0-255) of ambient (parallel) light source 1."
        },
        "colB_1": {
            "nickname": "BakedLight1Blue",
            "tooltip": "Blue channel (0-255) of ambient (parallel) light source 1."
        },
        "colA_1": {
            "nickname": "BakedLight1Alpha",
            "tooltip": "Alpha channel (0-255) of ambient (parallel) light source 1."
        },
        "degRotX_2": {
            "nickname": "BakedLight2RotationX",
            "tooltip": "Rotation (X-axis) of ambient (parallel) light source 2."
        },
        "degRotY_2": {
            "nickname": "BakedLight2RotationY",
            "tooltip": "Rotation (Y-axis) of ambient (parallel) light source 2."
        },
        "colR_2": {
            "nickname": "BakedLight2Red",
            "tooltip": "Red channel (0-255) of ambient (parallel) light source 2."
        },
        "colG_2": {
            "nickname": "BakedLight2Green",
            "tooltip": "Green channel (0-255) of ambient (parallel) light source 2."
        },
        "colB_2": {
            "nickname": "BakedLight2Blue",
            "tooltip": "Blue channel (0-255) of ambient (parallel) light source 2."
        },
        "colA_2": {
            "nickname": "BakedLight2Alpha",
            "tooltip": "Alpha channel (0-255) of ambient (parallel) light source 2."
        },
        "colR_u": {
            "nickname": "TopDownLightRed",
            "tooltip": "Red channel (0-255) of ambient light of upward-facing surfaces. This has the largest effect for surfaces oriented exactly upward (e.g. floors) and decreases as a function of orientation until the surface is oriented sideways (e.g. walls)."
        },
        "colG_u": {
            "nickname": "TopDownLightGreen",
            "tooltip": "Green channel (0-255) of ambient light of upward-facing surfaces. This has the largest effect for surfaces oriented exactly upward (e.g. floors) and decreases as a function of orientation until the surface is oriented sideways (e.g. walls)."
        },
        "colB_u": {
            "nickname": "TopDownLightBlue",
            "tooltip": "Blue channel (0-255) of ambient light of upward-facing surfaces. This has the largest effect for surfaces oriented exactly upward (e.g. floors) and decreases as a function of orientation until the surface is oriented sideways (e.g. walls)."
        },
        "colA_u": {
            "nickname": "TopDownLightAlpha",
            "tooltip": "Alpha channel (0-255) of ambient light of upward-facing surfaces. This has the largest effect for surfaces oriented exactly upward (e.g. floors) and decreases as a function of orientation until the surface is oriented sideways (e.g. walls)."
        },
        "colR_d": {
            "nickname": "BottomUpLightRed",
            "tooltip": "Red channel (0-255) of ambient light of downward-facing surfaces. This has the largest effect for surfaces oriented exactly downward (e.g. ceilings) and decreases as a function of orientation until the surface is oriented sideways (e.g. walls)."
        },
        "colG_d": {
            "nickname": "BottomUpLightGreen",
            "tooltip": "Green channel (0-255) of ambient light of downward-facing surfaces. This has the largest effect for surfaces oriented exactly downward (e.g. ceilings) and decreases as a function of orientation until the surface is oriented sideways (e.g. walls)."
        },
        "colB_d": {
            "nickname": "BottomUpLightBlue",
            "tooltip": "Blue channel (0-255) of ambient light of downward-facing surfaces. This has the largest effect for surfaces oriented exactly downward (e.g. ceilings) and decreases as a function of orientation until the surface is oriented sideways (e.g. walls)."
        },
        "colA_d": {
            "nickname": "BottomUpLightAlpha",
            "tooltip": "Alpha channel (0-255) of ambient light of downward-facing surfaces. This has the largest effect for surfaces oriented exactly downward (e.g. ceilings) and decreases as a function of orientation until the surface is oriented sideways (e.g. walls)."
        },
        "degRotX_s": {
            "nickname": "SpecularBakedLightRotationX",
            "tooltip": "Rotation (X-axis) of specular ambient (parallel) light source."
        },
        "degRotY_s": {
            "nickname": "SpecularBakedLightRotationY",
            "tooltip": "Rotation (Y-axis) of specular ambient (parallel) light source."
        },
        "colR_s": {
            "nickname": "SpecularBakedLightRed",
            "tooltip": "Red channel (0-255) of specular ambient light source."
        },
        "colG_s": {
            "nickname": "SpecularBakedLightGreen",
            "tooltip": "Green channel (0-255) of specular ambient light source."
        },
        "colB_s": {
            "nickname": "SpecularBakedLightBlue",
            "tooltip": "Blue channel (0-255) of specular ambient light source."
        },
        "colA_s": {
            "nickname": "SpecularBakedLightAlpha",
            "tooltip": "Alpha channel (0-255) of specular ambient light source."
        },
        "envDif_colR": {
            "nickname": "DiffuseLightRed",
            "tooltip": "Red channel (0-255) of base diffuse ambient light of surfaces."
        },
        "envDif_colG": {
            "nickname": "DiffuseLightGreen",
            "tooltip": "Green channel (0-255) of base diffuse ambient light of surfaces."
        },
        "envDif_colB": {
            "nickname": "DiffuseLightBlue",
            "tooltip": "Blue channel (0-255) of base diffuse ambient light of surfaces."
        },
        "envDif_colA": {
            "nickname": "DiffuseLightAlpha",
            "tooltip": "Alpha channel (0-255) of base diffuse ambient light of surfaces."
        },
        "envSpc_colR": {
            "nickname": "SpecularLightRed",
            "tooltip": "Red channel (0-255) of specular ambient light of surfaces."
        },
        "envSpc_colG": {
            "nickname": "SpecularLightGreen",
            "tooltip": "Green channel (0-255) of specular ambient light of surfaces."
        },
        "envSpc_colB": {
            "nickname": "SpecularLightBlue",
            "tooltip": "Blue channel (0-255) of specular ambient light of surfaces."
        },
        "envSpc_colA": {
            "nickname": "SpecularLightAlpha",
            "tooltip": "Alpha channel (0-255) of specular ambient light of surfaces."
        },
        "envDif": {
            "nickname": "DiffuseLightTextureID",
            "tooltip": "Changing this has drastic effects on the diffuse ambient light."
        },
        "envSpc_0": {
            "nickname": "SpecularLightTextureID0",
            "tooltip": "Changing this has drastic effects on the specular ambient light."
        },
        "envSpc_1": {
            "nickname": "SpecularLightTextureID1",
            "tooltip": "Changing this has drastic effects on the specular ambient light."
        },
        "envSpc_2": {
            "nickname": "SpecularLightTextureID2",
            "tooltip": "Changing this has drastic effects on the specular ambient light."
        },
        "envSpc_3": {
            "nickname": "SpecularLightTextureID3",
            "tooltip": "Changing this has drastic effects on the specular ambient light."
        },
        "pad[2]": {
            "nickname": "_Pad0",
            "tooltip": "Null padding (2 bytes)."
        }
    },
    "LIGHT_SCATTERING_BANK": {
        "sunRotX": {
            "nickname": "LightRotationX",
            "tooltip": "Rotation (X-axis) of scattering light source."
        },
        "sunRotY": {
            "nickname": "LightRotationY",
            "tooltip": "Rotation (Y-axis) of scattering light source."
        },
        "distanceMul": {
            "nickname": "DistanceMultiplier",
            "tooltip": "Magnification (0-100) of scattering light source distance."
        },
        "sunR": {
            "nickname": "LightRed",
            "tooltip": "Red channel (0-255) of scattering light source."
        },
        "sunG": {
            "nickname": "LightGreen",
            "tooltip": "Green channel (0-255) of scattering light source."
        },
        "sunB": {
            "nickname": "LightBlue",
            "tooltip": "Blue channel (0-255) of scattering light source."
        },
        "sunA": {
            "nickname": "LightAlpha",
            "tooltip": "Alpha channel (0-255) of scattering light source."
        },
        "pad_0[2]": {
            "nickname": "_Pad0",
            "tooltip": "Null padding (2 bytes)."
        },
        "lsHGg": {
            "nickname": "ScatteringDirection",
            "tooltip": "Coefficient of scattering direction, between -1 (backward) and 1 (forward)."
        },
        "lsBetaRay": {
            "nickname": "RayleighCoefficient",
            "tooltip": "Coefficient determining how much light is lost to scattering (e.g. simulating amount of atmosphere)."
        },
        "lsBetaMie": {
            "nickname": "MieCoefficient",
            "tooltip": "Coefficient determining how much light is scattered by larger particles (e.g. simulating dust/smoke)."
        },
        "blendCoef": {
            "nickname": "ScatteringCoefficient",
            "tooltip": "Coefficient determining the overall amount of scattering from 0 (no scattering) to 100 (max scattering)."
        },
        "reflectanceR": {
            "nickname": "SurfaceReflectanceRed",
            "tooltip": "Red channel (0-255) of the effect of the scattered light as it hits surfaces."
        },
        "reflectanceG": {
            "nickname": "SurfaceReflectanceGreen",
            "tooltip": "Green channel (0-255) of the effect of the scattered light as it hits surfaces."
        },
        "reflectanceB": {
            "nickname": "SurfaceReflectanceBlue",
            "tooltip": "Blue channel (0-255) of the effect of the scattered light as it hits surfaces."
        },
        "reflectanceA": {
            "nickname": "SurfaceReflectanceAlpha",
            "tooltip": "Alpha channel (0-255) of the effect of the scattered light as it hits surfaces."
        },
        "pad_1[2]": {
            "nickname": "_Pad1",
            "tooltip": "Null padding (2 bytes)."
        }
    },
    "LOCK_CAM_PARAM_ST": {
        "camDistTarget": {
            "nickname": "CameraDistanceFromTarget",
            "tooltip": "Distance maintained from target by camera in meters. (Default value is 4.)"
        },
        "rotRangeMinX": {
            "nickname": "MinRotationElevation",
            "tooltip": "Minimum angle of elevation (X-axis rotation) permitted for camera."
        },
        "lockRotXShiftRatio": {
            "nickname": "LockElevationShiftRatio",
            "tooltip": "'Lock X-rotation shift ratio (0.0 to 1.0).' Unclear effect. Default value is 0.6."
        },
        "chrOrgOffset_Y": {
            "nickname": "CharacterVerticalOffset",
            "tooltip": "Vertical offset of camera target from character's base. Default value is 1.42."
        },
        "chrLockRangeMaxRadius": {
            "nickname": "MaxDistanceFromCharacter",
            "tooltip": "Maximum distance ('radius') of camera from character in meters. Default value is 15; only other value used is 7."
        },
        "camFovY": {
            "nickname": "VerticalFieldOfView",
            "tooltip": "Vertical field of view of camera in degrees. Default value is 43. Never goes above 48 (Lost Izalith)."
        },
        "pad[8]": {
            "nickname": "_Pad0",
            "tooltip": "Null padding (8 bytes)."
        }
    },
    "LOD_BANK": {
        "lv01_BorderDist": {
            "nickname": "lv01_BorderDist",
            "tooltip": "TOOLTIP-TODO"
        },
        "lv01_PlayDist": {
            "nickname": "lv01_PlayDist",
            "tooltip": "TOOLTIP-TODO"
        },
        "lv12_BorderDist": {
            "nickname": "lv12_BorderDist",
            "tooltip": "TOOLTIP-TODO"
        },
        "lv12_PlayDist": {
            "nickname": "lv12_PlayDist",
            "tooltip": "TOOLTIP-TODO"
        }
    },
    "MAGIC_PARAM_ST": {
        "yesNoDialogMessageId": {
            "nickname": "ConfirmationMessage",
            "tooltip": "Message displayed in yes/no dialog box to confirm use of spell. Requires the Yes/No menu type."
        },
        "limitCancelSpEffectId": {
            "nickname": "LimitRemoveSpecialEffect",
            "tooltip": "Unknown. Never used.",
            "game_type": "SpecialEffectParam"
        },
        "sortId": {
            "nickname": "SortIndex",
            "tooltip": "Index for automatic inventory sorting."
        },
        "refId": {
            "nickname": "ReferenceID",
            "tooltip": "TODO",
            "dynamic_callback": "MagicReference()"
        },
        "mp": {
            "nickname": "MPCost",
            "tooltip": "MP cost of spell. Unused in Dark Souls 1 (always zero)."
        },
        "stamina": {
            "nickname": "StaminaCost",
            "tooltip": "Stamina cost of spell. Always zero.",
            "default": 25
        },
        "iconId": {
            "nickname": "SpellIcon",
            "tooltip": "Spell icon texture for inventory and equipped slot.",
            "game_type": "Icon"
        },
        "behaviorId": {
            "nickname": "Behavior",
            "tooltip": "Behavior triggered by spell. Never used.",
            "game_type": "BehaviorParam"
        },
        "mtrlItemId": {
            "nickname": "RequiredGood",
            "tooltip": "Good required for use. Never used (usability is handled in Shops parameters).",
            "game_type": "GoodParam"
        },
        "replaceMagicId": {
            "nickname": "ReplaceSpell",
            "tooltip": "Spell to replace 'when the state change matches'. Never used.",
            "game_type": "SpellParam"
        },
        "maxQuantity": {
            "nickname": "BaseCastCount",
            "tooltip": "Number of spell casts. Note that some spells consume multiple casts per use (e.g. Firestorm)."
        },
        "heroPoint": {
            "nickname": "HumanityCost",
            "tooltip": "Soft humanity consumed when casting spell. Never used."
        },
        "overDexterity": {
            "nickname": "OverDexterity",
            "tooltip": "Unknown effect. Always 99."
        },
        "sfxVariationId": {
            "nickname": "VisualEffectVariation",
            "tooltip": "Visual effect variation. (I believe this alters the animation ID used for casting.)"
        },
        "slotLength": {
            "nickname": "AttunementSlotsUsed",
            "tooltip": "Number of attunement slots required to attune spell.",
            "default": 1
        },
        "requirementIntellect": {
            "nickname": "RequiredIntelligence",
            "tooltip": "Minimum intelligence required to cast spell."
        },
        "requirementFaith": {
            "nickname": "RequiredFaith",
            "tooltip": "Minimum faith required to cast spell."
        },
        "analogDexiterityMin": {
            "nickname": "MinDexterityForBonus",
            "tooltip": "Dexterity value where casting speed starts to be affected (I think). This is always 20, but apparently speed isn't actually affected until dexterity is 35."
        },
        "analogDexiterityMax": {
            "nickname": "MaxDexterityForBonus",
            "tooltip": "Dexterity value where casting speed stops being further affected (I think). Always 45, which is consistent with the observed dexterity cap."
        },
        "ezStateBehaviorType": {
            "nickname": "SpellCategory",
            "tooltip": "Type of spell."
        },
        "refCategory": {
            "nickname": "ReferenceType",
            "tooltip": "Determines if this spell triggers a Bullet or Special Effect. ('Default' is never used, but probably triggers an Attack, which is unlikely to be useful to you.)"
        },
        "spEffectCategory": {
            "nickname": "SpecialEffectCategory",
            "tooltip": "Determines what type of special effects affect the stats of this spell. (Vanilla game uses 3 for sorceries and pyromancies, and 4 for miracles.)"
        },
        "refType": {
            "nickname": "AnimationType",
            "tooltip": "Basic animation type when casting spell. The Visual Effect Variation field further refines it."
        },
        "opmeMenuType": {
            "nickname": "MenuActivated",
            "tooltip": "Menu activated (if any) when spell is cast. Only used by Homeward (Yes/No Dialog)."
        },
        "hasSpEffectType": {
            "nickname": "HasSpecialEffectType",
            "tooltip": "Determines 'the state change that needs to replace the spell ID'. Never used."
        },
        "replaceCategory": {
            "nickname": "ReplaceCategory",
            "tooltip": "Determines which existing effects this spell will replace. Only used for a few spells."
        },
        "useLimitCategory": {
            "nickname": "LimitCategory",
            "tooltip": "Only one special effect with this category can be active at once. Additional attempts to cast spells (or use goods) in this category will be prevented."
        },
        "vowType0:1": {
            "nickname": "UseableByNoCovenant",
            "tooltip": "Determines if this spell can be cast by characters with no covenant.",
            "default": true
        },
        "vowType1:1": {
            "nickname": "UseableByWayOfWhite",
            "tooltip": "Determines if this spell can be cast by characters in the Way of White.",
            "default": true
        },
        "vowType2:1": {
            "nickname": "UseableByPrincessGuard",
            "tooltip": "Determines if this spell can be cast by characters in the Princess's Guard.",
            "default": true
        },
        "vowType3:1": {
            "nickname": "UseableByWarriorsOfSunlight",
            "tooltip": "Determines if this spell can be cast by characters in the Warriors of Sunlight.",
            "default": true
        },
        "vowType4:1": {
            "nickname": "UseableByDarkwraith",
            "tooltip": "Determines if this spell can be cast by characters in the Darkwraith covenant.",
            "default": true
        },
        "vowType5:1": {
            "nickname": "UseableByPathOfTheDragon",
            "tooltip": "Determines if this spell can be cast by characters in the Path of the Dragon.",
            "default": true
        },
        "vowType6:1": {
            "nickname": "UseableByGravelordServant",
            "tooltip": "Determines if this spell can be cast by characters in the Gravelord Servants.",
            "default": true
        },
        "vowType7:1": {
            "nickname": "UseableByForestHunter",
            "tooltip": "Determines if this spell can be cast by characters in the Forest Hunters.",
            "default": true
        },
        "enable_multi:1": {
            "nickname": "UseableInMultiplayer",
            "tooltip": "Determines if this spell can be cast while multiple players are together. Only disabled for Homeward in vanilla game.",
            "default": true
        },
        "enable_multi_only:1": {
            "nickname": "DisabledOutsideMultiplayer",
            "tooltip": "Determines if this spell can ONLY be cast while multiple players are together. Always False."
        },
        "isEnchant:1": {
            "nickname": "IsWeaponBuff",
            "tooltip": "Indicates if this spell buffs your weapon."
        },
        "isShieldEnchant:1": {
            "nickname": "IsShieldBuff",
            "tooltip": "Indicates if this spell buffs your shield."
        },
        "enable_live:1": {
            "nickname": "UseableByHumans",
            "tooltip": "Determines if this spell can be cast by players who have revived to human.",
            "default": true
        },
        "enable_gray:1": {
            "nickname": "UseableByHollows",
            "tooltip": "Determines if this spell can be cast by players who have NOT revived to human.",
            "default": true
        },
        "enable_white:1": {
            "nickname": "UseableByWhitePhantoms",
            "tooltip": "Determines if this spell can be cast by White Phantoms (summons). Only disabled for Homeward and the unused Escape Death miracle in vanilla game.",
            "default": true
        },
        "enable_black:1": {
            "nickname": "UseableByBlackPhantoms",
            "tooltip": "Determines if this spell can be cast by Black Phantoms (invaders). Only disabled for Homeward and the unused Escape Death miracle in vanilla game.",
            "default": true
        },
        "disableOffline:1": {
            "nickname": "DisabledOffline",
            "tooltip": "If True, this spell cannot be cast without a network connection. Always False."
        },
        "castResonanceMagic:1": {
            "nickname": "CreateResonanceRing",
            "tooltip": "If True, using this spell will create a resonance ring to help players in other worlds."
        },
        "pad_1:6": {
            "nickname": "_BitPad0",
            "tooltip": "Null padding (6 bits)."
        },
        "vowType8:1": {
            "nickname": "UseableByDarkmoonBlade",
            "tooltip": "Determines if this spell can be cast by characters in the Blades of the Darkmoon.",
            "default": true
        },
        "vowType9:1": {
            "nickname": "UseableByChaosServant",
            "tooltip": "Determines if this spell can be cast by characters in the Chaos Servant covenant.",
            "default": true
        },
        "vowType10:1": {
            "nickname": "UseableByCovenant10",
            "tooltip": "Determines if this spell can be cast by characters in unused covenant 10.",
            "default": true
        },
        "vowType11:1": {
            "nickname": "UseableByCovenant11",
            "tooltip": "Determines if this spell can be cast by characters in unused covenant 11.",
            "default": true
        },
        "vowType12:1": {
            "nickname": "UseableByCovenant12",
            "tooltip": "Determines if this spell can be cast by characters in unused covenant 12.",
            "default": true
        },
        "vowType13:1": {
            "nickname": "UseableByCovenant13",
            "tooltip": "Determines if this spell can be cast by characters in unused covenant 13.",
            "default": true
        },
        "vowType14:1": {
            "nickname": "UseableByCovenant14",
            "tooltip": "Determines if this spell can be cast by characters in unused covenant 14.",
            "default": true
        },
        "vowType15:1": {
            "nickname": "UseableByCovenant15",
            "tooltip": "Determines if this spell can be cast by characters in unused covenant 15.",
            "default": true
        },
        "pad[2]": {
            "nickname": "_Pad0",
            "tooltip": "Null padding (2 bytes)."
        }
    },
    "MENU_PARAM_COLOR_TABLE_ST": {
        "r": {
            "nickname": "RedChannel",
            "tooltip": "Red value of RGBA color (0-255)."
        },
        "g": {
            "nickname": "GreenChannel",
            "tooltip": "Green value of RGBA color (0-255)."
        },
        "b": {
            "nickname": "BlueChannel",
            "tooltip": "Blue value of RGBA color (0-255)."
        },
        "a": {
            "nickname": "AlphaChannel",
            "tooltip": "Alpha value of RGBA color (0-255). Higher means less transparent."
        }
    },
    "MOVE_PARAM_ST": {
        "stayId": {
            "nickname": "StillAnimation",
            "tooltip": "Animation ID."
        },
        "walkF": {
            "nickname": "WalkForwardAnimatiom",
            "tooltip": "Animation ID."
        },
        "walkB": {
            "nickname": "WalkBackwardAnimation",
            "tooltip": "Animation ID."
        },
        "walkL": {
            "nickname": "StrafeLeftAnimation",
            "tooltip": "Animation ID."
        },
        "walkR": {
            "nickname": "StrafeRightAnimation",
            "tooltip": "Animation ID."
        },
        "dashF": {
            "nickname": "RunForwardAnimation",
            "tooltip": "Animation ID."
        },
        "dashB": {
            "nickname": "RunBackwardAnimation",
            "tooltip": "Animation ID."
        },
        "dashL": {
            "nickname": "StrafeRunLeftAnimation",
            "tooltip": "Animation ID."
        },
        "dashR": {
            "nickname": "StrafeRunRightAnimation",
            "tooltip": "Animation ID."
        },
        "superDash": {
            "nickname": "SprintForwardAnimation",
            "tooltip": "Animation ID."
        },
        "escapeF": {
            "nickname": "RollForwardAnimation",
            "tooltip": "Animation ID."
        },
        "escapeB": {
            "nickname": "RollBackwardAnimation",
            "tooltip": "Animation ID."
        },
        "escapeL": {
            "nickname": "RollLeftAnimation",
            "tooltip": "Animation ID."
        },
        "escapeR": {
            "nickname": "RollRightAnimation",
            "tooltip": "Animation ID."
        },
        "turnL": {
            "nickname": "TurnLeftAnimation",
            "tooltip": "Animation ID."
        },
        "trunR": {
            "nickname": "TurnRightAnimation",
            "tooltip": "Animation ID."
        },
        "largeTurnL": {
            "nickname": "LargeTurnLeftAnimation",
            "tooltip": "Animation ID."
        },
        "largeTurnR": {
            "nickname": "LargeTurnRightAnimation",
            "tooltip": "Animation ID."
        },
        "stepMove": {
            "nickname": "BackstepAnimation",
            "tooltip": "Animation ID."
        },
        "flyStay": {
            "nickname": "HoverAnimation",
            "tooltip": "Animation ID."
        },
        "flyWalkF": {
            "nickname": "FlyForwardAnimation",
            "tooltip": "Animation ID."
        },
        "flyWalkFL": {
            "nickname": "FlyForwardLeftAnimation",
            "tooltip": "Animation ID."
        },
        "flyWalkFR": {
            "nickname": "FlyForwardRightAnimation",
            "tooltip": "Animation ID."
        },
        "flyWalkFL2": {
            "nickname": "FlyForwardLeft2Animation",
            "tooltip": "Animation ID."
        },
        "flyWalkFR2": {
            "nickname": "FlyForwardRight2Animation",
            "tooltip": "Animation ID."
        },
        "flyDashF": {
            "nickname": "FlyForwardFastAnimation",
            "tooltip": "Animation ID."
        },
        "flyDashFL": {
            "nickname": "FlyForwardLeftFastAnimation",
            "tooltip": "Animation ID."
        },
        "flyDashFR": {
            "nickname": "FlyForwardRightFastAnimation",
            "tooltip": "Animation ID."
        },
        "flyDashFL2": {
            "nickname": "FlyForwardLeftFast2Animation",
            "tooltip": "Animation ID."
        },
        "flyDashFR2": {
            "nickname": "FlyForwardRightFast2Animation",
            "tooltip": "Animation ID."
        },
        "dashEscapeF": {
            "nickname": "RunningRollForwardAnimation",
            "tooltip": "Animation ID."
        },
        "dashEscapeB": {
            "nickname": "RunningRollBackwardAnimation",
            "tooltip": "Animation ID. (Never used.)"
        },
        "dashEscapeL": {
            "nickname": "RunningRollLeftAnimation",
            "tooltip": "Animation ID. (Never used.)"
        },
        "dashEscapeR": {
            "nickname": "RunningRollRightAnimation",
            "tooltip": "Animation ID. (Never used.)"
        },
        "analogMoveParamId": {
            "nickname": "AnalogMovement",
            "tooltip": "Movement settings for analog stick version of movement. (Unknown enum.)"
        },
        "pad[4]": {
            "nickname": "_Pad0",
            "tooltip": "Null padding (4 bytes)."
        }
    },
    "NPC_PARAM_ST": {
        "behaviorVariationId": {
            "nickname": "BehaviorVariationID",
            "tooltip": "Multiplied by 1000 and added to non-player behavior lookups (hitboxes, bullets) triggered by TAE."
        },
        "aiThinkId": {
            "nickname": "DefaultAI",
            "tooltip": "Default AI ID. Overridden by AI ID field in Maps entry.",
            "game_type": "AIParam"
        },
        "nameId": {
            "nickname": "NameID",
            "tooltip": "Text ID for NPC name that appears attached to NPCs. Only works for invaders and summons.",
            "default": 0
        },
        "turnVellocity": {
            "nickname": "TurnVelocity",
            "tooltip": "Turning velocity of NPC. (Exact effect needs testing.)"
        },
        "hitHeight": {
            "nickname": "HitHeight",
            "tooltip": "Height of NPC hitbox for collision."
        },
        "hitRadius": {
            "nickname": "HitRadius",
            "tooltip": "Radius of NPC hitbox for collision."
        },
        "weight": {
            "nickname": "Weight",
            "tooltip": "Weight of NPC. Probably has no effect (generall 100)."
        },
        "hitYOffset": {
            "nickname": "HitYOffset",
            "tooltip": "Vertical offset of NPC hitbox for collision."
        },
        "hp": {
            "nickname": "MaximumHP",
            "tooltip": "Maximum HP of NPC."
        },
        "mp": {
            "nickname": "MaximumMP",
            "tooltip": "Maximum MP of NPC. Not used in Dark Souls (generally zero)."
        },
        "getSoul": {
            "nickname": "SoulReward",
            "tooltip": "Amount of souls (before NG+ scaling) rewarded when NPC is killed."
        },
        "itemLotId_1": {
            "nickname": "ItemLotID1",
            "tooltip": "First item lot triggered when NPC dies (set to -1 for no item lot).",
            "game_type": "ItemLotParam"
        },
        "itemLotId_2": {
            "nickname": "ItemLotID2",
            "tooltip": "Second item lot triggered when NPC dies (set to -1 for no item lot).",
            "game_type": "ItemLotParam"
        },
        "itemLotId_3": {
            "nickname": "ItemLotID3",
            "tooltip": "Third item lot triggered when NPC dies (set to -1 for no item lot).",
            "game_type": "ItemLotParam"
        },
        "itemLotId_4": {
            "nickname": "ItemLotID4",
            "tooltip": "Fourth item lot triggered when NPC dies (set to -1 for no item lot).",
            "game_type": "ItemLotParam"
        },
        "itemLotId_5": {
            "nickname": "ItemLotID5",
            "tooltip": "Fifth item lot triggered when NPC dies (set to -1 for no item lot).",
            "game_type": "ItemLotParam"
        },
        "itemLotId_6": {
            "nickname": "ItemLotID6",
            "tooltip": "Sixth item lot triggered when NPC dies (set to -1 for no item lot).",
            "game_type": "ItemLotParam"
        },
        "humanityLotId": {
            "nickname": "HumanityLotID",
            "tooltip": "Starting flag of counter for awarding random humanity (I think). Only used by a few enemies, such as Hollows and Mass of Souls."
        },
        "spEffectID0": {
            "nickname": "SpecialEffectID0",
            "tooltip": "First passive special effect that is active on NPC.  This slot is generally reserved for effects in the 5300-5337 range, which modify enemy damage animations (e.g. so bosses stagger less).",
            "default": 0,
            "game_type": "SpecialEffectParam"
        },
        "spEffectID1": {
            "nickname": "SpecialEffectID1",
            "tooltip": "Second passive special effect that is active on NPC.  This slot is generally reserved for effects in the 5360-5364 range, which further modify enemy damage animations based on poise.",
            "default": 0,
            "game_type": "SpecialEffectParam"
        },
        "spEffectID2": {
            "nickname": "SpecialEffectID2",
            "tooltip": "Third passive special effect that is active on NPC.  This slot is generally reserved for effects in the 90000-91111 range, which determine status effect immunities. From left to right, the four binary digits represent poison, toxic, bleed, and curse. 0 means the NPC is immune to that status, and 1 means they are not immune (though their resistance could be any value).",
            "default": 0,
            "game_type": "SpecialEffectParam"
        },
        "spEffectID3": {
            "nickname": "SpecialEffectID3",
            "tooltip": "Fourth passive special effect that is active on NPC.  This slot is generally reserved for effects in the 80000-81111 range, which determine immunities to effects that apparently never made it into the game ('remnant', 'absorption', 'fascination', and 'ineffective').",
            "default": 0,
            "game_type": "SpecialEffectParam"
        },
        "spEffectID4": {
            "nickname": "SpecialEffectID4",
            "tooltip": "Fifth passive special effect that is active on NPC.  This slot is generally reserved for 'levelling' effects in the 7000-7015 range, which scale enemy stats according to the map they are found in.",
            "default": 0,
            "game_type": "SpecialEffectParam"
        },
        "spEffectID5": {
            "nickname": "SpecialEffectID5",
            "tooltip": "Sixth passive special effect that is active on NPC.  Used for miscellaneous effects, such as elemental resistance or immunity, animation offset effects, the black phantom effect (7100), etc.",
            "default": 0,
            "game_type": "SpecialEffectParam"
        },
        "spEffectID6": {
            "nickname": "SpecialEffectID6",
            "tooltip": "Seventh passive special effect that is active on NPC.  Used for miscellaneous effects, such as elemental resistance or immunity, animation offset effects, the black phantom effect (7100), etc.",
            "default": 0,
            "game_type": "SpecialEffectParam"
        },
        "spEffectID7": {
            "nickname": "SpecialEffectID7",
            "tooltip": "Eighth passive special effect that is active on NPC.  This slot is generally reserved for effect 71100, 71110, or 71111. The fourth binary digit determines if the NPC uses the 'immortal system'; the third binary digit is unknown. Darkwraiths, Hollows, Humanity Phantoms, and Armored Tusks are some examples of the few NPCs that use 71111; most others use 71110, except bosses.",
            "default": 0,
            "game_type": "SpecialEffectParam"
        },
        "GameClearSpEffectID": {
            "nickname": "NewGamePlusSpecialEffect",
            "tooltip": "Passive special effect that is only applied to the NPC in NG+ and beyond, which are taken from the range 7401-7415.",
            "game_type": "SpecialEffectParam"
        },
        "physGuardCutRate": {
            "nickname": "PhysicalGuardCutRate",
            "tooltip": "Percentage reduction in physical damage taken while NPC is guarding."
        },
        "magGuardCutRate": {
            "nickname": "MagicGuardCutRate",
            "tooltip": "Percentage reduction in magic damage taken while NPC is guarding."
        },
        "fireGuardCutRate": {
            "nickname": "FireGuardCutRate",
            "tooltip": "Percentage reduction in fire damage taken while NPC is guarding."
        },
        "thunGuardCutRate": {
            "nickname": "LightningGuardCutRate",
            "tooltip": "Percentage reduction in lightning damage taken while NPC is guarding."
        },
        "animIdOffset": {
            "nickname": "AnimationIDOffset",
            "tooltip": "Offset added to animation requests (e.g. from AI script or event script). If the offset animation is missing, the original will be used."
        },
        "moveAnimId": {
            "nickname": "MoveAnimationID",
            "tooltip": "TODO",
            "game_type": "Animation"
        },
        "spMoveAnimId1": {
            "nickname": "SpecialMoveAnimationID1",
            "tooltip": "TODO",
            "game_type": "Animation"
        },
        "spMoveAnimId2": {
            "nickname": "SpecialMoveAnimationID2",
            "tooltip": "TODO",
            "game_type": "Animation"
        },
        "networkWarpDist": {
            "nickname": "NetworkWarpDistance",
            "tooltip": "TODO"
        },
        "dbgBehaviorR1": {
            "nickname": "DebugBehaviorR1",
            "tooltip": "TODO",
            "default": 0
        },
        "dbgBehaviorL1": {
            "nickname": "DebugBehaviorL1",
            "tooltip": "TODO",
            "default": 0
        },
        "dbgBehaviorR2": {
            "nickname": "DebugBehaviorR2",
            "tooltip": "TODO",
            "default": 0
        },
        "dbgBehaviorL2": {
            "nickname": "DebugBehaviorL2",
            "tooltip": "TODO",
            "default": 0
        },
        "dbgBehaviorRL": {
            "nickname": "DebugBehaviorRL",
            "tooltip": "TODO",
            "default": 0
        },
        "dbgBehaviorRR": {
            "nickname": "DebugBehaviorRR",
            "tooltip": "TODO",
            "default": 0
        },
        "dbgBehaviorRD": {
            "nickname": "DebugBehaviorRD",
            "tooltip": "TODO",
            "default": 0
        },
        "dbgBehaviorRU": {
            "nickname": "DebugBehaviorRU",
            "tooltip": "TODO",
            "default": 0
        },
        "dbgBehaviorLL": {
            "nickname": "DebugBehaviorLL",
            "tooltip": "TODO",
            "default": 0
        },
        "dbgBehaviorLR": {
            "nickname": "DebugBehaviorLR",
            "tooltip": "TODO",
            "default": 0
        },
        "dbgBehaviorLD": {
            "nickname": "DebugBehaviorLD",
            "tooltip": "TODO",
            "default": 0
        },
        "dbgBehaviorLU": {
            "nickname": "DebugBehaviorLU",
            "tooltip": "TODO",
            "default": 0
        },
        "animIdOffset2": {
            "nickname": "AnimationIDOffset2",
            "tooltip": "TODO",
            "game_type": "Animation"
        },
        "partsDamageRate1": {
            "nickname": "Part1DamageMultiplier",
            "tooltip": "Multiplier for damage taken by part 1 of NPC model."
        },
        "partsDamageRate2": {
            "nickname": "Part2DamageMultiplier",
            "tooltip": "Multiplier for damage taken by part 2 of NPC model."
        },
        "partsDamageRate3": {
            "nickname": "Part3DamageMultiplier",
            "tooltip": "Multiplier for damage taken by part 3 of NPC model."
        },
        "partsDamageRate4": {
            "nickname": "Part4DamageMultiplier",
            "tooltip": "Multiplier for damage taken by part 4 of NPC model."
        },
        "partsDamageRate5": {
            "nickname": "Part5DamageMultiplier",
            "tooltip": "Multiplier for damage taken by part 5 of NPC model."
        },
        "partsDamageRate6": {
            "nickname": "Part6DamageMultiplier",
            "tooltip": "Multiplier for damage taken by part 6 of NPC model."
        },
        "partsDamageRate7": {
            "nickname": "Part7DamageMultiplier",
            "tooltip": "Multiplier for damage taken by part 7 of NPC model."
        },
        "partsDamageRate8": {
            "nickname": "Part8DamageMultiplier",
            "tooltip": "Multiplier for damage taken by part 8 of NPC model."
        },
        "weakPartsDamageRate": {
            "nickname": "WeakPartsDamageMultiplier",
            "tooltip": "Multiplier for damage taken by weak parts of NPC model."
        },
        "superArmorRecoverCorrection": {
            "nickname": "PoiseRecoveryCorrection",
            "tooltip": "Change to poise recovery rate. Only the Chained Prisoner uses a non-zero value in vanilla(-0.2)."
        },
        "superArmorBrakeKnockbackDist": {
            "nickname": "StaggerKnockbackDistance",
            "tooltip": "Stagger knockback distance when NPC's poise is broken."
        },
        "stamina": {
            "nickname": "MaxStamina",
            "tooltip": "Maximum stamina of NPC."
        },
        "staminaRecoverBaseVel": {
            "nickname": "StaminaRecoveryBaseSpeed",
            "tooltip": "Base speed of NPC's stamina recovery."
        },
        "def_phys": {
            "nickname": "PhysicalDefense",
            "tooltip": "Base defense applied to all physical attacks."
        },
        "def_slash": {
            "nickname": "SlashDefense",
            "tooltip": "Base defense added against slashing physical attacks."
        },
        "def_blow": {
            "nickname": "StrikeDefense",
            "tooltip": "Base defense added against striking physical attacks."
        },
        "def_thrust": {
            "nickname": "ThrustDefense",
            "tooltip": "Base defense added against thrusting physical attacks."
        },
        "def_mag": {
            "nickname": "MagicDefense",
            "tooltip": "Base defense added against magic attacks."
        },
        "def_fire": {
            "nickname": "FireDefense",
            "tooltip": "Base defense added against fire attacks."
        },
        "def_thunder": {
            "nickname": "LightningDefense",
            "tooltip": "Base defense added against lightning attacks."
        },
        "defFlickPower": {
            "nickname": "DefenseRepelPower",
            "tooltip": "Determines how severely an attacker is repelled when they fail to break this NPC's poise. The Armored Tusk and Chained Prisoner have very high values (50-60), but most NPCs have 0."
        },
        "resist_poison": {
            "nickname": "PoisonResistance",
            "tooltip": "Base poison resistance."
        },
        "resist_desease": {
            "nickname": "ToxicResistance",
            "tooltip": "Base toxic resistance."
        },
        "resist_blood": {
            "nickname": "BleedResistance",
            "tooltip": "Base bleed resistance."
        },
        "resist_curse": {
            "nickname": "CurseResistance",
            "tooltip": "Base curse resistance."
        },
        "ghostModelId": {
            "nickname": "GhostModelID",
            "tooltip": "Model to be used when this quest-related NPC appears as a ghost to other players. Defaults to -1 for almost all standard enemies, which means they do not appear as a ghost to others.",
            "game_type": "EquipmentModel"
        },
        "normalChangeResouceId": {
            "nickname": "NormalChangeResourceID",
            "tooltip": "Unknown. Always -1."
        },
        "guardAngle": {
            "nickname": "GuardAngle",
            "tooltip": "Zero for every NPC except the Phalanx Hollow (20)."
        },
        "slashGuardCutRate": {
            "nickname": "SlashDamageReductionWhenGuarding",
            "tooltip": "Always zero."
        },
        "blowGuardCutRate": {
            "nickname": "StrikeDamageReductionWhenGuarding",
            "tooltip": "Always zero."
        },
        "thrustGuardCutRate": {
            "nickname": "ThrustDamageReductionWhenGuarding",
            "tooltip": "Always zero."
        },
        "superArmorDurability": {
            "nickname": "MaxPoise",
            "tooltip": "Maximum poise of character. Poise is reduced when attacked, but quickly refills. If reduced to zero, the character will be staggered."
        },
        "normalChangeTexChrId": {
            "nickname": "NormalChangeTextureChrID",
            "tooltip": "Unknown. Used for only some NPCs, where it is generally set to a number close to the NPC's character model ID."
        },
        "dropType": {
            "nickname": "ItemDropAppearance",
            "tooltip": "Determines appearance of dropped items. 0 means the item appears to glow faintly from inside the NPC's body (e.g. Rat, Mushroom Child/Parent, Ent) and 1 means the item is a clear white orb just like regular treasure on corpses (most NPCs)."
        },
        "knockbackRate": {
            "nickname": "KnockbackRate",
            "tooltip": "TODO"
        },
        "knockbackParamId": {
            "nickname": "KnockbackID",
            "tooltip": "Knockback parameters were abandoned after Demons' Souls. A param table for Knockback is still present but is not accessible in the GUI.",
            "game_type": "KnockbackParam"
        },
        "fallDamageDump": {
            "nickname": "FallDamageReduction",
            "tooltip": "Percentage of fall damage to ignore."
        },
        "staminaGuardDef": {
            "nickname": "StaminaGuardDefense",
            "tooltip": "Always set to zero in the game, but presumably, increasing it will reduce the amount of stamina lost when this NPC blocks an attack."
        },
        "pcAttrB": {
            "nickname": "PCAttrB",
            "tooltip": "Like a remnant of World Tendency. Always set to zero."
        },
        "pcAttrW": {
            "nickname": "PCAttrW",
            "tooltip": "Like a remnant of World Tendency. Always set to zero."
        },
        "pcAttrL": {
            "nickname": "PCAttrL",
            "tooltip": "Like a remnant of World Tendency. Always set to zero."
        },
        "pcAttrR": {
            "nickname": "PCAttrR",
            "tooltip": "Like a remnant of World Tendency. Always set to zero."
        },
        "areaAttrB": {
            "nickname": "AreaAttrB",
            "tooltip": "Like a remnant of World Tendency. Always set to zero."
        },
        "areaAttrW": {
            "nickname": "AreaAttrW",
            "tooltip": "Like a remnant of World Tendency. Always set to zero."
        },
        "areaAttrL": {
            "nickname": "AreaAttrL",
            "tooltip": "Like a remnant of World Tendency. Always set to zero."
        },
        "areaAttrR": {
            "nickname": "AreaAttrR",
            "tooltip": "Like a remnant of World Tendency. Always set to zero."
        },
        "mpRecoverBaseVel": {
            "nickname": "MPRecoveryBaseSpeed",
            "tooltip": "Unknown effect, likely none. Set to zero for NPC parts (tails and Hydra heads) and 10 for everyone else."
        },
        "flickDamageCutRate": {
            "nickname": "RepelDamageCutRate",
            "tooltip": "Unknown effect, but it is set to zero for most enemies, 50 for very heavy enemies like Great Stone Knights and Titanite Demons, and 100 for Mimics."
        },
        "defaultLodParamId": {
            "nickname": "DefaultLightingParamID",
            "tooltip": "Default lighting (Lod) parameter entry ID."
        },
        "drawType": {
            "nickname": "DrawType",
            "tooltip": "TODO"
        },
        "npcType": {
            "nickname": "CharacterType",
            "tooltip": "TODO"
        },
        "teamType": {
            "nickname": "TeamType",
            "tooltip": "0: enemy, 1: boss, 2: ally, 6: unused, 7: white phantom"
        },
        "moveType": {
            "nickname": "MoveType",
            "tooltip": "TODO"
        },
        "lockDist": {
            "nickname": "LockOnDistance",
            "tooltip": "TODO"
        },
        "material": {
            "nickname": "Material",
            "tooltip": "TODO"
        },
        "materialSfx": {
            "nickname": "MaterialSFX",
            "tooltip": "TODO"
        },
        "material_Weak": {
            "nickname": "MaterialWeak",
            "tooltip": "TODO"
        },
        "materialSfx_Weak": {
            "nickname": "MaterialWeakSFX",
            "tooltip": "TODO"
        },
        "partsDamageType": {
            "nickname": "PartsDamageType",
            "tooltip": "Unknown. Seems to be set to 1 for most enemies with multiple parts (Sentinels, Quelaag, Seath, Gaping Dragon), but not all of them (Bell Gargoyles), and 0 otherwise."
        },
        "maxUndurationAng": {
            "nickname": "MaxUndurationAngle",
            "tooltip": "Unknown effect, but it is generally set to 30 for all four-legged enemies, and 0 for all others."
        },
        "guardLevel": {
            "nickname": "GuardLevel",
            "tooltip": "Set to 4 for enemies who can guard (including Manus), except Giant Skeletons, who have a value of 3. All other NPCs have zero."
        },
        "burnSfxType": {
            "nickname": "BurnSFXType",
            "tooltip": "Set to 1 for Slimes and Undead Dragons, and 0 for everyone else."
        },
        "poisonGuardResist": {
            "nickname": "PoisonGuardResistance",
            "tooltip": "Added poison resistance while guarding."
        },
        "diseaseGuardResist": {
            "nickname": "ToxicGuardResistance",
            "tooltip": "Added toxic resistance while guarding."
        },
        "bloodGuardResist": {
            "nickname": "BleedGuardResistance",
            "tooltip": "Added bleed resistance while guarding."
        },
        "curseGuardResist": {
            "nickname": "CurseGuardResistance",
            "tooltip": "Added curse resistance while guarding."
        },
        "parryAttack": {
            "nickname": "ParryAttack",
            "tooltip": "Always zero."
        },
        "parryDefence": {
            "nickname": "ParryDefense",
            "tooltip": "Always zero."
        },
        "sfxSize": {
            "nickname": "SFXSize",
            "tooltip": "Set to 2 for very large enemies, 1 for large enemies, and 0 otherwise."
        },
        "pushOutCamRegionRadius": {
            "nickname": "PushOutCameraRegionRadius",
            "tooltip": "Always zero."
        },
        "hitStopType": {
            "nickname": "HitStopType",
            "tooltip": "Set to 1 or 2 for most bosses/tough enemies, and 0 otherwise. Likely related to AI triggers."
        },
        "ladderEndChkOffsetTop": {
            "nickname": "LadderEndCheckOffsetTop",
            "tooltip": "Not something you want to mess with."
        },
        "ladderEndChkOffsetLow": {
            "nickname": "LadderEndCheckOffsetBottom",
            "tooltip": "Not something you want to mess with."
        },
        "useRagdollCamHit:1": {
            "nickname": "UseRagdollCameraHit",
            "tooltip": "TODO"
        },
        "disableClothRigidHit:1": {
            "nickname": "DisableClothRigidHit",
            "tooltip": "TODO"
        },
        "useRagdoll:1": {
            "nickname": "UseRagdoll",
            "tooltip": "TODO"
        },
        "isDemon:1": {
            "nickname": "IsDemon",
            "tooltip": "TODO"
        },
        "isGhost:1": {
            "nickname": "IsGhost",
            "tooltip": "TODO"
        },
        "isNoDamageMotion:1": {
            "nickname": "IsNoDamageMotion",
            "tooltip": "TODO"
        },
        "isUnduration:1": {
            "nickname": "IsUnduration",
            "tooltip": "TODO"
        },
        "isChangeWanderGhost:1": {
            "nickname": "IsChangeWanderGhost",
            "tooltip": "Always false."
        },
        "modelDispMask0:1": {
            "nickname": "ModelDisplayMask0",
            "tooltip": "TODO"
        },
        "modelDispMask1:1": {
            "nickname": "ModelDisplayMask1",
            "tooltip": "TODO"
        },
        "modelDispMask2:1": {
            "nickname": "ModelDisplayMask2",
            "tooltip": "TODO"
        },
        "modelDispMask3:1": {
            "nickname": "ModelDisplayMask3",
            "tooltip": "TODO"
        },
        "modelDispMask4:1": {
            "nickname": "ModelDisplayMask4",
            "tooltip": "TODO"
        },
        "modelDispMask5:1": {
            "nickname": "ModelDisplayMask5",
            "tooltip": "TODO"
        },
        "modelDispMask6:1": {
            "nickname": "ModelDisplayMask6",
            "tooltip": "TODO"
        },
        "modelDispMask7:1": {
            "nickname": "ModelDisplayMask7",
            "tooltip": "TODO"
        },
        "modelDispMask8:1": {
            "nickname": "ModelDisplayMask8",
            "tooltip": "TODO"
        },
        "modelDispMask9:1": {
            "nickname": "ModelDisplayMask9",
            "tooltip": "TODO"
        },
        "modelDispMask10:1": {
            "nickname": "ModelDisplayMask10",
            "tooltip": "TODO"
        },
        "modelDispMask11:1": {
            "nickname": "ModelDisplayMask11",
            "tooltip": "TODO"
        },
        "modelDispMask12:1": {
            "nickname": "ModelDisplayMask12",
            "tooltip": "TODO"
        },
        "modelDispMask13:1": {
            "nickname": "ModelDisplayMask13",
            "tooltip": "TODO"
        },
        "modelDispMask14:1": {
            "nickname": "ModelDisplayMask14",
            "tooltip": "TODO"
        },
        "modelDispMask15:1": {
            "nickname": "ModelDisplayMask15",
            "tooltip": "TODO"
        },
        "isEnableNeckTurn:1": {
            "nickname": "EnableNeckTurn",
            "tooltip": "Character can turn their neck."
        },
        "disableRespawn:1": {
            "nickname": "DisableRespawnOnRest",
            "tooltip": "Prevents character from respawning when you rest at a bonfire, though they will still respawn when you die or the map is de-loaded unless they are disabled by an event script."
        },
        "isMoveAnimWait:1": {
            "nickname": "IsMoveAnimationWait",
            "tooltip": "TODO"
        },
        "isCrowd:1": {
            "nickname": "IsCrowd",
            "tooltip": "Always false."
        },
        "isWeakSaint:1": {
            "nickname": "IsWeakToDivine",
            "tooltip": "True for skeletons and friends, but not sure how it is actually used to disable their reanimation by Necromancers."
        },
        "isWeakA:1": {
            "nickname": "IsWeakToOccult",
            "tooltip": "True for all Gods and most NPCs in Anor Londo."
        },
        "isWeakB:1": {
            "nickname": "IsAbyssal",
            "tooltip": "True for Darkwraiths, Primordial Serpents, and the Four Kings, but not Manus."
        },
        "pad1:1": {
            "nickname": "_BitPad0",
            "tooltip": "Null padding (1 bits)."
        },
        "vowType:3": {
            "nickname": "VowType",
            "tooltip": "Effects unknown. Set to 1 (Way of White) for Andre and 0 for everyone else."
        },
        "disableInitializeDead:1": {
            "nickname": "DisableInitializeDead",
            "tooltip": "True for bosses and non-respawning enemies that are disabled in event scripts, but its effects are unknown."
        },
        "pad3:4": {
            "nickname": "_BitPad1",
            "tooltip": "Null padding (4 bits)."
        },
        "pad2[6]": {
            "nickname": "_Pad0",
            "tooltip": "Null padding (6 bytes)."
        }
    },
    "NPC_THINK_PARAM_ST": {
        "logicId": {
            "nickname": "LogicID",
            "tooltip": "ID of logic (non-battle) Lua script.",
            "default": 10000,
            "game_type": "LogicAIScript"
        },
        "battleGoalID": {
            "nickname": "BattleID",
            "tooltip": "Battle goal ID used to look up battle Lua script.",
            "game_type": "BattleAIScript"
        },
        "nearDist": {
            "nickname": "NearDistance",
            "tooltip": "Distance considered to be close range by this NPC (for scripts)."
        },
        "midDist": {
            "nickname": "MidDistance",
            "tooltip": "Distance considered to be medium range by this NPC (for scripts)."
        },
        "farDist": {
            "nickname": "FarDistance",
            "tooltip": "Distance considered to be long range by this NPC (for scripts)."
        },
        "outDist": {
            "nickname": "OutOfRangeDistance",
            "tooltip": "Distance beyond which the NPC will not attempt to fight."
        },
        "BackHomeLife_OnHitEneWal": {
            "nickname": "RetreatTimeAfterHittingEnemyWall",
            "tooltip": "Retreat goal time when touching an 'enemy wall' that blocks the NPC's path. (Not clear what an 'enemy wall' means. Almost always set to 5 (rarely 6)."
        },
        "goalID_ToCaution": {
            "nickname": "CautionGoalID",
            "tooltip": "Lua script to use when NPC's AI enters the 'Caution' state (I think). Requires a CautionGoalAction value of 4. Used only by Hawkeye Gough (411000); zero otherwise."
        },
        "idAttackCannotMove": {
            "nickname": "StuckAnimationID",
            "tooltip": "Animation to use if the NPC gets stuck on a destructible object. Usually 3000 (basic attack)."
        },
        "goalID_ToFind": {
            "nickname": "SearchGoalID",
            "tooltip": "Lua script to use when NPC's AI enters the 'Search' state (I think). Requires a SearchGoalAction value of 4. Not used by any vanilla NPC (all zero)."
        },
        "callHelp_ActionAnimId": {
            "nickname": "HelpCallResponseAnimation",
            "tooltip": "Animation to play when responding to a call for help. Usually set to -1 for NPCs who can reply to calls for help, which I assume means no animation is played. Set to 0 for NPCs who ignore calls for help.",
            "game_type": "Animation"
        },
        "callHelp_CallActionId": {
            "nickname": "HelpCallSendAnimation",
            "tooltip": "Animation to play when calling for help. Only used by Female Ghost (7300) and Male Ghost and summons (-1). I assume -1 means no animation is played. Set to 0 for all other NPCs."
        },
        "eye_dist": {
            "nickname": "SightDistance",
            "tooltip": "Distance of NPC eyesight (in meters)."
        },
        "ear_dist": {
            "nickname": "HearingDistance",
            "tooltip": "Distance of NPC hearing (in meters)."
        },
        "ear_soundcut_dist": {
            "nickname": "HearingCutDistance",
            "tooltip": "Internal description: 'Distance to reduce the size of the sound source. Sounds less than this distance will not be heard.' Set to 1 for Bloatheads and Bloathead Sorcerers and 0 for everyone else."
        },
        "nose_dist": {
            "nickname": "SmellDistance",
            "tooltip": "Distance of NPC smell (auto-detect)."
        },
        "maxBackhomeDist": {
            "nickname": "MaxRetreatDistance",
            "tooltip": "Absolute furthest the NPC can travel from their nest before retreating, in or out of battle. (Argument of internal GOAL function 'COMMON_SetBattleActLogic()'.) Usually set to about 50% more than BattleRetreatDistance."
        },
        "backhomeDist": {
            "nickname": "BattleRetreatDistance",
            "tooltip": "Furthest distance the NPC can travel from their nest before retreating in battle. (Argument of internal GOAL function 'COMMON_SetBattleActLogic()'.)"
        },
        "backhomeBattleDist": {
            "nickname": "RetreatBattleStartDistance",
            "tooltip": "Target distance at which battle mode is triggered while the enemy is retreating. (Argument of internal GOAL function 'COMMON_SetBattleActLogic()'.)"
        },
        "nonBattleActLife": {
            "nickname": "NonBattleActLife",
            "tooltip": "Lifespan of Acts outside of battle. Set to 10 for Bloatheads and Bloathead Sorcerers, 0 for Priscilla's Tail and the Bed of Chaos bug, and 5 for everyone else. (Argument of internal GOAL function 'COMMON_SetBattleActLogic()'.)"
        },
        "BackHome_LookTargetTime": {
            "nickname": "SearchTimeBeforeRetreat",
            "tooltip": "Time that NPC will search for a lost target before retreating (I think). Set to 20 for everyone except the Bounding Demons of Izalith, who have a value of 0."
        },
        "BackHome_LookTargetDist": {
            "nickname": "SearchDistanceBeforeRetreat",
            "tooltip": "Distance that NPC will search for a lost target before retreating (I think). Set to 20 for everyone except the Bounding Demons of Izalith, who have a value of 0."
        },
        "SightTargetForgetTime": {
            "nickname": "SightForgetTime",
            "tooltip": "Time to forget about sighted targets. Usually set to 600."
        },
        "SoundTargetForgetTime": {
            "nickname": "HearingForgetTime",
            "tooltip": "Time to forget about heard targets. Usually set to 300."
        },
        "BattleStartDist": {
            "nickname": "BattleStartDistance",
            "tooltip": "Target distance at which battle mode is triggered."
        },
        "callHelp_MyPeerId": {
            "nickname": "HelpGroupID",
            "tooltip": "Determines which calls for help this NPC will respond to (must match caller's HelpCallGroupID). Only 0 (no ID) and 1 are used."
        },
        "callHelp_CallPeerId": {
            "nickname": "HelpCallGroupID",
            "tooltip": "HelpGroupID value of NPCs who should respond to calls for help by this NPC. Only 0 (no ID) and 1 are used."
        },
        "targetSys_DmgEffectRate": {
            "nickname": "TargetSysDamageRate",
            "tooltip": "Internal description: 'Get damage rate (%) for target system evaluation information.' Set to 0 for summons, phantoms, and the Parasitic Wall Hugger, and 100 for everyone else."
        },
        "TeamAttackEffectivity": {
            "nickname": "TeamAttackEffectivity",
            "tooltip": "Value from 0 to 100 that determines the number of simultaneous attacks made by this NPC's team. Higher values mean that less members of this team can participate in attacks at the same time. (I presume that the total score of attacking team members cannot exceed 100.) Usually set to 25 or 100.",
            "default": 0
        },
        "eye_angX": {
            "nickname": "SightRangeHeight",
            "tooltip": "Angular width of sight field in degrees.",
            "default": 120
        },
        "eye_angY": {
            "nickname": "SightRangeWidth",
            "tooltip": "Angular height of sight field in degrees.",
            "default": 120
        },
        "ear_angX": {
            "nickname": "HearingRangeHeight",
            "tooltip": "Angular width of hearing field in degrees."
        },
        "ear_angY": {
            "nickname": "HearingRangeWidth",
            "tooltip": "Angular height of hearing field in degrees."
        },
        "callHelp_CallValidMinDistTarget": {
            "nickname": "HelpCallTargetMinDistance",
            "tooltip": "Minimum distance from AI target for help call to be made. Always zero.",
            "default": 0
        },
        "callHelp_CallValidRange": {
            "nickname": "HelpCallFriendMaxDistance",
            "tooltip": "Maximum distance of friend to receive help call from this NPC. Set to 50 for both Male and Female Ghosts, and 0 for everyone else.",
            "default": 0
        },
        "callHelp_ForgetTimeByArrival": {
            "nickname": "HelpCallForgetTime",
            "tooltip": "Time until call for help is forgotten by responder."
        },
        "callHelp_MinWaitTime": {
            "nickname": "HelpCallMinWaitTime",
            "tooltip": "Internal description: 'Minimum time for response goal at first waiting goal'. Units are in tenths of a second. Only used for Male Ghosts (20)."
        },
        "callHelp_MaxWaitTime": {
            "nickname": "HelpCallMaxWaitTime",
            "tooltip": "Internal description: 'Maximum time for response goal at first waiting goal'. Units are in tenths of a second. Only used for Female Ghosts (40)."
        },
        "goalAction_ToCaution": {
            "nickname": "CautionGoalAction",
            "tooltip": "Type of action taken when AI enters the 'Caution' state."
        },
        "goalAction_ToFind": {
            "nickname": "SearchGoalAction",
            "tooltip": "Type of action taken when AI enters the 'Search' state."
        },
        "callHelp_ReplyBehaviorType": {
            "nickname": "HelpCallReplyType",
            "tooltip": "Set to 0 for NPCs who do not reply to calls for help and 1 for NPCs who do."
        },
        "disablePathMove": {
            "nickname": "IgnoreNavmesh",
            "tooltip": "If 1, this NPC will ignore navmesh when moving. True for Ghosts and enemies that don't move at all."
        },
        "skipArrivalVisibleCheck": {
            "nickname": "SkipArrivalVisibleCheck",
            "tooltip": "Internal description: 'If enabled, arrival determination is performed even if the line of sightis not passed.' True only for Hawkeye Gough."
        },
        "thinkAttr_doAdmirer": {
            "nickname": "AdmirerAttribute",
            "tooltip": "Internal description: 'Thought attribute: when enabled, it plays the role of a wrap.' I don'tknow exactly what that means, but this is likely important for something. Enabled for Soulmassand Pursuers, non-giant Rats, Infested Ghouls, Mushrooms, most Hollows (not archers), MaleGhosts, normal Skeletons and Skeleton Beasts, and Pisaca."
        },
        "enableNaviFlg_Edge:1": {
            "nickname": "CanFallOffEdges",
            "tooltip": "If True, this NPC will pursue targets off navmesh edges (survivable falls)."
        },
        "enableNaviFlg_LargeSpace:1": {
            "nickname": "CanNavigateWideSpaces",
            "tooltip": "If True, this NPC can enter navmesh regions flagged as 'large spaces'."
        },
        "enableNaviFlg_Ladder:1": {
            "nickname": "CanNavigateLadders",
            "tooltip": "If True, this NPC will use ladders."
        },
        "enableNaviFlg_Hole:1": {
            "nickname": "CanNavigateHoles",
            "tooltip": "If True, this NPC can fall into navmesh holes."
        },
        "enableNaviFlg_Door:1": {
            "nickname": "CanNavigateDoors",
            "tooltip": "If True, this NPC can go through doors (but not necessarily open closed doors)."
        },
        "enableNaviFlg_InSideWall:1": {
            "nickname": "CanNavigateInsideWalls",
            "tooltip": "If True, this NPC can go through walls (i.e. ignores navmesh walls)."
        },
        "enableNaviFlg_reserve0:2": {
            "nickname": "_BitPad0",
            "tooltip": "Null padding (2 bits)."
        },
        "enableNaviFlg_reserve1[3]": {
            "nickname": "_Pad0",
            "tooltip": "Null padding (3 bytes)."
        },
        "pad0[12]": {
            "nickname": "_Pad1",
            "tooltip": "Null padding (12 bytes)."
        }
    },
    "OBJECT_PARAM_ST": {
        "hp": {
            "nickname": "ObjectHP",
            "tooltip": "Amount of damage object can take before it is destroyed. (Set to -1 for invulnerability.)"
        },
        "defense": {
            "nickname": "MinAttackForDamage",
            "tooltip": "Minimum attack power required to damage object. Attacks with less power than this will deal no damage."
        },
        "extRefTexId": {
            "nickname": "ExternalTextureID",
            "tooltip": "Internal description: 'mAA / mAA_????.tpf (-1: None) (AA: Area number)'."
        },
        "materialId": {
            "nickname": "MaterialID",
            "tooltip": "Treated the same as floor material. (Set to -1 to use default.)"
        },
        "animBreakIdMax": {
            "nickname": "MaxDestructionAnimationID",
            "tooltip": "Upper limit of range of destruction animations, which seem to always start at 0."
        },
        "isCamHit:1": {
            "nickname": "CollidesWithCamera",
            "tooltip": "If True, the camera will collide with this object."
        },
        "isBreakByPlayerCollide:1": {
            "nickname": "BrokenByPlayerCollision",
            "tooltip": "If True, the player will break the object just by touching it."
        },
        "isAnimBreak:1": {
            "nickname": "HasDestructionAnimation",
            "tooltip": "If True, the object will use an animation when destroyed rather than using physics-based destruction."
        },
        "isPenetrationBulletHit:1": {
            "nickname": "HitByPiercingBullets",
            "tooltip": "If True, the object can be damaged by Bullets with target-piercing enabled."
        },
        "isChrHit:1": {
            "nickname": "CharacterCollision",
            "tooltip": "If False, characters will pass through the object (e.g. branches)."
        },
        "isAttackBacklash:1": {
            "nickname": "DeflectsAttacks",
            "tooltip": "If True, attacks will bounce off the object as though it were a wall."
        },
        "isDisableBreakForFirstAppear:1": {
            "nickname": "CannotSpawnBroken",
            "tooltip": "If True, the object cannot be destroyed when the player first spawns."
        },
        "isLadder:1": {
            "nickname": "IsLadder",
            "tooltip": "Object is a ladder."
        },
        "isAnimPauseOnRemoPlay:1": {
            "nickname": "StopAnimationDuringCutscenes",
            "tooltip": "If True, object animation will not play in cutscenes."
        },
        "isDamageNoHit:1": {
            "nickname": "PreventAllDamage",
            "tooltip": "If True, all damage to the object will be prevented. (Not sure if this is the same effet as settings its HP to -1.)"
        },
        "isMoveObj:1": {
            "nickname": "IsMovingObject",
            "tooltip": "If True, this object can move."
        },
        "pad_1:5": {
            "nickname": "_BitPad0",
            "tooltip": "Null padding (5 bits)."
        },
        "defaultLodParamId": {
            "nickname": "DefaultLOD",
            "tooltip": "Default LOD (level of default) parameter."
        },
        "breakSfxId": {
            "nickname": "DestructionSoundEffect",
            "tooltip": "Sound effect played upon destruction. (Set to -1 to use default value, which is apparently 80.)",
            "game_type": "VisualEffect"
        }
    },
    "OBJ_ACT_PARAM_ST": {
        "actionEnableMsgId": {
            "nickname": "PromptMessage",
            "tooltip": "Message displayed in dialog box that prompts action (e.g. 'Open')."
        },
        "actionFailedMsgId": {
            "nickname": "FailureMessage",
            "tooltip": "Message displayed in dialog box upon failed action (e.g. 'It's locked')."
        },
        "spQualifiedPassEventFlag": {
            "nickname": "FlagForAutomaticSuccess",
            "tooltip": "Action will always be successful if this flag is enabled."
        },
        "validDist": {
            "nickname": "MaxActionDistance",
            "tooltip": "Maximum distance from action model point at which the object action will be prompted."
        },
        "playerAnimId": {
            "nickname": "PlayerActionAnimation",
            "tooltip": "Animation played by a player character when they successfully activate the object.",
            "game_type": "Animation"
        },
        "chrAnimId": {
            "nickname": "NonPlayerActionAnimation",
            "tooltip": "Animation played by a non-player character when they successfully activate the object.",
            "game_type": "Animation"
        },
        "spQualifiedId": {
            "nickname": "SuccessConditionID1",
            "tooltip": "TODO",
            "dynamic_callback": "ObjActSuccessCondition(1)"
        },
        "spQualifiedId2": {
            "nickname": "SuccessConditionID2",
            "tooltip": "TODO",
            "dynamic_callback": "ObjActSuccessCondition(2)"
        },
        "objDummyId": {
            "nickname": "ObjectActionModelPoint",
            "tooltip": "Model point that specifies where the action occurs on the object (for snapping the player and distance check).",
            "game_type": "ModelDummy"
        },
        "objAnimId": {
            "nickname": "ObjectActionAnimation",
            "tooltip": "Animation played by the object when it is successfully activated.",
            "game_type": "Animation"
        },
        "validPlayerAngle": {
            "nickname": "MaxPlayerAngle",
            "tooltip": "Maximum angle between the character's forward direction and the direction to the object action point for the action prompt to appear."
        },
        "spQualifiedType": {
            "nickname": "SuccessCondition1Type",
            "tooltip": "Type of first success condition."
        },
        "spQualifiedType2": {
            "nickname": "SuccessCondition2Type",
            "tooltip": "Type of second success condition."
        },
        "validObjAngle": {
            "nickname": "MaxObjectAngle",
            "tooltip": "Maximum angle between the object's forward direction and the direction to the player for the action prompt to appear."
        },
        "chrSorbType": {
            "nickname": "CharacterSnapType",
            "tooltip": "Type of method used to snap the character to the object before animations are played."
        },
        "eventKickTiming": {
            "nickname": "EventTriggerDelay",
            "tooltip": "I believe this is the delay between successful object activation and the outgoing 'success' trigger used by game events."
        },
        "pad1[2]": {
            "nickname": "_Pad0",
            "tooltip": "Null padding (2 bytes)."
        }
    },
    "POINT_LIGHT_BANK": {
        "dwindleBegin": {
            "nickname": "FadeStartDistance",
            "tooltip": "Distance at which player's point light begins to fade."
        },
        "dwindleEnd": {
            "nickname": "FadeEndDistance",
            "tooltip": "Distance at which player's point light finishes fading and disappears entirely."
        },
        "colR": {
            "nickname": "PointLightRed",
            "tooltip": "Red channel (0-255) of point light."
        },
        "colG": {
            "nickname": "PointLightGreen",
            "tooltip": "Green channel (0-255) of point light."
        },
        "colB": {
            "nickname": "PointLightBlue",
            "tooltip": "Blue channel (0-255) of point light."
        },
        "colA": {
            "nickname": "PointLightAlpha",
            "tooltip": "Alpha channel (0-255) of point light."
        }
    },
    "REINFORCE_PARAM_PROTECTOR_ST": {
        "physicsDefRate": {
            "nickname": "PhysicalDefenseMultiplier",
            "tooltip": "Multiplier for physical defense at this upgrade level."
        },
        "magicDefRate": {
            "nickname": "MagicDefenseMultiplier",
            "tooltip": "Multiplier for magic defense at this upgrade level."
        },
        "fireDefRate": {
            "nickname": "FireDefenseMultiplier",
            "tooltip": "Multiplier for fire defense at this upgrade level."
        },
        "thunderDefRate": {
            "nickname": "LightningDefenseMultiplier",
            "tooltip": "Multiplier for lightning defense at this upgrade level."
        },
        "slashDefRate": {
            "nickname": "SlashDefenseMultiplier",
            "tooltip": "Multiplier for slash defense at this upgrade level."
        },
        "blowDefRate": {
            "nickname": "StrikeDefenseMultiplier",
            "tooltip": "Multiplier for strike defense at this upgrade level."
        },
        "thrustDefRate": {
            "nickname": "ThrustDefenseMultiplier",
            "tooltip": "Multiplier for thrust defense at this upgrade level."
        },
        "resistPoisonRate": {
            "nickname": "PoisonResistanceMultiplier",
            "tooltip": "Multiplier for poison resistance at this upgrade level."
        },
        "resistDiseaseRate": {
            "nickname": "ToxicResistanceMultiplier",
            "tooltip": "Multiplier for toxic resistance at this upgrade level."
        },
        "resistBloodRate": {
            "nickname": "BleedResistanceMultiplier",
            "tooltip": "Multiplier for bleed resistance at this upgrade level."
        },
        "resistCurseRate": {
            "nickname": "CurseResistanceMultiplier",
            "tooltip": "Multiplier for curse resistance at this upgrade level."
        },
        "residentSpEffectId1": {
            "nickname": "WearerSpecialEffect1",
            "tooltip": "Special effect granted to wearer (first of three).",
            "game_type": "SpecialEffectParam"
        },
        "residentSpEffectId2": {
            "nickname": "WearerSpecialEffect2",
            "tooltip": "Special effect granted to wearer (second of three).",
            "game_type": "SpecialEffectParam"
        },
        "residentSpEffectId3": {
            "nickname": "WearerSpecialEffect3",
            "tooltip": "Special effect granted to wearer (third of three).",
            "game_type": "SpecialEffectParam"
        },
        "materialSetId": {
            "nickname": "UpgradeMaterialID",
            "tooltip": "Upgrade material set for reinforcement.",
            "game_type": "UpgradeMaterialParam"
        }
    },
    "REINFORCE_PARAM_WEAPON_ST": {
        "physicsAtkRate": {
            "nickname": "PhysicalDamageMultiplier",
            "tooltip": "Multiplier applied to outgoing physical damage (of any type)."
        },
        "magicAtkRate": {
            "nickname": "MagicDamageMultiplier",
            "tooltip": "Multiplier applied to outgoing magic damage."
        },
        "fireAtkRate": {
            "nickname": "FireDamageMultiplier",
            "tooltip": "Multiplier applied to outgoing fire damage."
        },
        "thunderAtkRate": {
            "nickname": "LightningDamageMultiplier",
            "tooltip": "Multiplier applied to outgoing lightning damage."
        },
        "staminaAtkRate": {
            "nickname": "StaminaDamageMultiplier",
            "tooltip": "Multiplier applied to the amount of damage dealt to targets' stamina."
        },
        "saWeaponAtkRate": {
            "nickname": "PoiseDamageMultiplier",
            "tooltip": "Multiplier applied to the amount of damage dealt to targets' poise. Never used."
        },
        "saDurabilityRate": {
            "nickname": "PoiseDefenseMultiplier",
            "tooltip": "Multiplier applied to wielder's poise while using (attacking/blocking with?) weapon. Never used."
        },
        "correctStrengthRate": {
            "nickname": "StrengthScalingMultiplier",
            "tooltip": "Multiplier applied to strength scaling of this weapon."
        },
        "correctAgilityRate": {
            "nickname": "DexterityScalingMultiplier",
            "tooltip": "Multiplier applied to dexterity scaling of this weapon."
        },
        "correctMagicRate": {
            "nickname": "IntelligenceScalingMultiplier",
            "tooltip": "Multiplier applied to intelligence scaling of this weapon."
        },
        "correctFaithRate": {
            "nickname": "FaithScalingMultiplier",
            "tooltip": "Multiplier applied to faith scaling of this weapon."
        },
        "physicsGuardCutRate": {
            "nickname": "PhysicalGuardReductionMultiplier",
            "tooltip": "Multiplier applied to the percentage of physical damage blocked by this weapon/shield."
        },
        "magicGuardCutRate": {
            "nickname": "MagicGuardReductionMultiplier",
            "tooltip": "Multiplier applied to the percentage of magic damage blocked by this weapon/shield."
        },
        "fireGuardCutRate": {
            "nickname": "FireGuardReductionMultiplier",
            "tooltip": "Multiplier applied to the percentage of fire damage blocked by this weapon/shield."
        },
        "thunderGuardCutRate": {
            "nickname": "LightningGuardReductionMultiplier",
            "tooltip": "Multiplier applied to the percentage of lightning damage blocked by this weapon/shield."
        },
        "poisonGuardResistRate": {
            "nickname": "PoisonGuardResistanceMultiplier",
            "tooltip": "Multiplier applied to the percentage of poison damage blocked by this weapon/shield."
        },
        "diseaseGuardResistRate": {
            "nickname": "ToxicGuardResistanceMultiplier",
            "tooltip": "Multiplier applied to the percentage of toxic damage blocked by this weapon/shield."
        },
        "bloodGuardResistRate": {
            "nickname": "BleedGuardResistanceMultiplier",
            "tooltip": "Multiplier applied to the percentage of bleed damage blocked by this weapon/shield."
        },
        "curseGuardResistRate": {
            "nickname": "CurseGuardResistanceMultiplier",
            "tooltip": "Multiplier applied to the percentage of curse damage blocked by this weapon/shield."
        },
        "staminaGuardDefRate": {
            "nickname": "StaminaGuardReductionMultiplier",
            "tooltip": "Multiplier applied to the percentage of stamina damage blocked by this weapon/shield."
        },
        "spEffectId1": {
            "nickname": "SpecialEffectOnHit0",
            "tooltip": "Special effect applied to struck target (slot 0). Overrides slot 0 of base weapon parameters.",
            "game_type": "SpecialEffectParam"
        },
        "spEffectId2": {
            "nickname": "SpecialEffectOnHit1",
            "tooltip": "Special effect applied to struck target (slot 1). Overrides slot 1 of base weapon parameters.",
            "game_type": "SpecialEffectParam"
        },
        "spEffectId3": {
            "nickname": "SpecialEffectOnHit2",
            "tooltip": "Special effect applied to struck target (slot 2). Overrides slot 2 of base weapon parameters.",
            "game_type": "SpecialEffectParam"
        },
        "residentSpEffectId1": {
            "nickname": "EquippedSpecialEffect0",
            "tooltip": "Special effect granted to character with weapon equipped (slot 0). Overrides slot 0 of base weapon parameters.",
            "game_type": "SpecialEffectParam"
        },
        "residentSpEffectId2": {
            "nickname": "EquippedSpecialEffect1",
            "tooltip": "Special effect granted to character with weapon equipped (slot 1). Overrides slot 1 of base weapon parameters.",
            "game_type": "SpecialEffectParam"
        },
        "residentSpEffectId3": {
            "nickname": "EquippedSpecialEffect2",
            "tooltip": "Special effect granted to character with weapon equipped (slot 2). Overrides slot 2 of base weapon parameters.",
            "game_type": "SpecialEffectParam"
        },
        "materialSetId": {
            "nickname": "UpgradeMaterialOffset",
            "tooltip": "Value to be added to Upgrade Materials field in base weapon parameters."
        },
        "pad[9]": {
            "nickname": "_Pad0",
            "tooltip": "Null padding (9 bytes)."
        }
    },
    "SHADOW_BANK": {
        "lightDegRotX": {
            "nickname": "ShadowSourceRotationX",
            "tooltip": "Rotation (X-axis) of shadow-casting light source."
        },
        "lightDegRotY": {
            "nickname": "ShadowSourceRotationY",
            "tooltip": "Rotation (Y-axis) of shadow-casting light source."
        },
        "densityRatio": {
            "nickname": "ShadowDensityPercentage",
            "tooltip": "Density of cast shadow (0-100), where 100 is the darkest."
        },
        "colR": {
            "nickname": "ShadowRed",
            "tooltip": "Red channel (0-255) of cast shadow."
        },
        "colG": {
            "nickname": "ShadowGreen",
            "tooltip": "Green channel (0-255) of cast shadow."
        },
        "colB": {
            "nickname": "ShadowBlue",
            "tooltip": "Blue channel (0-255) of cast shadow."
        },
        "beginDist": {
            "nickname": "ShadowStartDistance",
            "tooltip": "Minimum distance (m) at which shadows are cast. A value of 0 means the camera's near-clip plane is used."
        },
        "endDist": {
            "nickname": "ShadowEndDistance",
            "tooltip": "Maximum distance (m) at which shadows are cast."
        },
        "calibulateFar": {
            "nickname": "HeadOnDistanceReduction",
            "tooltip": "Shorten the shadow end distance by this distance when facing the light source direction."
        },
        "fadeBeginDist": {
            "nickname": "FadeStartDistance",
            "tooltip": "Shadow starts fading at this distance."
        },
        "fadeDist": {
            "nickname": "FadeDistance",
            "tooltip": "Distance (after start distance) until shadow is fully faded."
        },
        "persedDepthOffset": {
            "nickname": "DepthOffset",
            "tooltip": "Depth offset for shadows. With negative values, self-shadows are less likely to occur."
        },
        "gradFactor": {
            "nickname": "ShadowMapStrength",
            "tooltip": "Negative values weaken the shadow map, positive values strengthen it."
        },
        "shadowVolumeDepth": {
            "nickname": "ShadowVolumeDepth",
            "tooltip": "Increase this value to cast shadows on tall objects such as buildings."
        }
    },
    "SHOP_LINEUP_PARAM": {
        "equipId": {
            "nickname": "ItemID",
            "tooltip": "TODO",
            "dynamic_callback": "ShopReference()"
        },
        "value": {
            "nickname": "SoulCost",
            "tooltip": "Cost of item, in souls."
        },
        "mtrlId": {
            "nickname": "RequiredGood",
            "tooltip": "Good that must be possessed for item to be listed. Used to control appearance of spells in attunement menu."
        },
        "eventFlag": {
            "nickname": "QuantityFlag",
            "tooltip": "Flag value that holds the count of this item that have been sold already."
        },
        "qwcId": {
            "nickname": "QWCID",
            "tooltip": "Unused world tendency condition."
        },
        "sellQuantity": {
            "nickname": "InitialQuantity",
            "tooltip": "Quantity of this item initially available to be sold. Set to -1 for infinite quantity."
        },
        "shopType": {
            "nickname": "ShopMenuType",
            "tooltip": "Determines if this is a standard shop menu or the spell attunement menu."
        },
        "equipType": {
            "nickname": "ItemType",
            "tooltip": "Type of item listed in menu."
        },
        "pad_0[8]": {
            "nickname": "_Pad0",
            "tooltip": "Null padding (8 bytes)."
        }
    },
    "SP_EFFECT_PARAM_ST": {
        "iconId": {
            "nickname": "StatusIcon",
            "tooltip": "Icon that appears in HUD under stamina bar while special effect is active. Set to -1 for no icon.",
            "game_type": "Icon"
        },
        "conditionHp": {
            "nickname": "MaxHPPercentageForEffect",
            "tooltip": "Special effect will only take effect if character's current HP is less than or equal to this percentage (from 0 to 100). Set to -1 for no HP condition."
        },
        "effectEndurance": {
            "nickname": "EffectDuration",
            "tooltip": "Duration of special effect. Set to 0 for an effect that occurs for only one frame (e.g. to award souls) or to -1 for an effect that will last until specifically removed or its source is lost (e.g. rings)."
        },
        "motionInterval": {
            "nickname": "UpdateInterval",
            "tooltip": "Time (in seconds) between applications of the special effect, while active. Set to higher values to have the effect apply less frequently. Set to 0 to have it occur every frame."
        },
        "maxHpRate": {
            "nickname": "MaxHPMultiplier",
            "tooltip": "Multiplier applied to maximum HP."
        },
        "maxMpRate": {
            "nickname": "MaxMPMultiplier",
            "tooltip": "Multiplier applied to maximum MP. (Unused in Dark Souls; does NOT refer to spell usages.)"
        },
        "maxStaminaRate": {
            "nickname": "MaxStaminaMultiplier",
            "tooltip": "Multiplier applied to maximum stamina."
        },
        "slashDamageCutRate": {
            "nickname": "IncomingSlashDamageMultiplier",
            "tooltip": "Multiplier applied to incoming slashing physical damage."
        },
        "blowDamageCutRate": {
            "nickname": "IncomingStrikeDamageMultiplier",
            "tooltip": "Multiplier applied to incoming striking physical damage."
        },
        "thrustDamageCutRate": {
            "nickname": "IncomingThrustDamageMultiplier",
            "tooltip": "Multiplier applied to incoming thrusting physical damage."
        },
        "neutralDamageCutRate": {
            "nickname": "IncomingNeutralDamageMultiplier",
            "tooltip": "Multiplier applied to incoming neutral physical damage."
        },
        "magicDamageCutRate": {
            "nickname": "IncomingMagicDamageMultiplier",
            "tooltip": "Multiplier applied to incoming magic damage."
        },
        "fireDamageCutRate": {
            "nickname": "IncomingFireDamageMultiplier",
            "tooltip": "Multiplier applied to incoming fire damage."
        },
        "thunderDamageCutRate": {
            "nickname": "IncomingLightningDamageMultiplier",
            "tooltip": "Multiplier applied to incoming lightning damage."
        },
        "physicsAttackRate": {
            "nickname": "OutgoingPhysicalDamageMultiplier",
            "tooltip": "Multiplier applied to outgoing physical damage (of any type)."
        },
        "magicAttackRate": {
            "nickname": "OutgoingMagicDamageMultiplier",
            "tooltip": "Multiplier applied to outgoing magic damage."
        },
        "fireAttackRate": {
            "nickname": "OutgoingFireDamageMultiplier",
            "tooltip": "Multiplier applied to outgoing fire damage."
        },
        "thunderAttackRate": {
            "nickname": "OutgoingLightningDamageMultiplier",
            "tooltip": "Multiplier applied to outgoing lightning damage."
        },
        "physicsAttackPowerRate": {
            "nickname": "PhysicalAttackPowerMultiplier",
            "tooltip": "Multiplier applied to character's physical attack power (of any type)."
        },
        "magicAttackPowerRate": {
            "nickname": "MagicAttackPowerMultiplier",
            "tooltip": "Multiplier applied to character's magic attack power."
        },
        "fireAttackPowerRate": {
            "nickname": "FireAttackPowerMultiplier",
            "tooltip": "Multiplier applied to character's fire attack power."
        },
        "thunderAttackPowerRate": {
            "nickname": "LightningAttackPowerMultiplier",
            "tooltip": "Multiplier applied to character's lightning attack power."
        },
        "physicsAttackPower": {
            "nickname": "PhysicalAttackPowerAddition",
            "tooltip": "Value to add to or subtract fromcharacter's physical attack power (of any type)."
        },
        "magicAttackPower": {
            "nickname": "MagicAttackPowerAddition",
            "tooltip": "Value to add to or subtract fromcharacter's magic attack power."
        },
        "fireAttackPower": {
            "nickname": "FireAttackPowerAddition",
            "tooltip": "Value to add to or subtract fromcharacter's fire attack power."
        },
        "thunderAttackPower": {
            "nickname": "LightningAttackPowerAddition",
            "tooltip": "Value to add to or subtract fromcharacter's lightning attack power."
        },
        "physicsDiffenceRate": {
            "nickname": "PhysicalDefenseMultiplier",
            "tooltip": "Multiplier applied to character's physical defense (all types)."
        },
        "magicDiffenceRate": {
            "nickname": "MagicDefenseMultiplier",
            "tooltip": "Multiplier applied to character's magic defense."
        },
        "fireDiffenceRate": {
            "nickname": "FireDefenseMultiplier",
            "tooltip": "Multiplier applied to character's fire defense."
        },
        "thunderDiffenceRate": {
            "nickname": "LightningDefenseMultiplier",
            "tooltip": "Multiplier applied to character's lightning defense."
        },
        "physicsDiffence": {
            "nickname": "PhysicalDefenseAddition",
            "tooltip": "Value to add to or subtract from character's physical defense."
        },
        "magicDiffence": {
            "nickname": "MagicDefenseAddition",
            "tooltip": "Value to add to or subtract from character's magic defense."
        },
        "fireDiffence": {
            "nickname": "FireDefenseAddition",
            "tooltip": "Value to add to or subtract from character's fire defense."
        },
        "thunderDiffence": {
            "nickname": "LightningDefenseAddition",
            "tooltip": "Value to add to or subtract from character's lightning defense."
        },
        "NoGuardDamageRate": {
            "nickname": "NoGuardIncomingDamageMultiplier",
            "tooltip": "Multiplier to use instead of usual multiplier if character is not guarding. (Always set to 0 in vanilla game, which must deactivate it. Only an educated guess that it refers to incoming damage, not outgoing.)",
            "default": 0.0
        },
        "vitalSpotChangeRate": {
            "nickname": "CriticalHitIncomingDamageMultiplier",
            "tooltip": "Multiplier to use instead of usual multiplier if character is hit in a weak spot. (Always set to -1 in vanilla game, which deactivates it. Only an educated guess that it affects incoming damage.)"
        },
        "normalSpotChangeRate": {
            "nickname": "NonCriticalHitIncomingDamageMultiplier",
            "tooltip": "Multiplier to use instead of usual multiplier if character is *not* hit in a weak spot. (Always set to -1 in vanilla game, which deactivates it. Only an educated guess that it affects incoming damage.)"
        },
        "maxHpChangeRate": {
            "nickname": "MaxHPChangeRatio",
            "tooltip": "Appears to be an unused variant of MaxHPMultiplier. Always set to 0."
        },
        "behaviorId": {
            "nickname": "BehaviorToTrigger",
            "tooltip": "Behavior ID to trigger (which can in turn trigger an Attack or Bullet) whenever special effect is applied. Set to -1 to use no behavior.",
            "game_type": "BehaviorParam"
        },
        "changeHpRate": {
            "nickname": "HPReductionPercentage",
            "tooltip": "Percentage reduction of maximum HP (from 0 to 100). Negative values (to -100) will restore that percentage instead. Applied every time the special effect updates."
        },
        "changeHpPoint": {
            "nickname": "HPPointsLost",
            "tooltip": "HP value to subtract (if positive) or add (if negative) to character's current HP on every update of the special effect."
        },
        "changeMpRate": {
            "nickname": "MPReductionPercentage",
            "tooltip": "Percentage reduction of maximum MP (from 0 to 100). Negative values (to -100) will restore that percentage instead. Applied every time the special effect updates. (Unused in Dark Souls 1.)"
        },
        "changeMpPoint": {
            "nickname": "MPPointsLost",
            "tooltip": "MP value to subtract (if positive) or add (if negative) to character's current MP on every update of the special effect. (Unused in Dark Souls 1.)"
        },
        "mpRecoverChangeSpeed": {
            "nickname": "MPRecoverySpeedChange",
            "tooltip": "Points added to or subtracted from MP recovery formula. (Unused in Dark Souls 1.)"
        },
        "changeStaminaRate": {
            "nickname": "StaminaReductionPercentage",
            "tooltip": "Percentage reduction of maximum stamina (from 0 to 100). Negative values (to -100) will restore that percentage instead. Applied every time the special effect updates."
        },
        "changeStaminaPoint": {
            "nickname": "StaminaPointsLost",
            "tooltip": "Stamina value to subtract (if positive) or add (if negative) to character's current stamina on every update of the special effect."
        },
        "staminaRecoverChangeSpeed": {
            "nickname": "StaminaRecoverySpeedChange",
            "tooltip": "Points added to or subtracted from stamina recovery formula. I believe this affects the amount of stamina restored every second. (For reference, a Green Blossom adds 40 points.)"
        },
        "magicEffectTimeChange": {
            "nickname": "MagicEffectTimeChange",
            "tooltip": "Name suggests this changes the duration of magic effects, but it is never used (always zero)."
        },
        "insideDurability": {
            "nickname": "CurrentDurabilityAddition",
            "tooltip": "Amount of durability to subtract (if positive) or add (if negative) to current durability on every update of the special effect. The equipment affected is determined by..."
        },
        "maxDurability": {
            "nickname": "MaxDurabilityAddition",
            "tooltip": "Amount of durability to subtract (if positive) or add (if negative) to the character's maximum durability while the special effect is active. The equipment affected is determined by..."
        },
        "staminaAttackRate": {
            "nickname": "OutgoingStaminaDamageMultiplier",
            "tooltip": "Multiplier applied to the amount of damage dealt to targets' stamina."
        },
        "poizonAttackPower": {
            "nickname": "PoisonDamage",
            "tooltip": "Amount of poison damage (in units of resistance) added to the character on every update. Negative values will heal poison damage instead (e.g. Purple Moss Clump). Unclear how this distinguishes between reducing build-up and actually healing the status."
        },
        "registIllness": {
            "nickname": "ToxicDamage",
            "tooltip": "Amount of toxic damage (in units of resistance) added to the character on every update. Negative values will heal toxic damage instead (e.g. Blooming Purple Moss Clump). Unclear how this distinguishes between reducing build-up and actually healing the status."
        },
        "registBlood": {
            "nickname": "BleedDamage",
            "tooltip": "Amount of bleed damage (in units of resistance) added to the character on every update. Negative values will heal bleed damage instead (e.g. Blood-Red Moss Clump). Unclear how this distinguishes between reducing build-up and actually healing the status."
        },
        "registCurse": {
            "nickname": "CurseDamage",
            "tooltip": "Amount of curse damage (in units of resistance) added to the character on every update. Negative values will heal curse damage instead (e.g. Purging Stone). Unclear how this distinguishes between reducing build-up and actually healing the status."
        },
        "fallDamageRate": {
            "nickname": "FallDamageMultiplier",
            "tooltip": "Multiplier applied to amount of fall damage taken by character. Cannot prevent lethal falls.",
            "default": 1.0
        },
        "soulRate": {
            "nickname": "SoulsFromKillsMultiplier",
            "tooltip": "Multiplier applied to the amount of souls received when enemies or bosses are killed.",
            "default": 1.0
        },
        "equipWeightChangeRate": {
            "nickname": "MaxEquipLoadMultiplier",
            "tooltip": "Multiplier applied to the character's maximum equip load.",
            "default": 1.0
        },
        "allItemWeightChangeRate": {
            "nickname": "MaxItemLoadMultiplier",
            "tooltip": "Multiplier applied to how much the character can carry, equipped or not. Seems to have no effect in Dark Souls 1.",
            "default": 1.0
        },
        "soul": {
            "nickname": "SoulAmountChange",
            "tooltip": "Amount of souls received (if positive) or taken away (if negative) every time the special effect is updated."
        },
        "animIdOffset": {
            "nickname": "AnimationIDOffset",
            "tooltip": "Override default animation ID offset of character, which can change their animation set temporarily."
        },
        "haveSoulRate": {
            "nickname": "SoulRewardMultiplier",
            "tooltip": "Multiplier applied to the amount of souls given to the player when they kill this character (e.g. enemies in NG+)."
        },
        "targetPriority": {
            "nickname": "TargetPriorityChange",
            "tooltip": "Value added to or subtract from this character's priority in the target queue. Higher priority means they are more likely to be targeted by enemies."
        },
        "sightSearchEnemyCut": {
            "nickname": "EnemySightPercentageReduction",
            "tooltip": "Percentage reduction in enemy sight (from 0 to 100) when looking for this character. Not sure if negative values can be used to make this character *more* visible."
        },
        "hearingSearchEnemyCut": {
            "nickname": "EnemyHearingPercentageReduction",
            "tooltip": "Percentage reduction in enemy hearing (from 0 to 100) when looking for this character. Not sure if negative values can be used to make this character *more* audible."
        },
        "grabityRate": {
            "nickname": "AnimationSpeedMultiplier",
            "tooltip": "Multiplier applied to all of this character's animations. Values other than 1 can lead to cool but potentially glitchy behavior (e.g. desynchronized grab animations and missed collision)."
        },
        "registPoizonChangeRate": {
            "nickname": "PoisonResistanceMultiplier",
            "tooltip": "Multiplier applied to character's maximum poison resistance.",
            "default": 1.0
        },
        "registIllnessChangeRate": {
            "nickname": "ToxicResistanceMultiplier",
            "tooltip": "Multiplier applied to character's maximum toxic resistance.",
            "default": 1.0
        },
        "registBloodChangeRate": {
            "nickname": "BleedResistanceMultiplier",
            "tooltip": "Multiplier applied to character's maximum bleed resistance.",
            "default": 1.0
        },
        "registCurseChangeRate": {
            "nickname": "CurseResistanceMultiplier",
            "tooltip": "Multiplier applied to character's maximum curse resistance.",
            "default": 1.0
        },
        "soulStealRate": {
            "nickname": "SoulStealMultiplier",
            "tooltip": "Internal description says 'defense against HP when NPCs are robbed by soul steal'. Probably unused.",
            "default": 1.0
        },
        "lifeReductionRate": {
            "nickname": "EffectDurationMultiplier",
            "tooltip": "Multiplier applied to the duration of the effect specified in EffectDurationMultiplierType. Used only by Hawkeye Gough to reduce poison and toxic duration in vanilla game.",
            "default": 1.0
        },
        "hpRecoverRate": {
            "nickname": "HPRecoveryRate",
            "tooltip": "Multiplier applied to any increase in character's current HP.",
            "default": 1.0
        },
        "replaceSpEffectId": {
            "nickname": "NextSpecialEffect",
            "tooltip": "Special effect to apply to character automatically when this special effect ends (if not terminated manually by an event).",
            "game_type": "SpecialEffectParam"
        },
        "cycleOccurrenceSpEffectId": {
            "nickname": "SpecialEffectPerUpdate",
            "tooltip": "Special effect to apply to character every time this special effect updates (e.g. Symbol of Avarice HP reduction).",
            "game_type": "SpecialEffectParam"
        },
        "atkOccurrenceSpEffectId": {
            "nickname": "SpecialEffectOnAttack",
            "tooltip": "Special effect to apply to any target hit by an attack.  WARNING: This will not trigger unless SpecialStateIndex is set to 152 (Rotten Pine Resin effect), which will in turn cause your weapon to glow purple unless the visual effect is disabled.",
            "game_type": "SpecialEffectParam"
        },
        "guardDefFlickPowerRate": {
            "nickname": "GuardDefenseFlickPowerRate",
            "tooltip": "Unknown; never used."
        },
        "guardStaminaCutRate": {
            "nickname": "GuardStaminaMultiplier",
            "tooltip": "Values larger than 1 mean *less* stamina is used when blocking."
        },
        "rayCastPassedTime": {
            "nickname": "RayCastPassingTime",
            "tooltip": "Internal description says 'Gaze passing: activation time (milliseconds).' Likely unused."
        },
        "changeSuperArmorPoint": {
            "nickname": "PoiseAddition",
            "tooltip": "Amount added (if positive) or subtracted (if negative) from character's poise."
        },
        "bowDistRate": {
            "nickname": "BowRangePercentageChange",
            "tooltip": "Percentage change (from 0 to 100) in bow range. Requires SpecialStateIndex BowBoostRange (168) to work."
        },
        "spCategory": {
            "nickname": "SpecialEffectCategory",
            "tooltip": "Category of special effect. This effect will override (i.e. cancel out) all other active effects with the same category when it is added."
        },
        "categoryPriority": {
            "nickname": "SpecialEffectPriority",
            "tooltip": "Priority ordering for special effect to be applied on each update (lower values are updated first)."
        },
        "saveCategory": {
            "nickname": "SaveCategory",
            "tooltip": "Determines automatic game saving behavior (used for status ailments only). Set to -1 for no saving."
        },
        "changeMagicSlot": {
            "nickname": "AttunementSlotCountChange",
            "tooltip": "Increase (positive) or decrease (negative) number of attunement slots available."
        },
        "changeMiracleSlot": {
            "nickname": "AttunementMiracleSlotCountChange",
            "tooltip": "Miracle slots are not even separate from other magic slots, so this is likely an abandoned field."
        },
        "heroPointDamage": {
            "nickname": "HumanityDamage",
            "tooltip": "Damage applied to soft humanity count. Negative values will add soft humanity."
        },
        "defFlickPower": {
            "nickname": "RiposteDefenseAddition",
            "tooltip": "Value added to or subtracted from defense against riposte attacks."
        },
        "flickDamageCutRate": {
            "nickname": "FlickDamageMultiplier",
            "tooltip": "Multiplier to use instead of usual multiplier on incoming (I assume) riposte attacks. Never used."
        },
        "bloodDamageRate": {
            "nickname": "IncomingBleedDamagePercentage",
            "tooltip": "Percentage of incoming bleed damage received (usually 100)."
        },
        "dmgLv_None": {
            "nickname": "ReplaceNoImpactLevel",
            "tooltip": "Impact level that will occur instead of NoImpact level."
        },
        "dmgLv_S": {
            "nickname": "ReplaceSmallImpactLevel",
            "tooltip": "Impact level that will occur instead of Small impact level."
        },
        "dmgLv_M": {
            "nickname": "ReplaceMediumImpactLevel",
            "tooltip": "Impact level that will occur instead of Medium impact level."
        },
        "dmgLv_L": {
            "nickname": "ReplaceLargeImpactLevel",
            "tooltip": "Impact level that will occur instead of Large impact level."
        },
        "dmgLv_BlowM": {
            "nickname": "ReplaceBlowoffImpactLevel",
            "tooltip": "Impact level that will occur instead of Blowoff impact level."
        },
        "dmgLv_Push": {
            "nickname": "ReplacePushImpactLevel",
            "tooltip": "Impact level that will occur instead of Push impact level."
        },
        "dmgLv_Strike": {
            "nickname": "ReplaceStrikeImpactLevel",
            "tooltip": "Impact level that will occur instead of Strike impact level."
        },
        "dmgLv_BlowS": {
            "nickname": "ReplaceSmallBlowImpactLevel",
            "tooltip": "Impact level that will occur instead of Blow impact level."
        },
        "dmgLv_Min": {
            "nickname": "ReplaceMinimalImpactLevel",
            "tooltip": "Impact level that will occur instead of Minimal impact level."
        },
        "dmgLv_Uppercut": {
            "nickname": "ReplaceLaunchImpactLevel",
            "tooltip": "Impact level that will occur instead of Launch impact level."
        },
        "dmgLv_BlowLL": {
            "nickname": "ReplaceBlowBackwardImpactLevel",
            "tooltip": "Impact level that will occur instead of BlowBackward impact level."
        },
        "dmgLv_Breath": {
            "nickname": "ReplaceBreathBurnImpactLevel",
            "tooltip": "Impact level that will occur instead of BreathBurn impact level."
        },
        "atkAttribute": {
            "nickname": "AttackAttribute",
            "tooltip": "Attack type attached to hits while special effect is active."
        },
        "spAttribute": {
            "nickname": "ElementAttribute",
            "tooltip": "Element attached to hits while special effect is active."
        },
        "stateInfo": {
            "nickname": "SpecialState",
            "tooltip": "Hard-coded special state to use. Also determines visual effect from Special Effect Visuals table."
        },
        "wepParamChange": {
            "nickname": "AffectedWeaponType",
            "tooltip": "Weapon category that is affected by special effect. "
        },
        "moveType": {
            "nickname": "MovementType",
            "tooltip": "Determines how movement is affected. (Does not correspond to Movement param entries.)"
        },
        "lifeReductionType": {
            "nickname": "EffectDurationMultiplierType",
            "tooltip": "Type of effect whose duration is affected by EffectDurationMultiplier. Known values: 2 = poison, 5 = toxic."
        },
        "throwCondition": {
            "nickname": "ThrowCondition",
            "tooltip": "Determines how throws are affected while special effect is active. Values still unknown (rarely used)."
        },
        "addBehaviorJudgeId_condition": {
            "nickname": "AddBehaviorJudgeIDCondition",
            "tooltip": "Unclear; used only to manage the Hydra as more heads are cut off. All other values are -1."
        },
        "addBehaviorJudgeId_add": {
            "nickname": "AddBehaviorJudgeIDAdd",
            "tooltip": "Always zero. Unknown effect. Internal description suggests that this is a constant added to all behavior judge IDs (from TAE) issued by character."
        },
        "effectTargetSelf:1": {
            "nickname": "CanAffectSelf",
            "tooltip": "Effect will target self.",
            "default": true
        },
        "effectTargetFriend:1": {
            "nickname": "CanAffectAlly",
            "tooltip": "Effect will target self.",
            "default": true
        },
        "effectTargetEnemy:1": {
            "nickname": "CanAffectEnemy",
            "tooltip": "Effect will target enemies.",
            "default": true
        },
        "effectTargetPlayer:1": {
            "nickname": "CanAffectPlayer",
            "tooltip": "Effect will target player characters.",
            "default": true
        },
        "effectTargetAI:1": {
            "nickname": "CanAffectAI",
            "tooltip": "Effect will target non-player characters.",
            "default": true
        },
        "effectTargetLive:1": {
            "nickname": "CanAffectPlayers",
            "tooltip": "Effect will target humans.",
            "default": true
        },
        "effectTargetGhost:1": {
            "nickname": "CanAffectPhantoms",
            "tooltip": "Effect will target phantoms (white or black).",
            "default": true
        },
        "effectTargetWhiteGhost:1": {
            "nickname": "CanAffectWhitePhantoms",
            "tooltip": "Effect will target white phantoms.",
            "default": true
        },
        "effectTargetBlackGhost:1": {
            "nickname": "CanAffectBlackPhantoms",
            "tooltip": "Effect will target white phantoms.",
            "default": true
        },
        "effectTargetAttacker:1": {
            "nickname": "CanAffectAttacker",
            "tooltip": "Effect will target character when they attack (e.g. HP drain).",
            "default": true
        },
        "dispIconNonactive:1": {
            "nickname": "DisplayIconWhenInactive",
            "tooltip": "Display icon even when special effect is inactive (not sure what that means). Never enabled."
        },
        "useSpEffectEffect:1": {
            "nickname": "UseVisualEffect",
            "tooltip": "Use visual effect from Special Effect Visuals table (indexed by Special State field)."
        },
        "bAdjustMagicAblity:1": {
            "nickname": "UseIntelligenceScaling",
            "tooltip": "If True, special effect damage will be scaled by character intelligence (I believe)."
        },
        "bAdjustFaithAblity:1": {
            "nickname": "UseFaithScaling",
            "tooltip": "If True, special effect damage will be scaled by character faith (I believe)."
        },
        "bGameClearBonus:1": {
            "nickname": "ForNewGamePlus",
            "tooltip": "If True, this effect will be applied multiple times depending on the NG+ cycle (I think)."
        },
        "magParamChange:1": {
            "nickname": "AffectsMagic",
            "tooltip": "If True, multipliers will be applied to magic attacks."
        },
        "miracleParamChange:1": {
            "nickname": "AffectsMiracles",
            "tooltip": "If True, multipliers will be applied to miracle attacks."
        },
        "clearSoul:1": {
            "nickname": "ClearSoul",
            "tooltip": "Unused Demon's Souls remnant."
        },
        "requestSOS:1": {
            "nickname": "RequestWhitePhantomSummon",
            "tooltip": "Used only by White Sign Soapstone."
        },
        "requestBlackSOS:1": {
            "nickname": "RequestBlackPhantomSummon",
            "tooltip": "Used only by Red Sign Soapstone."
        },
        "requestForceJoinBlackSOS:1": {
            "nickname": "RequestInvasion",
            "tooltip": "Used only be (Cracked) Red Eye Orb."
        },
        "requestKickSession:1": {
            "nickname": "RequestKick",
            "tooltip": "Not used by any item. Likely kicks all clients out of your world."
        },
        "requestLeaveSession:1": {
            "nickname": "RequestReturnToOwnWorld",
            "tooltip": "Used only by Black Separation Crystal."
        },
        "requestNpcInveda:1": {
            "nickname": "RequestNPCInvasion",
            "tooltip": "Used only by Black Eye Orb (Lautrec quest and cut Shiva quest)."
        },
        "noDead:1": {
            "nickname": "Immortal",
            "tooltip": "If True, character cannot die. Never used in vanilla game."
        },
        "bCurrHPIndependeMaxHP:1": {
            "nickname": "CurrentHPIgnoresMaxHPChange",
            "tooltip": "If True, changes to maximum HP will not affect current HP (unless it must be reduced to new maximum)."
        },
        "corrosionIgnore:1": {
            "nickname": "IgnoreCorrosion",
            "tooltip": "If True, character will ignore corrosion damage to durability. Used only by Demon's Souls junk."
        },
        "sightSearchCutIgnore:1": {
            "nickname": "IgnoreSightReduction",
            "tooltip": "If True, character will ignore any changes to their sight range from other special effects. Used only by Demon's Souls junk."
        },
        "hearingSearchCutIgnore:1": {
            "nickname": "IgnoreHearingReduction",
            "tooltip": "If True, character will ignore any changes to their hearing range from other special effects. Used only by Demon's Souls junk."
        },
        "antiMagicIgnore:1": {
            "nickname": "IgnoreMagicDisabling",
            "tooltip": "If True, character will ignore any special effect that attempts to disable their magic. Used only by Demon's Souls junk."
        },
        "fakeTargetIgnore:1": {
            "nickname": "IgnoreFakeTargets",
            "tooltip": "Unknown; never used."
        },
        "fakeTargetIgnoreUndead:1": {
            "nickname": "IgnoreUndeadFakeTargets",
            "tooltip": "Unknown; never used."
        },
        "fakeTargetIgnoreAnimal:1": {
            "nickname": "IgnoreBeastFakeTargets",
            "tooltip": "Unknown; never used."
        },
        "grabityIgnore:1": {
            "nickname": "IgnoreGravity",
            "tooltip": "Ignore gravity. (Not sure if this actually works.)"
        },
        "disablePoison:1": {
            "nickname": "PoisonImmunity",
            "tooltip": "Immune to poison."
        },
        "disableDisease:1": {
            "nickname": "ToxicImmunity",
            "tooltip": "Immune to toxic."
        },
        "disableBlood:1": {
            "nickname": "BleedImmunity",
            "tooltip": "Immune to curse."
        },
        "disableCurse:1": {
            "nickname": "CurseImmunity",
            "tooltip": "Immune to poison."
        },
        "enableCharm:1": {
            "nickname": "EnableCharming",
            "tooltip": "Not sure if this refers to the Alluring Skull. May not work at all."
        },
        "enableLifeTime:1": {
            "nickname": "EnableLifeTime",
            "tooltip": "Internal description: 'Is the life extended when setting a flag by TAE?'. Effect unknown. Used by Dragon Head and Torso Stones and some internal summon-related effects."
        },
        "hasTarget : 1": {
            "nickname": "HasTarget",
            "tooltip": "For unused 'evil eye' mechanics, probably a Demon's Souls remnant."
        },
        "isFireDamageCancel:1": {
            "nickname": "FireImmunity",
            "tooltip": "Immune to fire damage. Never enabled, and may not actually work. Needs testing."
        },
        "isExtendSpEffectLife:1": {
            "nickname": "AffectedByEffectExtension",
            "tooltip": "If True, this special effect will be affected by special state (193), i.e. the effect used by the vanilla Lingering Dragoncrest Ring, that extends effect durations."
        },
        "requestLeaveColiseumSession:1": {
            "nickname": "RequestColiseumExit",
            "tooltip": "Used only by Purple Coward's Crystal."
        },
        "pad_2:4": {
            "nickname": "_BitPad0",
            "tooltip": "Null padding (4 bits)."
        },
        "vowType0:1": {
            "nickname": "AffectsCharactersWithNoCovenant",
            "tooltip": "Determines if this special effect will affect characters with no covenant.",
            "default": true
        },
        "vowType1:1": {
            "nickname": "AffectsWayOfWhite",
            "tooltip": "Determines if this special effect will affect characters in the Way of White covenant.",
            "default": true
        },
        "vowType2:1": {
            "nickname": "AffectsPrincessGuard",
            "tooltip": "Determines if this special effect will affect characters in the Princess's Guard covenant.",
            "default": true
        },
        "vowType3:1": {
            "nickname": "AffectsWarriorOfSunlight",
            "tooltip": "Determines if this special effect will affect characters in the Warriors of Sunlight covenant.",
            "default": true
        },
        "vowType4:1": {
            "nickname": "AffectsDarkwraith",
            "tooltip": "Determines if this special effect will affect characters in the Darkwraith covenant.",
            "default": true
        },
        "vowType5:1": {
            "nickname": "AffectsPathOfTheDragon",
            "tooltip": "Determines if this special effect will affect characters in the Path of the Dragon covenant.",
            "default": true
        },
        "vowType6:1": {
            "nickname": "AffectsGravelordServant",
            "tooltip": "Determines if this special effect will affect characters in the Gravelord Servant covenant.",
            "default": true
        },
        "vowType7:1": {
            "nickname": "AffectsForestHunter",
            "tooltip": "Determines if this special effect will affect characters in the Forest Hunters covenant.",
            "default": true
        },
        "vowType8:1": {
            "nickname": "AffectsDarkmoonBlade",
            "tooltip": "Determines if this special effect will affect characters in the Blades of the Darkmoon covenant.",
            "default": true
        },
        "vowType9:1": {
            "nickname": "AffectsChaosServant",
            "tooltip": "Determines if this special effect will affect characters in the Chaos Servants covenant.",
            "default": true
        },
        "vowType10:1": {
            "nickname": "AffectsCovenant10",
            "tooltip": "Determines if this special effect will affect characters in unused covenant.",
            "default": true
        },
        "vowType11:1": {
            "nickname": "AffectsCovenant11",
            "tooltip": "Determines if this special effect will affect characters in unused covenant.",
            "default": true
        },
        "vowType12:1": {
            "nickname": "AffectsCovenant12",
            "tooltip": "Determines if this special effect will affect characters in unused covenant.",
            "default": true
        },
        "vowType13:1": {
            "nickname": "AffectsCovenant13",
            "tooltip": "Determines if this special effect will affect characters in unused covenant.",
            "default": true
        },
        "vowType14:1": {
            "nickname": "AffectsCovenant14",
            "tooltip": "Determines if this special effect will affect characters in unused covenant.",
            "default": true
        },
        "vowType15:1": {
            "nickname": "AffectsCovenant15",
            "tooltip": "Determines if this special effect will affect characters in unused covenant.",
            "default": true
        },
        "pad1[11]": {
            "nickname": "_Pad0",
            "tooltip": "Null padding (11 bytes)."
        }
    },
    "SP_EFFECT_VFX_PARAM_ST": {
        "midstSfxId": {
            "nickname": "OngoingVisualEffect",
            "tooltip": "Ongoing visual effect for special effect. -1 is no effect.",
            "game_type": "VisualEffect"
        },
        "midstSeId": {
            "nickname": "OngoingSoundEffect",
            "tooltip": "Ongoing sound effect for special effect. -1 is no effect."
        },
        "initSfxId": {
            "nickname": "InitialVisualEffect",
            "tooltip": "One-off visual effect when special effect begins. -1 is no effect.",
            "game_type": "VisualEffect"
        },
        "initSeId": {
            "nickname": "InitialSoundEffect",
            "tooltip": "One-off sound effect when special effect begins. -1 is no effect. (Does not appear to work.)"
        },
        "finishSfxId": {
            "nickname": "FinishVisualEffect",
            "tooltip": "One-off visual effect when special effect ends. -1 is no effect.",
            "game_type": "VisualEffect"
        },
        "finishSeId": {
            "nickname": "FinishSoundEffect",
            "tooltip": "One-off sound effect when special effect ends. -1 is no effect. (Does not appear to work.)"
        },
        "camouflageBeginDist": {
            "nickname": "HideStartDistance",
            "tooltip": "Closest distance at which effect is disabled."
        },
        "camouflageEndDist": {
            "nickname": "HideEndDistance",
            "tooltip": "Furthest distance at which effect is disabled."
        },
        "transformProtectorId": {
            "nickname": "TransformationArmorID",
            "tooltip": "Transformation armor ID. Unknown effect. -1 is no armor.",
            "game_type": "ArmorParam"
        },
        "midstDmyId": {
            "nickname": "OngoingModelPoint",
            "tooltip": "Model point where ongoing effects are centered. -1 is model root.",
            "game_type": "ModelDummy"
        },
        "initDmyId": {
            "nickname": "InitialModelPoint",
            "tooltip": "Model point where initial effect is centered. -1 is model root.",
            "game_type": "ModelDummy"
        },
        "finishDmyId": {
            "nickname": "FinishModelPoint",
            "tooltip": "Model point where finish effect is centered. -1 is model root.",
            "game_type": "ModelDummy"
        },
        "effectType": {
            "nickname": "EffectType",
            "tooltip": "Type of effect. Enum not yet mapped."
        },
        "soulParamIdForWepEnchant": {
            "nickname": "WeaponEnchantmentSoulParam",
            "tooltip": "Internal description: 'Soul Param ID for weapon enchantment.' Enum not yet mapped."
        },
        "playCategory": {
            "nickname": "PlaybackCategory",
            "tooltip": "Only one effect in each category can be active at once (determined by PlaybackPriority)."
        },
        "playPriority": {
            "nickname": "PlaybackPriority",
            "tooltip": "Only the lowest-numbered-priority effect in each PlaybackCategory will be active at once."
        },
        "existEffectForLarge:1": {
            "nickname": "LargeEffectExists",
            "tooltip": "Indicates if a large version of the effect exists."
        },
        "existEffectForSoul:1": {
            "nickname": "SoulEffectExists",
            "tooltip": "Indicates if a 'soul version' of the effect exists."
        },
        "effectInvisibleAtCamouflage:1": {
            "nickname": "InvisibleWhenHidden",
            "tooltip": "Indicates if the effect should be invisible when hidden (unclear exactly what this means)."
        },
        "useCamouflage:1": {
            "nickname": "HidingActive",
            "tooltip": "I believe this determines if the hiding range fields are actually used."
        },
        "invisibleAtFriendCamouflage:1": {
            "nickname": "InvisibleWhenFriendHidden",
            "tooltip": "Unclear."
        },
        "addMapAreaBlockOffset:1": {
            "nickname": "AddMapAreaBlockOffset",
            "tooltip": "If enabled, the three-digit area/block number for the current map will be added to all effect IDs (e.g. m13_02 -> adds 132)."
        },
        "halfCamouflage:1": {
            "nickname": "HalfHiddenOnly",
            "tooltip": "If enabled, effects are made semi-transparent rather than fully hidden."
        },
        "isFullBodyTransformProtectorId:1": {
            "nickname": "ArmorTransformationIsFullBody",
            "tooltip": "Indicates whether the armor transformation should be applied to the whole body.",
            "game_type": "ArmorParam"
        },
        "isInvisibleWeapon:1": {
            "nickname": "HideWeapon",
            "tooltip": "Weapon is invisible if enabled."
        },
        "isSilence:1": {
            "nickname": "IsSilent",
            "tooltip": "Movement noises are silenced if enabled."
        },
        "pad_1:6": {
            "nickname": "_BitPad0",
            "tooltip": "Null padding (6 bits)."
        },
        "pad[16]": {
            "nickname": "_Pad0",
            "tooltip": "Null padding (16 bytes)."
        }
    },
    "TALK_PARAM_ST": {
        "msgId": {
            "nickname": "SubtitleText",
            "tooltip": "Text ID for dialogue subtitle."
        },
        "voiceId": {
            "nickname": "VoiceSound",
            "tooltip": "Sound ID (voice) for dialogue."
        },
        "motionId": {
            "nickname": "TalkingAnimation",
            "tooltip": "Animation used for talking (-1 for default, or no animation). Usually 7000 (e.g. Fair Lady) or 7001 (e.g. Andre) when used."
        },
        "returnPos": {
            "nickname": "ReturnConversation",
            "tooltip": "Conversation ID to use instead if the player has 'returned' to this conversation. Used exactly once for one line by the Crestfallen Warrior, so presumably works, but probably not useful.",
            "default": 0
        },
        "reactionId": {
            "nickname": "ReactionConversation",
            "tooltip": "Conversation ID to use as 'reaction'. Always -1."
        },
        "eventId": {
            "nickname": "EventFlag",
            "tooltip": "Flag that is enabled when conversation plays (I assume). Used exactly once, for the same Crestfallen Warrior line that uses the ReturnConversation field."
        },
        "isMotionLoop": {
            "nickname": "IsMotionLoop",
            "tooltip": "If True, specified TalkingAnimation will loop while dialogue is being spoken. Always True for any entry that has a non-default TalkingAnimation (e.g. Andre)."
        },
        "pad0[7]": {
            "nickname": "_Pad0",
            "tooltip": "Null padding (7 bytes)."
        }
    },
    "THROW_INFO_BANK": {
        "AtkChrId": {
            "nickname": "AttackingCharacterModel",
            "tooltip": "Model ID of attacking character."
        },
        "DefChrId": {
            "nickname": "DefendingCharacterModel",
            "tooltip": "Model ID of defending character."
        },
        "Dist": {
            "nickname": "MaxDistance",
            "tooltip": "Maximum distance at which throw can be triggered."
        },
        "DiffAngMin": {
            "nickname": "MinDifferenceInFacingAngle",
            "tooltip": "Minimum angular difference between attacker's facing direction and defender's facing direction."
        },
        "DiffAngMax": {
            "nickname": "MaxDifferenceInFacingAngle",
            "tooltip": "Maximum angular difference between attacker's facing direction and defender's facing direction."
        },
        "upperYRange": {
            "nickname": "MaxDistanceAbove",
            "tooltip": "Maximum distance that defender can be above attacker."
        },
        "lowerYRange": {
            "nickname": "MaxDistanceBelow",
            "tooltip": "Maximum distance that defender can be below attacker."
        },
        "diffAngMyToDef": {
            "nickname": "MaxAngleToDefender",
            "tooltip": "Maximum angular difference between attacker's direction and the direction of the defender."
        },
        "throwTypeId": {
            "nickname": "ThrowID",
            "tooltip": "Throw ID that should be specified in Attacks to use this throw."
        },
        "atkAnimId": {
            "nickname": "AttackerAnimation",
            "tooltip": "Animation played by attacker during throw.",
            "game_type": "Animation"
        },
        "defAnimId": {
            "nickname": "DefenderAnimation",
            "tooltip": "Animation played by defender during throw.",
            "game_type": "Animation"
        },
        "escHp": {
            "nickname": "MinHPPercentageForEscape",
            "tooltip": "Minimum HP percentage required to escape the throw early by mashing buttons. (Not sure if 0 prevents any escape, or if escapes are disabled by another parameter like"
        },
        "selfEscCycleTime": {
            "nickname": "EscapeCycleTime",
            "tooltip": "Time of escape cycle, in milliseconds. Not sure exactly what it does. Set to 100 milliseconds for throws that can be escaped, and zero otherwise."
        },
        "sphereCastRadiusRateTop": {
            "nickname": "SphereCastUpperRadiusRatio",
            "tooltip": "Determines size of upper hemisphere of spherecast. I believe this is a percentage relative to the model size, so a value of 80 will send out a sphere with a radius that is 0.8 times the attacker's model size."
        },
        "sphereCastRadiusRateLow": {
            "nickname": "SphereCastLowerRadiusRatio",
            "tooltip": "Determines size of lower hemisphere of spherecast. I believe this is a percentage relative to the model size, so a value of 80 will send out a sphere with a radius that is 0.8 times the attacker's model size."
        },
        "PadType": {
            "nickname": "ButtonMashType",
            "tooltip": "Determines buttons that can be mashed to escape. Enumeration is unknown, but it is set to 3 for the Centipede Demon grab, Male Ghost grab, and Dark Hand grab, and 1 for every other throw."
        },
        "AtkEnableState": {
            "nickname": "AttackEnabled",
            "tooltip": "Internal description says 'Set the throwable throwable state type' (?). Set to 1 for all player backstabs and ripostes, and 0 otherwise (including player plunging attacks and all enemy throws)."
        },
        "atkSorbDmyId": {
            "nickname": "SnapToAttackerModelPoint",
            "tooltip": "Model point ID on attacker that defender will be snapped to. If this is zero, 'Snap To Defender Model Point' should be non-zero, and vice versa.",
            "game_type": "ModelDummy"
        },
        "defSorbDmyId": {
            "nickname": "SnapToDefenderModelPoint",
            "tooltip": "Model point ID on defender that attacker will be snapped to. If this is zero, 'Snap To Attacker Model Point' should be non-zero, and vice versa.",
            "game_type": "ModelDummy"
        },
        "throwType": {
            "nickname": "ThrowType",
            "tooltip": "Type of throw. Not sure what uses this, but it could affect various things."
        },
        "selfEscCycleCnt": {
            "nickname": "EscapeCycleCount",
            "tooltip": "Internal description says 'number of self-throwing cycles'. Always set to 1 when EscapeCycleTime is set to 100 (and MinHPPercentageForEscape is almost always 25). Not sure how it determines *when* you can escape the throw."
        },
        "dmyHasChrDirType": {
            "nickname": "ModelPointCharacterDirectionType",
            "tooltip": "'Direction of model point possessed character when thrown'. Set to 1 for the Armored Tusk backstab, 255 for the Iron Golem and Gaping Dragon grabs, and 0 otherwise."
        },
        "isTurnAtker:1": {
            "nickname": "AttackerTurns",
            "tooltip": "Attacker will turn when throw begins (presumably before model point snapping occurs)."
        },
        "isSkipWepCate:1": {
            "nickname": "SkipAttackerWeaponCategoryCheck",
            "tooltip": "If True, the weapon category check for the attacker will be skipped. Enabled only for Dark Hand drain."
        },
        "isSkipSphereCast:1": {
            "nickname": "SkipSphereCast",
            "tooltip": "If True, the sphere cast check will be skipped. Usually False, but True for the coffin stab, Armored Tusk backstab, and a few large enemy grabs. (Presumably, if False, the throw trigger relies on distance and character angles only and is generally easier to trigger.)"
        },
        "pad0:5": {
            "nickname": "_BitPad0",
            "tooltip": "Null padding (5 bits)."
        },
        "pad1[4]": {
            "nickname": "_Pad0",
            "tooltip": "Null padding (4 bytes)."
        }
    },
    "TONE_CORRECT_BANK": {
        "brightnessR": {
            "nickname": "BrightnessRed",
            "tooltip": "Red channel (relative to 1) of tone correct brightness."
        },
        "brightnessG": {
            "nickname": "BrightnessGreen",
            "tooltip": "Green channel (relative to 1) of tone correct brightness."
        },
        "brightnessB": {
            "nickname": "BrightnessBlue",
            "tooltip": "Blue channel (relative to 1) of tone correct brightness."
        },
        "contrastR": {
            "nickname": "ContrastRed",
            "tooltip": "Red channel (relative to 1) of tone correct contrast."
        },
        "contrastG": {
            "nickname": "ContrastGreen",
            "tooltip": "Green channel (relative to 1) of tone correct contrast."
        },
        "contrastB": {
            "nickname": "ContrastBlue",
            "tooltip": "Blue channel (relative to 1) of tone correct contrast."
        },
        "saturation": {
            "nickname": "SaturationCorrection",
            "tooltip": "Color saturation correction value."
        },
        "hue": {
            "nickname": "HueCorrection",
            "tooltip": "Color hue correction value."
        }
    },
    "TONE_MAP_BANK": {
        "bloomBegin": {
            "nickname": "NearBloomThreshold",
            "tooltip": "Near light blooming begins when brightness exceeds this threshold.",
            "default": 0
        },
        "bloomMul": {
            "nickname": "NearBloomMultiplier",
            "tooltip": "Near light blooming multiplier.",
            "default": 0
        },
        "bloomBeginFar": {
            "nickname": "FarBloomThreshold",
            "tooltip": "Far light blooming begins when brightness exceeds this threshold.",
            "default": 0
        },
        "bloomMulFar": {
            "nickname": "FarBloomMultiplier",
            "tooltip": "Far light blooming multiplier.",
            "default": 0
        },
        "bloomNearDist": {
            "nickname": "NearBloomEndDistance",
            "tooltip": "Near bloom parameters apply up to this maximum distance."
        },
        "bloomFarDist": {
            "nickname": "FarBloomStartDistance",
            "tooltip": "Far bloom parameters apply beyond this minimum distance."
        },
        "grayKeyValue": {
            "nickname": "OverallBrightness",
            "tooltip": "Larger values make the screen brighter overall."
        },
        "minAdaptedLum": {
            "nickname": "MinimumAdaptationBrightness",
            "tooltip": "Minimum brightness for tone adaptation. Smaller values mean that darker places will be adapted."
        },
        "maxAdapredLum": {
            "nickname": "MaximumAdaptationBrightness",
            "tooltip": "Maximum brightness for tone adaptation. Larger values mean that brighter places will be adapted."
        },
        "adaptSpeed": {
            "nickname": "AdaptationSpeed",
            "tooltip": "Tone adaptation speed."
        },
        "lightShaftBegin": {
            "nickname": "LightShaftThreshold",
            "tooltip": "Light shafts will appear when brightness exceeds this threshold."
        },
        "pad_0[3]": {
            "nickname": "_Pad0",
            "tooltip": "Null padding (3 bytes)."
        },
        "lightShaftPower": {
            "nickname": "LightShaftMagnitude",
            "tooltip": "Light shaft magnitude (0 means no light shafts)."
        },
        "lightShaftAttenRate": {
            "nickname": "LightShaftAttenuationRate",
            "tooltip": "Smaller values will shorten the light shafts more."
        }
    }
}