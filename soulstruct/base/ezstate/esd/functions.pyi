"""Full list of ESD (EzState) constants and commands that are useable in a decompiled ESP script.

Note that 'Talk' ESD files can only use 'Talk' commands, and same for 'Chr' ESD files. The command tables are completely
different for the two file types.

This is not just a stub file - it is parsed by `functions.py` to construct the ESD command dictionaries.

Currently identical for all (supported) games.
"""
import typing as tp

from soulstruct.darksouls1ptde.game_types.internal_types import ESDType


COMMANDS: dict[ESDType, dict[int, dict[int, tuple]]]
COMMANDS_BANK_ID_BY_TYPE_NAME: dict[tuple[ESDType, str], tuple[int, int]]
TEST_FUNCTIONS: dict[ESDType, dict[int, tuple]]
TEST_FUNCTIONS_ID_BY_TYPE_NAME: dict[tuple[ESDType, str], int]
ATTACK_REQUEST_TYPE: dict[int, str]

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
# ~~~~~~~~~~~~~~~ CONSTANTS ~~~~~~~~~~~~~~~ #
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #

CALL_STATE_MACHINE: dict[int, tp.Callable]
MACHINE_ARGS: dict[int, tp.Any]
MACHINE_CALL_STATUS = ...
ONGOING = ...

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
# ~~~~~~~~~~~~~~~ COMMANDS ~~~~~~~~~~~~~~~ #
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #

# ~~~~~~~~~~~ #
# ~~~ CHR ~~~ #
# ~~~~~~~~~~~ #

# command chr[1][0]
def ChangeGeneralAnim(anim_id: int, layer_index: int, blend: float, is_loop: int): ...

# command chr[1][1]
def ChangeUpperBodyAnim(): ...

# command chr[1][2]
def ChangeStayAnim(): ...

# command chr[1][3]
def ChangeGeneralAnimCategorized(anim_category, anim_id, layer_index, blend, is_loop): ...

# command chr[1][4]
def ChangeUpperBodyAnimCategorized(): ...

# command chr[1][5]
def ChangeGeneralAnimAdditiveCategorized(): ...

# command chr[1][6]
def ChangeUpperBodyAnimAdditiveCategorized(): ...

# command chr[1][7]
def ChangeGeneralAnimCategorizedMatchPlaybackTime(): ...

# command chr[1][8]
def ChangeUpperBodyAnimCategorizedMatchPlaybackTime(): ...

# command chr[1][9]
def SetAnimIDOffset(): ...

# command chr[1][10]
def SetAdditiveBlendAnimation(): ...

# command chr[1][11]
def SetAdditiveBlendAnimationSlotted(): ...

# command chr[1][12]
def ChangeBlendAnimationCategorized(): ...

# command chr[1][13]
def ChangeUpperAndLowerBodySyncedAnimCategorized(): ...

# command chr[1][100]
def SwitchActiveActionState(): ...

# command chr[1][101]
def SwitchMotion(): ...

# command chr[1][102]
def SetThrowAttackTypePossible(): ...

# command chr[1][103]
def SetThrowDefenseTypePossible(): ...

# command chr[1][104]
def SwitchEquippedWeapon(): ...

# command chr[1][105]
def SetReadyForAtkFinish(): ...

# command chr[1][106]
def SetEquipmentChangeable(): ...

# command chr[1][107]
def SetUnableToDrop(): ...

# command chr[1][108]
def IssueMessageIDToEvents(): ...

# command chr[1][109]
def SetAttackType(): ...

# command chr[1][110]
def SetNoStaminaRecover(): ...

# command chr[1][111]
def Command_chr_1_111(): ...  # TODO

# command chr[1][112]
def SetAIBusyDoingAction(): ...

# command chr[1][113]
def BowTurn(): ...

# command chr[1][114]
def SetIsHoldingBow(): ...

# command chr[1][115]
def SwitchSpecificRangeMode(): ...

# command chr[1][116]
def SwitchSpecialMotion(): ...

# command chr[1][117]
def SetIsWeaponChanging(): ...

# command chr[1][118]
def SetIsItemInUse(): ...

# command chr[1][119]
def SetIsItemAnimPlaying(): ...

# command chr[1][120]
def RemoveBinoculars(): ...

# command chr[1][121]
def SetIsMagicInUse(): ...

# command chr[1][122]
def IsHeadTurnPossible(): ...

# command chr[1][123]
def ChangeHoveringState(): ...

# command chr[1][124]
def ChangeToSpecialStay(): ...

# command chr[1][125]
def OpenMenuWhenUsingItem(): ...

# command chr[1][126]
def OpenMenuWhenUsingMagic(): ...

# command chr[1][127]
def BlowDamageTurn(): ...

# command chr[1][128]
def SetDeathStay(): ...

# command chr[1][129]
def CloseMenuWhenUsingItem(): ...

# command chr[1][130]
def CloseMenuWhenUsingMagic(): ...

# command chr[1][131]
def AdditionNoTurning(): ...

# command chr[1][132]
def WhiffPossibility(): ...

# command chr[1][133]
def ChangeFlightStatus(): ...

# command chr[1][134]
def SetStatsNotMetAnimID(): ...

# command chr[1][135]
def ShowFixedYAxisDirectionDisplay(): ...

# command chr[1][136]
def SetLadderActionState(): ...

# command chr[1][137]
def ForceCancelThrowAnim(): ...

# command chr[1][138]
def SetThrowState(): ...

# command chr[1][139]
def LadderSlideStart(): ...

# command chr[1][140]
def SetIsEventActionPossible(): ...

# command chr[1][141]
def RequestThrowAnimInterrupt(): ...

# command chr[1][142]
def SetHandStateOfLadder(): ...

# command chr[1][143]
def SetDamageAnimType(): ...

# command chr[1][144]
def SlideTurn(): ...

# command chr[1][145]
def InterruptAttack(): ...

# command chr[1][146]
def MidairDeathWarp(): ...

# command chr[1][147]
def ClearSlopeInfo(): ...

# command chr[1][148]
def StateInputRecieve(): ...

# command chr[1][149]
def EquipmentChangeableFromMenu(): ...

# command chr[1][200]
def SetVariable(): ...

# command chr[1][151]
def AimAtSelfPosition(): ...

# command chr[1][152]
def StateIdentifier(): ...

# command chr[1][153]
def DoAIReplanningAtCancelTiming(): ...

# command chr[1][154]
def DenyEventAnimPlaybackDemand(): ...

# command chr[1][155]
def InvokeBackstab(): ...

# command chr[1][156]
def WeaponParamReferent(): ...

# command chr[1][157]
def AINotifyAttackType(): ...

# command chr[1][158]
def SetAutoTrapTarget(): ...

# command chr[1][159]
def ClearAutoTrapTarget(): ...

# command chr[1][1000]
def AddHP(amount): ...

# command chr[1][1001]
def AddStamina(amount): ...

# command chr[1][1100]
def SyncAtInit_Active(): ...

# command chr[1][1101]
def SyncAtInit_Passive(): ...

# command chr[1][2000]
def SetIsTurnAnimInProgress(): ...

# command chr[1][2001]
def CalculateTurnAnimCorrectionFactor(): ...

# command chr[1][2002]
def SetStealthState(): ...

# command chr[1][2003]
def SetMoveMult(): ...

# command chr[1][2004]
def SpEffectAccomodation(): ...

# command chr[1][2005]
def StealthyHighSpeedThrowEffective(): ...

# command chr[1][2006]
def SetTurnSpeed(): ...

# These are likely only added in Dark Souls 3.

# command chr[1][2007]
def SetCeremonyState(): ...

# command chr[1][2008]
def SetDamageMotionBlendRatio(): ...

# command chr[1][2009]
def SetForceTurnTarget(): ...

# command chr[1][2010]
def InSpecialGuard(): ...

# command chr[1][2011]
def SetWeaponCancelType(): ...

# command chr[1][2012]
def IsPreciseShootingPossible(): ...

# command chr[1][2013]
def ChooseBowAndArrowSlot(): ...

# command chr[1][2014]
def Set4DirectionMovementThreshold(): ...

# command chr[1][2015]
def LockonSystemUnableToTurnAngle(): ...

# command chr[1][2016]
def ReserveArtsPointsUse(): ...

# command chr[1][2017]
def SetArtsPointFEDisplayState(): ...

# command chr[1][2018]
def LockonFixedAngleCancel(): ...

# End of DS3 only.

# command chr[1][2019]
def TurnToLockonTargetImmediately(): ...

# command chr[1][2020]
def SetSpecialInterpolation(): ...

# command chr[1][2021]
def LadderSlideDownCancel(): ...

# command chr[1][2022]
def DisableMagicIDSwitching(): ...

# command chr[1][2023]
def DisableToolIDSwitching(): ...

# command chr[1][9000]
def DebugLogOutput(text): ...

# These are likely only added in Dark Souls 3.

# command chr[1][9001]
def Test_SpEffectDelete(): ...

# command chr[1][9002]
def Test_SpEffectTypeSpecifyDelete(): ...

# command chr[1][9100]
def AnimationCancel(): ...

# command chr[1][9101]
def RequestAIReprogramming(): ...

# command chr[1][9102]
def MarkOfGreedyPersonSlipDamageDisable(): ...

# command chr[1][9103]
def ResetInputQueue(): ...

# command chr[1][9104]
def SetIsEventAnim(): ...

# command chr[1][9105]
def AIAttackState(): ...

# End of DS3 only.

# ~~~~~~~~~~~~ #
# ~~~ TALK ~~~ #
# ~~~~~~~~~~~~ #

# command talk[1][0]
def DebugEvent(message: str): ...

# command talk[1][1]
def TalkToPlayer(conversation: int, unk1: int, unk2: int): ...

# command talk[1][2]
def InvokeEvent(*args): ...

# command talk[1][3]
def StopAttacking(*args): ...

# command talk[1][4]
def Attack(*args): ...

# command talk[1][5]
def RemoveMyAggro(*args): ...

# command talk[1][6]
def DisplayOneLineHelp(text_id: int): ...

# command talk[1][7]
def TurnToFacePlayer(*args): ...

# command talk[1][8]
def ForceEndTalk(unk1: int): ...

# command talk[1][9]
def ClearTalkProgressData(): ...

# command talk[1][10]
def ShowShopMessage(*args): ...

# command talk[1][11]
def SetFlagState(flag: int, state: int): ...

# command talk[1][12]
def CloseShopMessage(): ...

# command talk[1][13]
def OpenCampMenu(*args): ...

# command talk[1][14]
def CloseCampMenu(*args): ...

# command talk[1][15]
def ChangeTeamType(*args): ...

# command talk[1][16]
def SetDefaultTeamType(*args): ...

# command talk[1][17]
def OpenGenericDialog(unk1: int, text_id: int, unk2: int, unk3: int, display_distance: int): ...

# command talk[1][18]
def ForceCloseGenericDialog(): ...

# command talk[1][19]
def AddTalkListData(menu_index: int, menu_text: int, required_flag: int): ...

# command talk[1][20]
def ClearTalkListData(*args): ...

# command talk[1][21]
def RequestMoviePlayback(*args): ...

# command talk[1][22]
def OpenRegularShop(*args): ...

# command talk[1][23]
def OpenRepairShop(): ...

# command talk[1][24]
def OpenEnhanceShop(category: int): ...

# command talk[1][25]
def OpenHumanityMenu(*args): ...

# command talk[1][26]
def OpenMagicShop(*args): ...

# command talk[1][27]
def OpenMiracleShop(*args): ...

# command talk[1][28]
def OpenMagicEquip(first_id: int, last_id: int): ...

# command talk[1][29]
def OpenMiracleEquip(*args): ...

# command talk[1][30]
def OpenRepository(): ...  # Bottomless Box in DS1

# command talk[1][31]
def OpenSoul(): ...

# command talk[1][32]
def CloseMenu(*args): ...

# command talk[1][33]
def SetEventFlagRange(*args): ...

# command talk[1][34]
def OpenDepository(*args): ...

# command talk[1][35]
def ClearTalkActionState(): ...

# command talk[1][36]
def ClearTalkDisabledState(): ...

# command talk[1][37]
def SetTalkDisableStateMaxDuration(*args): ...

# command talk[1][38]
def SetUpdateDistance(distance: int): ...

# command talk[1][39]
def ClearPlayerDamageInfo(): ...

# command talk[1][40]
def OfferHumanity(): ...

# command talk[1][41]
def StartWarpMenuInit(): ...

# command talk[1][42]
def StartBonfireAnimLoop(): ...

# command talk[1][43]
def EndBonfireKindleAnimLoop(): ...

# command talk[1][46]
def OpenSellShop(*args): ...

# command talk[1][47]
def ChangePlayerStats(unk1: int, unk2: int, unk3: int): ...  # TODO: Map enums for this.

# command talk[1][48]
def OpenEquipmentChangeOfPurposeShop(*args): ...

# command talk[1][49]
def CombineMenuFlagAndEventFlag(*args): ...

# command talk[1][50]
def RequestSave(*args): ...

# command talk[1][51]
def ChangeMotionOffsetID(*args): ...

# command talk[1][52]
def PlayerEquipmentQuantityChange(*args): ...

# command talk[1][53]
def RequestUnlockTrophy(*args): ...

# command talk[1][54]
def EnterBonfireEventRange(*args): ...

# command talk[1][55]
def SetAquittalCostMessageTag(*args): ...

# command talk[1][56]
def SubtractAcquittalCostFromPlayerSouls(*args): ...

# command talk[1][57]
def ShuffleRNGSeed(*args): ...

# command talk[1][58]
def SetRNGSeed(*args): ...

# command talk[1][59]
def ReplaceTool(*args): ...

# command talk[1][60]
def BreakCovenantPledge(*args): ...

# command talk[1][61]
def PlayerRespawn(*args): ...

# command talk[1][62]
def GiveSpEffectToPlayer(speffect: int): ...

# command talk[1][63]
def DisplayBanner(banner_type: int): ...

# command talk[1][64]
def AddIzalithRankingPoints(*args): ...

# command talk[1][65]
def OpenItemAcquisitionMenu(*args): ...

# command talk[1][66]
def AcquireGesture(*args): ...

# command talk[1][67]
def ForceCloseMenu(): ...

# command talk[1][68]
def SetTalkTime(*args): ...

# command talk[1][69]
def CollectJustPyromancyFlame(*args): ...

# command talk[1][70]
def OpenArenaRanking(*args): ...

# command talk[1][71]
def ReportConversationEndToHavokBehavior(*args): ...

# command talk[1][72]
def Command_talk_1_72(*args): ...  # TODO: OpenCovenantMenu from DS1R

# command talk[1][75]
def Command_talk_1_75(*args): ...  # TODO

# command talk[1][76]
def OpenConversationChoicesMenu(*args): ...

# command talk[1][80]
def StopEventAnimWithoutForcingConversationEnd(*args): ...

# command talk[1][81]
def OpenCharaMakeMenu(*args): ...

# command talk[1][82]
def OpenChooseQuantityDialog(*args): ...

# command talk[1][83]
def ClearQuantityValueOfChooseQuantityDialog(*args): ...

# command talk[1][100]
def SetWorkValue(*args): ...

# command talk[1][101]
def UpdatePlayerRespawnPoint(*args): ...

# command talk[1][102]
def SetMessageTagValue(*args): ...

# command talk[1][103]
def TurnCharacterToFaceEntity(*args): ...

# command talk[1][104]
def GetItemFromItemLot(*args): ...

# command talk[1][105]
def OpenEstusAllotMenu(*args): ...

# command talk[1][106]
def AddRankingPoints(*args): ...

# command talk[1][107]
def OpenHollowLevelUpMenu(*args): ...

# command talk[1][110]
def Command_talk_1_110(): ...

# command talk[5][19]
def AddTalkListDataIf(condition: bool, menu_index: int, menu_text: int, required_flag: int): ...

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
# ~~~~~~~~~~~~~~~ TEST FUNCTIONS ~~~~~~~~~~~~~~~ #
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #

# ~~~~~~~~~~~ #
# ~~~ CHR ~~~ #
# ~~~~~~~~~~~ #

# test chr[0]
def IsGeneralAnimEnd(): ...

# test chr[1]
def IsAttackAnimEnd(): ...

# test chr[9]
def AnimIDOffset(): ...

# test chr[10]
def AdditiveBlendAnim(): ...

# test chr[11]
def AdditiveBlendAnimOfSlot(): ...

# test chr[100]
def IsAtkRequest(request_type): ...

# test chr[101]
def IsAtkReleaseRequest(): ...

# test chr[102]
def IsChainAtkRequest(): ...

# test chr[103]
def GetAtkDuration(): ...

# test chr[104]
def GetWeaponSwitchRequest(): ...

# test chr[105]
def GetCommandIDFromEvent(): ...

# test chr[106]
def GetAIActionType(): ...

# test chr[107]
def GetAIChainActionType(): ...

# test chr[108]
def GetChainEvadeRequest(): ...

# test chr[109]
def GetWeaponChangeRequest(): ...

# test chr[110]
def GetAnimIDFromMoveParam(): ...

# test chr[111]
def IsThereAnyAtkRequest(): ...

# test chr[112]
def IsThereAnyChainAtkRequest(): ...

# test chr[113]
def IsItemUseMenuOpening(): ...

# test chr[114]
def IsMagicUseMenuOpening(): ...

# test chr[115]
def IsItemUseMenuOpened(): ...

# test chr[116]
def IsMagicUseMenuOpened(): ...

# test chr[117]
def GetBlendAnimIDFromMoveParam(): ...

# test chr[118]
def GetAIChainStepType(): ...

# test chr[119]
def GetTransitionToSpecialStayAnimID(): ...

# test chr[120]
def GetAIAtkCancelType(): ...

# test chr[121]
def GetWeaponCancelType(): ...

# test chr[122]
def IsWeaponCancelPossible(): ...

# test chr[123]
def GetAIDefenseCancelType(): ...

# test chr[124]
def GetAIVersusBackstabCancelType(): ...

# test chr[200]
def IsFalling(): ...

# test chr[201]
def IsLanding(): ...

# test chr[202]
def GetReceivedDamageType(): ...

# test chr[203]
def IsActiveActionValid(): ...

# test chr[204]
def GetActionEventNumber(): ...

# test chr[205]
def IsNormalDmgPassThroughDuringThrow(): ...

# test chr[206]
def IsThrowing(): ...

# test chr[207]
def GetWeaponSwitchState(): ...

# test chr[209]
def IsEquipmentSwitchPossible(): ...

# test chr[210]
def IsAnimCancelPossibleInAtkRelease(): ...

# test chr[211]
def IsEmergencyStopAnimPlaying(): ...

# test chr[212]
def GetLockRangeState(): ...

# test chr[213]
def GetLockAngleState(): ...

# test chr[214]
def IsAnimCancelPossibleInDamageHit(): ...

# test chr[215]
def IsChangeToScrapeAtk(): ...

# test chr[216]
def IsChangeToDeflectAtk(): ...

# test chr[217]
def IsChangeToAfterParrySuccess(): ...

# test chr[218]
def IsChangeFromNormalToBigAtk(): ...

# test chr[219]
def GetMovementType(): ...

# test chr[220]
def IsLargeAtkComboPossible(): ...

# test chr[221]
def IsMapActionPossible(): ...

# test chr[222]
def GetReceivedDamageDirection(): ...

# test chr[223]
def GetMapActionID(): ...

# test chr[224]
def GetFallHeight(): ...

# test chr[225]
def GetEquipWeaponCategory(): ...

# test chr[226]
def IsHoldingBow(): ...

# test chr[227]
def GetMagicAnimType(): ...

# test chr[228]
def WasNotLargeAtk(): ...

# test chr[229]
def IsBackAtkPossible(): ...

# test chr[230]
def IsAfterParryAtkPossible(): ...

# test chr[231]
def GetItemAnimType(): ...

# test chr[232]
def IsMagicUseable(): ...

# test chr[233]
def IsItemUseable(): ...

# test chr[234]
def IsPrecisionShoot(): ...

# test chr[235]
def IsFireDamaged(): ...

# test chr[236]
def GetDamageLevel(): ...

# test chr[237]
def GetGuardLevelAction(): ...

# test chr[238]
def IsNewLeftHandAtkFromStay(): ...

# test chr[239]
def IsParryFromIdle(): ...

# test chr[240]
def IsGuardFromIdle(): ...

# test chr[241]
def IsNewLeftHandAtkFromAtkCancel(): ...

# test chr[242]
def IsParryFromAtkCancel(): ...

# test chr[243]
def IsGuardFromAtkCancel(): ...

# test chr[244]
def IsTiedUp(): ...

# test chr[245]
def IsOutOfAmmo(): ...

# test chr[246]
def IsUseCatLanding(): ...

# test chr[247]
def GetHoverMoveState(): ...

# test chr[248]
def IsTruelyLanding(): ...

# test chr[249]
def IsRightHandMagic(): ...

# test chr[250]
def IsChangeToSpecialStayAnim(): ...

# test chr[251]
def GetSpecialStayAnimID(): ...

# test chr[252]
def AcquireSpecialDamageAnimationID(): ...

# test chr[253]
def IsRunTurnAnimPlaying(): ...

# test chr[254]
def IsGenerateAction(): ...

# test chr[255]
def GetSpecialStayCancelAnimID(): ...

# test chr[256]
def HasReceivedAnyDamage(): ...

# test chr[257]
def GetMoveAnimParamID(): ...

# test chr[258]
def GetGuardLevel(): ...

# test chr[259]
def IsRequestTurnAnimStart(): ...

# test chr[260]
def IsTurningWithAnim(): ...

# test chr[261]
def IsFlying(): ...

# test chr[262]
def IsAbilityInsufficient(): ...

# test chr[263]
def GetEquipWeightRatioForFalling(): ...

# test chr[264]
def GetFlightMotionState(): ...

# test chr[265]
def GetIsWeakPoint(): ...

# test chr[266]
def GetMoveAnimBlendRatio(): ...

# test chr[267]
def GetLadderActionState(): ...

# test chr[268]
def IsInDisguise(): ...

# test chr[269]
def IsCoopWait(): ...

# test chr[270]
def IsCoop(): ...

# test chr[271]
def IsSpecialTransitionPossible(): ...

# test chr[272]
def GetLandingAnimBlendRatio(): ...

# test chr[273]
def GetThrowAnimID(): ...

# test chr[274]
def DidOpponentDieFromThrow(): ...

# test chr[275]
def HasThrowEnded(): ...

# test chr[276]
def IsThrowSelfDeath(): ...

# test chr[277]
def IsThrowSuccess(): ...

# test chr[278]
def GetGuardMotionCategory(): ...

# test chr[279]
def IsBeingThrown(): ...

# test chr[280]
def IsSelfThrow(): ...

# test chr[281]
def IsThrowDeathState(): ...

# test chr[282]
def GetNewLockState(): ...

# test chr[283]
def IsOnLadder(): ...

# test chr[284]
def GetPhysicalAttribute(): ...

# test chr[285]
def GetSpecialAttribute(): ...

# test chr[286]
def GetSpecialStayDeathAnimID(): ...

# test chr[287]
def HasReceivedAnyDamage_AnimEnd(): ...

# test chr[288]
def EggGrowth_IsHeadScratch(): ...

# test chr[289]
def EggGrowth_IsBecomeEggHead(): ...

# test chr[290]
def IsStop(): ...

# test chr[291]
def IsSomeoneOnLadder(): ...

# test chr[292]
def IsSomeoneUnderLadder(): ...

# test chr[293]
def GetLadderHandState(): ...

# test chr[294]
def DoesLadderHaveCharacters(): ...

# test chr[295]
def IsLadderRightHandStayState(): ...

# test chr[296]
def DescendingToFloor(): ...

# test chr[297]
def IsInputDirectionMatch(): ...

# test chr[298]
def IsSpecialTransition2Possible(): ...

# test chr[299]
def IsVersusDivineDamage(): ...

# test chr[300]
def IsGeneralAnimCancelPossible(): ...

# test chr[301]
def GetEventEzStateFlag(): ...

# test chr[302]
def IsLadderEventEnd(): ...

# test chr[303]
def IsReachBottomOfLadder(): ...

# test chr[304]
def IsReachTopOfLadder(): ...

# test chr[305]
def GetStateChangeType(): ...

# test chr[306]
def IsOnLastRungOfLadder(): ...

# test chr[311]
def GetWeaponDurability(): ...

# test chr[312]
def IsWeaponBroken(): ...

# test chr[313]
def IsAnimEndBySkillCancel(): ...

# test chr[314]
def EggGrowth_IsBecomeEgghead_SecondStage(): ...

# test chr[315]
def IsHamariFallDeath(): ...

# test chr[316]
def IsClient(): ...

# test chr[317]
def IsSlope(): ...

# test chr[318]
def IsSwitchState(): ...

# test chr[319]
def IsPressUpKey(): ...

# test chr[320]
def IsSpecialTurning(): ...

# test chr[321]
def GetIntValueForTest(): ...

# test chr[322]
def IsObjActInterpolatedMotion(): ...

# test chr[323]
def GetObjActTargetDirection(): ...

# test chr[324]
def GetObjActRemainingInterpolateTime(): ...

# test chr[325]
def IsGap(): ...

# test chr[326]
def GetWeaponID(): ...

# test chr[327]
def IsMovingLaterally(): ...

# test chr[328]
def IsNet(): ...

# test chr[329]
def HasBrokenSA(): ...

# test chr[330]
def IsEmergencyQuickTurnActivated(): ...

# test chr[331]
def IsDoubleChantPossible(): ...

# test chr[332]
def IsAnimOver(): ...

# test chr[333]
def ObtainedDT(): ...

# test chr[334]
def GetBehaviorID(): ...

# test chr[335]
def IsTwoHandPossible(): ...

# test chr[336]
def IsPartDamageAdditiveBlendInvalid(): ...

# test chr[337]
def IsThrowPosRealign(): ...

# test chr[338]
def GetBoltLoadingState(): ...

# test chr[339]
def IsAnimEnd(): ...

# test chr[340]
def IsTwinSwords(): ...

# These are likely only added in Dark Souls 3.
# test chr[341]
def DS3GetTurnAngleForDelayedTurn(): ...

# test chr[342]
def DS3GetThrowDefenseCount(): ...

# test chr[343]
def DS3IsEmergencyEvasionPossible(): ...

# test chr[344]
def DS3HasEnoughArtsPoints(): ...

# test chr[345]
def DS3GetEquipWeaponSpecialCategoryNumber(): ...

# test chr[346]
def DS3CheckForEventAnimPlaybackRequest(): ...

# test chr[347]
def DS3IsFemale(): ...

# test chr[348]
def DS3GetDelayTurnAngleDifference(): ...

# test chr[349]
def DS3IsDamageMotionOff(): ...

# test chr[350]
def DS3HasReachedStatsNeededForWeapon(): ...

# test chr[351]
def DS3UpperArmControlOuterAngle(): ...

# test chr[352]
def DS3UpperArmControlTopAndBottomAngle(): ...

# test chr[353]
def DS3CompleteLadderSlideDown(): ...

# test chr[354]
def DS3GetLadderRungCount(): ...

# test chr[355]
def DS3GetNumberOfRungsBelowOnLadder(): ...

# test chr[356]
def DS3GetBowAndArrowSlot(): ...

# test chr[357]
def DS3GetWeaponStorageSpotType(): ...

# test chr[358]
def DS3GetStayAnimCategory(): ...

# test chr[359]
def DS3GetWeaponSwitchState(): ...

# test chr[360]
def DS3IsEquipmentMenuOpen(): ...

# test chr[361]
def DS3GetRemainingArrowCount(): ...

# End of DS3 only.
# test chr[1000]
def GetHP(): ...

# test chr[1001]
def GetStamina(): ...

# test chr[1002]
def IsGhost(): ...

# test chr[1003]
def GetRandomInt(): ...

# test chr[1004]
def GetRandomFloat(): ...

# test chr[1005]
def IsUnableToDie(): ...

# test chr[1006]
def IsResurrectionPossible(): ...

# test chr[1007]
def IsCOMPlayer(): ...

# test chr[1008]
def GetAITargetAwareState(): ...

# test chr[1009]
def IsAIChangeToAwareState(): ...

# test chr[1010]
def GetAITargetAwareStatePreviousFrame(): ...

# test chr[1100]
def GetTestDamageAnimID(): ...

# test chr[1101]
def IsInvincibleDebugMode(): ...

# test chr[1102]
def WasGameLaunchedInPGTestMode(): ...

# test chr[1103]
def IsTiltingStick(): ...

# test chr[1104]
def DS3GetGestureRequestNumber(): ...

# test chr[1105]
def DS3IsStayState(): ...

# test chr[1106]
def DS3ActionRequest(): ...

# test chr[1107]
def DS3ActionCancelRequest(): ...

# test chr[1108]
def DS3ActionDuration(): ...

# test chr[1109]
def DS3HasActionRequest(): ...

# test chr[1110]
def DS3MovementRequest(): ...

# test chr[1111]
def DS3MovementRequestDuration(): ...

# test chr[1112]
def DS3HasThrowRequest(): ...

# test chr[1113]
def DS3IsGuardCancelPossible(): ...

# test chr[1114]
def DS3DoesAnimExist(): ...

# test chr[1115]
def DS3GetAIMovementType(): ...

# test chr[1116]
def DS3GetSpecialEffectID(): ...

# test chr[1117]
def DS3IsConversationEnd(): ...

# test chr[1118]
def DS3IsLocked(): ...

# test chr[1119]
def DS3GetAtkDirection(): ...

# test chr[1120]
def DS3GetPartGroup(): ...

# test chr[1121]
def DS3GetKnockbackDistance(): ...

# test chr[2000]
def DS3IsMoveCancelPossible(): ...

# test chr[2002]
def DS3GetSpecialMovementType(): ...

# test chr[2003]
def DS3GetGeneralTAEFlag(): ...

# test chr[2004]
def DS3IsSwingHitTarget(): ...

# test chr[2005]
def DS3GetCeremonyState(): ...

# test chr[2006]
def DS3GetSuccessiveGuardCount(): ...

# test chr[2007]
def DS3GetMinLuck(): ...

# test chr[2008]
def DS3GetAccumulatedLuck(): ...

# test chr[2009]
def DS3GetMaxLuck(): ...

# test chr[2010]
def DS3GetMaxStamina(): ...

# test chr[2011]
def DS3GetGeneralMSBParameter(): ...

# test chr[2012]
def DS3IsHitWall(): ...

# test chr[2013]
def DS3GetSafetyDirection(): ...

# test chr[2014]
def DS3IsInCeremony(): ...

# test chr[2015]
def DS3IsDoingCorpseCarryKeyframe(): ...

# test chr[2016]
def DS3GetMP(): ...

# test chr[2017]
def DS3IsCeremonyComplete(): ...

# test chr[2018]
def DS3IsCeremonyInterrupt(): ...

# ~~~~~~~~~~~~ #
# ~~~ TALK ~~~ #
# ~~~~~~~~~~~~ #

# test talk[0]
def GetWhetherEnemiesAreNearby(*args): ...

# test talk[1]
def GetDistanceToPlayer() -> float: ...

# test talk[2]
def HasTalkEnded(*args): ...

# test talk[3]
def CheckSelfDeath() -> bool: ...

# test talk[4]
def IsPlayerTalkingToMe() -> bool: ...

# test talk[5]
def IsAttackedBySomeone(*args): ...

# test talk[6]
def GetSelfHP() -> int: ...  # 0 to 100

# test talk[7]
def GetDistanceFromEnemy(*args): ...

# test talk[8]
def GetRelativeAngleBetweenPlayerAndSelf() -> float: ...

# test talk[9]
def IsPlayerAttacking(*args): ...

# test talk[10]
def GetRelativeAngleBetweenSelfAndPlayer(*args): ...

# test talk[11]
def IsTalkInProgress(*args): ...

# test talk[12]
def GetTalkInterruptReason(*args): ...

# test talk[13]
def GetShopCondition(*args): ...

# test talk[14]
def GetOneLineHelpStatus(*args): ...

# test talk[15]
def GetFlagState(flag: int) -> bool: ...

# test talk[16]
def IsEquipmentIDObtained(*args): ...

# test talk[17]
def IsEquipmentIDEquipped(*args): ...

# test talk[18]
def IsFightingAlone(*args): ...

# test talk[19]
def IsClientPlayer(*args): ...

# test talk[20]
def IsCampMenuOpen(*args): ...

# test talk[21]
def IsGenericDialogOpen() -> int: ...  # TODO: Could be bool output.

# test talk[22]
def GetGenericDialogButtonResult() -> int: ...

# test talk[23]
def GetTalkListEntryResult() -> int: ...

# test talk[24]
def IsMoviePlaying(*args): ...

# test talk[25]
def IsMenuOpen(menu_index: int) -> bool: ...

# test talk[26]
def IsCharacterDisabled() -> bool: ...

# test talk[27]
def IsPlayerDead(*args): ...

# test talk[28]
def DidYouDoSomethingInTheMenu(*args): ...

# test talk[29]
def GetStatus(*args): ...

# test talk[30]
def IsPlayerMovingACertainDistance(*args): ...

# test talk[31]
def IsTalkingToSomeoneElse() -> bool: ...

# test talk[32]
def HasDisableTalkPeriodElapsed(*args): ...

# test talk[33]
def HasPlayerBeenAttacked() -> bool: ...

# test talk[34]
def GetPlayerYDistance(*args): ...

# test talk[35]
def GetPlayerChrType(*args): ...

# test talk[36]
def CanIGoToNextTalkBlock(*args): ...

# test talk[37]
def CompareBonfireState(*args): ...

# test talk[38]
def CompareBonfireLevel(*args): ...

# test talk[39]
def CompareParentBonfire(*args): ...

# test talk[40]
def BonfireRegistration0(*args): ...

# test talk[41]
def BonfireRegistration1(*args): ...

# test talk[42]
def BonfireRegistration2(*args): ...

# test talk[43]
def BonfireRegistration3(*args): ...

# test talk[44]
def BonfireRegistration4(*args): ...

# test talk[45]
def ComparePlayerStatus(*args): ...

# test talk[46]
def RelativeAngleBetweenTwoPlayers_SpecifyAxis(*args): ...

# test talk[47]
def ComparePlayerInventoryNumber(*args): ...

# test talk[48]
def IsPlayerCurrentWeaponDamaged(*args): ...

# test talk[49]
def ComparePlayerAcquittalPrice(*args): ...

# test talk[50]
def CompareRNGValue(*args): ...

# test talk[51]
def WasWarpMenuDestinationSelected(*args): ...

# test talk[52]
def IsMultiplayerInProgress(*args): ...

# test talk[53]
def IsTalkExclusiveMenuOpen(*args): ...

# test talk[54]
def IsRankingMenuOpen(*args): ...

# test talk[55]
def GetPlayerRemainingHP(*args): ...

# test talk[56]
def CheckActionButtonArea(*args): ...

# test talk[57]
def CheckSpecificPersonTalkHasEnded(*args): ...

# test talk[58]
def CheckSpecificPersonGenericDialogIsOpen(*args): ...

# test talk[59]
def CheckSpecificPersonMenuIsOpen(*args): ...

# test talk[60]
def DoesSelfHaveSpEffect(*args): ...

# test talk[61]
def DoesPlayerHaveSpEffect(*args): ...

# test talk[62]
def GetValueFromNumberSelectDialog(*args): ...

# test talk[72]
def Test_talk_72(*args): ...  # TODO

# test talk[75]
def Test_talk_75(*args): ...  # TODO

# test talk[100]
def GetWorkValue(*args): ...

# test talk[101]
def GetEventFlagValue(*args): ...

# test talk[102]
def GetCurrentStateElapsedFrames(*args): ...

# test talk[103]
def GetCurrentStateElapsedTime(*args): ...

# test talk[104]
def GetPlayerStatus(*args): ...

# test talk[105]
def GetLevelUpSoulCost(*args): ...

# test talk[106]
def GetWhetherChrTurnAnimHasEnded(*args): ...

# test talk[107]
def GetWhetherChrEventAnimHasEnded(*args): ...

# test talk[108]
def GetItemHeldNumLimit(*args): ...

# TODO: Lost ID.
# def GetCurrentAnimation(): ...


class State:
    """For intellisense in ESP scripts."""

    def previous_states(self):
        pass

    def enter(self):
        pass

    def test(self):
        pass

    def ongoing(self):
        pass

    def exit(self):
        pass
